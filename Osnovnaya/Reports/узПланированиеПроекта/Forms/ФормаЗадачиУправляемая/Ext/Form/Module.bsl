
/////////////////////////////////////////////////
// Общего назначения

#Область ОбщегоНазначения

&НаКлиенте
Функция СкорректироватьДатуНачала(Знач пДата)
	Если Час(пДата) < Час(Объект.НачалоРабочегоДня) Тогда
		Возврат НачалоДня(пДата) + Час(Объект.НачалоРабочегоДня)*3600 + Минута(Объект.НачалоРабочегоДня)*60;
	ИначеЕсли Час(пДата) >= Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24*3600 + Час(Объект.НачалоРабочегоДня)*3600 + Минута(Объект.НачалоРабочегоДня)*60, ложь);
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(пДата, ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция СкорректироватьДатуОкончания(Знач пДата, Знач СдвигатьНазад = Истина)
	Если Час(пДата) <= Час(Объект.НачалоРабочегоДня) и СдвигатьНазад = Истина Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) - 24*3600 + (Час(Объект.НачалоРабочегоДня)+Объект.КоличествоРабочихЧасовВДне)*3600+ Минута(Объект.НачалоРабочегоДня)*60, Истина);
	ИначеЕсли Час(пДата) <= Час(Объект.НачалоРабочегоДня) и СдвигатьНазад = Ложь Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + (Час(Объект.НачалоРабочегоДня)+Объект.КоличествоРабочихЧасовВДне)*3600+ Минута(Объект.НачалоРабочегоДня)*60, Истина);
	ИначеЕсли Час(пДата) > Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне и СдвигатьНазад = Ложь Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24*3600 + (Час(Объект.НачалоРабочегоДня)+Объект.КоличествоРабочихЧасовВДне)*3600 + Минута(Объект.НачалоРабочегоДня)*60, ложь);
	ИначеЕсли Час(пДата) > Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне и СдвигатьНазад = Истина Тогда
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + (Час(Объект.НачалоРабочегоДня)+Объект.КоличествоРабочихЧасовВДне)*3600 + Минута(Объект.НачалоРабочегоДня)*60, ложь);
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(пДата, СдвигатьНазад);
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ВернутьДатуСУчетомВыходных(Знач пДата, Знач СдвигатьНазад = Истина)
	Если СдвигатьНазад = Истина Тогда
		Пока (ДеньНедели(пДата)=6 и Не Объект.СубботаРабочий) или (ДеньНедели(пДата)=7 и Не Объект.ВоскресеньеРабочий) Цикл
			пДата = пДата - (3600 * 24);
		КонецЦикла;
	Иначе
		Пока (ДеньНедели(пДата)=6 и Не Объект.СубботаРабочий) или (ДеньНедели(пДата)=7 и Не Объект.ВоскресеньеРабочий) Цикл
			пДата = пДата + (3600 * 24);
		КонецЦикла;
	КонецЕсли;
	Возврат пДата;
КонецФункции


&НаКлиенте
Функция РасчитатьРазницуМеждуДатами(Знач пНачало, Знач пОкончание) Экспорт 
	Перем Начало, Окончание;
	Начало = пНачало;
	Окончание = пОкончание;
	
	пДлительность = 0;
	Пока Начало<Окончание Цикл
		Если Окончание - Начало >=(3600*24) Тогда
			пДлительность = пДлительность + 1;
		ИначеЕсли Окончание - Начало >=(3600*Объект.КоличествоРабочихЧасовВДне) Тогда
			Если Не (Час(Окончание) <= Час(Объект.НачалоРабочегоДня) или Час(Начало) >= Час(Объект.НачалоРабочегоДня)+Объект.КоличествоРабочихЧасовВДне) Тогда
				пДлительность = пДлительность + 1;
			КонецЕсли;
		Иначе
			пДлительность = пДлительность + Окр((Окончание - Начало)/(3600*10), 1); // Дробная часть будет в часах //Объект.КоличествоРабочихЧасовВДне);
		КонецЕсли;
		
		Начало = Начало + (3600 * 24);
		
		Начало = ВернутьДатуСУчетомВыходных(Начало, Ложь);
	КонецЦикла;	
	Возврат пДлительность;
КонецФункции

&НаКлиенте
Функция РасчитатьОкончание(Знач Начало, Знач перемДлительность) Экспорт
	Счетчик = перемДлительность;
	Окончание = Начало;
	Если перемДлительность >= 0 Тогда
		Пока Счетчик > 0 Цикл
			
			Если Счетчик >= Объект.КоличествоРабочихЧасовВДне/10 Тогда
				Окончание = Окончание + (3600 * 24);
			Иначе
				Окончание = Окончание + (3600*Счетчик*10); //Дробная часть будут часы //(3600 * Объект.КоличествоРабочихЧасовВДне)*Счетчик;
			КонецЕсли;
			
			Пока (ДеньНедели(Окончание)=7 И не Объект.ВоскресеньеРабочий) или ((ДеньНедели(Окончание)=6 и не Объект.СубботаРабочий) и Час(Окончание)>0) Цикл
				Окончание = Окончание + (3600 * 24);
			КонецЦикла;
			
			Счетчик = Счетчик - 1;
		КонецЦикла;
	Иначе
		Пока Счетчик < 0 Цикл
			
			Если Счетчик <= -Объект.КоличествоРабочихЧасовВДне/10 Тогда
				Окончание = Окончание - (3600 * 24);
			Иначе
				
				Пока Счетчик < 0 Цикл
					Если Час(Окончание - 3600) >= Час(Объект.НачалоРабочегоДня) и Час(Окончание - 3600) < Час(Объект.НачалоРабочегоДня)+Объект.КоличествоРабочихЧасовВДне Тогда
						Окончание = Окончание - 3600;	
					Иначе
						Окончание = НачалоДня(Окончание - 24*3600) + (Час(Объект.НачалоРабочегоДня)-1)*3600 + Минута(Объект.НачалоРабочегоДня)*3600; //Дробная часть будут часы //(3600 * 24)*Счетчик;
					КонецЕсли;
					Счетчик = Счетчик + 0.1;
				КонецЦикла;
				
				
			КонецЕсли;
			
			Пока (ДеньНедели(Окончание)=7 и Не Объект.ВоскресеньеРабочий) или ((ДеньНедели(Окончание)=6 и Не Объект.СубботаРабочий) и Час(Окончание)>0) Цикл
				Окончание = Окончание - (3600 * 24);
			КонецЦикла;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Окончание;
КонецФункции

&НаКлиенте
Процедура ВычислитьДлительностьЗадачи() 
	Если ЗначениеЗаполнено(ДатаНачалаФакт) и ЗначениеЗаполнено(ДатаЗавершенияФакт) Тогда
		ДлительностьФакт = РасчитатьРазницуМеждуДатами(ДатаНачалаФакт, ДатаЗавершенияФакт);
	Иначе
		ДлительностьФакт = 0; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция НачалоРабочегоДня(пДата)
	Если Час(пДата) < Час(Объект.НачалоРабочегоДня) + Объект.КоличествоРабочихЧасовВДне Тогда
		Возврат НачалоДня(пДата) + Час(Объект.НачалоРабочегоДня)*3600 + Минута(Объект.НачалоРабочегоДня)*60;
	Иначе
		Возврат ВернутьДатуСУчетомВыходных(НачалоДня(пДата) + 24*3600 + Час(Объект.НачалоРабочегоДня)*3600 + Минута(Объект.НачалоРабочегоДня)*60, ложь);
	КонецЕсли;
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////
// События Формы

#Область СобытияФормы

&НаКлиенте
Процедура ПрименитьИЗакрыть(Команда)
	Если Элементы.Дополнительно.Доступность Тогда
		Если ВидОграничения = ВидыОграничений.КМР или 
			 ВидОграничения = ВидыОграничений.КМП Тогда
			 ДатаОграничения = Дата('00010101');
		 ИначеЕсли (ВидОграничения = ВидыОграничений.ННП или 
			 ВидОграничения = ВидыОграничений.ННР или 
			 ВидОграничения = ВидыОграничений.ФН) 
			 и Не ЗначениеЗаполнено(ДатаОграничения) Тогда
			 ДатаОграничения = ДатаНачалаПлан;
		ИначеЕсли Не ЗначениеЗаполнено(ДатаОграничения) Тогда
			 ДатаОграничения = ДатаЗавершенияПлан;
		КонецЕсли;
	КонецЕсли;
	//ВладелецФормы.ПрименитьИзмененияЗадачиВФорме(НомерСтрокиЗадачи, НомерСтрокиЗадачиКонец, ЭтаФорма);
	Закрыть(Истина);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры.Ключ);
	
	СписокВыбора = Элементы.ТабличноеПолеПредшественникиТипСвязи.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ПолучитьПредставлениеВидСвязиДляProject(0));
	СписокВыбора.Добавить(ПолучитьПредставлениеВидСвязиДляProject(1));
	СписокВыбора.Добавить(ПолучитьПредставлениеВидСвязиДляProject(2));
	СписокВыбора.Добавить(ПолучитьПредставлениеВидСвязиДляProject(3));
	
	Элементы.ТабличноеПолеПредшественникиНазваниеЗадачи.СписокВыбора.ЗагрузитьЗначения(Параметры.МассивНазванийЗадач);	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//СоответствиеСтрокРесуровПоGUIDам = Новый Соответствие;
	//Для Каждого СтрокаРесурса из ТабличноеПолеРесурсы Цикл
	//	СоответствиеСтрокРесуровПоGUIDам.Вставить(СтрокаРесурса.GUID, СтрокаРесурса);
	//КонецЦикла;
	
	СписокВыбора = Элементы.ТабличноеПолеРесурсовЗадачиНазваниеРесурса.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого СтрокаРесурса из ТабличноеПолеРесурсы Цикл
		СтрокаСписка = СписокВыбора.Добавить(СтрокаРесурса.GUID_Ресурса, СтрокаРесурса.НазваниеРесурса);
		
		Если СтрокаРесурса.ТипРесурса = "Трудовой" Тогда
			СтрокаСписка.Картинка = БиблиотекаКартинок.Пользователь;
		Иначе
			СтрокаСписка.Картинка = БиблиотекаКартинок.Справочник;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаПлан);
	ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаФакт);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияФакт);
	
	ВычислитьДлительностьЗадачи();
	ОбновлениеОтображенияВФорме();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеОтображенияВФорме()
	Элементы.Предшественники.Заголовок = НСтр("ru = 'Предшественники '") + ?(ТабличноеПолеПредшественники.Количество()>0, "("+ТабличноеПолеПредшественники.Количество()+")", "");
	Элементы.Ресурсы.Заголовок = НСтр("ru = 'Ресурсы '") + ?(ТабличноеПолеРесурсовЗадачи.Количество()>0, "("+ТабличноеПолеРесурсовЗадачи.Количество()+")", "");
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////
// События элементов управления

#Область СобытияЭлементовУправления

&НаКлиенте
Процедура ДатаНачалаПланПриИзменении(Элемент)
	ВыбранноеЗначение = ДатаНачалаПлан;
		
	Если ЗначениеЗаполнено(ДатаНачалаПлан) Тогда
		ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
		Если Длительность = 0 Тогда
			ДатаЗавершенияПлан = ДатаНачалаПлан;
		ИначеЕсли ЗначениеЗаполнено(ДатаЗавершенияПлан) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ИзменениеДатыЗавершения", ЭтаФорма),НСтр("ru = 'Изменить дату завершения?'"), Режим, 0);
		Иначе
			ДатаЗавершенияПлан = СкорректироватьДатуОкончания(РасчитатьОкончание(ДатаНачалаПлан, Длительность));
			ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
		КонецЕсли;
	КонецЕсли;		

КонецПроцедуры


&НаКлиенте
Процедура ДатаНачалаПланОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДатаНачалаПлан) Тогда
		ДатаНачалаПлан = СкорректироватьДатуНачала(ВыбранноеЗначение);
		
		ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
		
	    Если Длительность = 0 Тогда
			ДатаЗавершенияПлан = ДатаНачалаПлан;
		ИначеЕсли ЗначениеЗаполнено(ДатаЗавершенияПлан) Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			ПоказатьВопрос(Новый ОписаниеОповещения("ИзменениеДатыЗавершения", ЭтаФорма),НСтр("ru = 'Изменить дату завершения?'"), Режим, 0);
		Иначе
			ДатаЗавершенияПлан = СкорректироватьДатуОкончания(РасчитатьОкончание(ДатаНачалаПлан, Длительность));
			ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеДатыЗавершения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДатаЗавершенияПлан = СкорректироватьДатуОкончания(РасчитатьОкончание(ДатаНачалаПлан, Длительность));
		ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
	Иначе 
		Длительность = РасчитатьРазницуМеждуДатами(ДатаНачалаПлан, ДатаЗавершенияПлан);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДатаЗавершенияПланОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДатаЗавершенияПлан = СкорректироватьДатуОкончания(ВыбранноеЗначение, Ложь);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
	
	Если Не ЗначениеЗаполнено(ДатаНачалаПлан) Тогда
		ДатаНачалаПлан = НачалоРабочегоДня(НачалоДня(ДатаЗавершенияПлан));
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаПлан);
	КонецЕсли;
	
	Если ДатаНачалаПлан >  ДатаЗавершенияПлан Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Плановая дата завершения задачи должна быть больше, чем дата начала!'"));
		ДатаЗавершенияПлан = ДатаНачалаПлан+3600;
		ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
		Возврат;
	Конецесли;
	
	Длительность = РасчитатьРазницуМеждуДатами(ДатаНачалаПлан, ДатаЗавершенияПлан);
	

КонецПроцедуры


&НаКлиенте
Процедура ДатаЗавершенияПланПриИзменении(Элемент)
	
	ДатаЗавершенияПлан = СкорректироватьДатуОкончания(ДатаЗавершенияПлан, Ложь);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
	
	Если Не ЗначениеЗаполнено(ДатаНачалаПлан) Тогда
		ДатаНачалаПлан = НачалоРабочегоДня(НачалоДня(ДатаЗавершенияПлан));
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаПлан);
	КонецЕсли;
	
	Если ДатаНачалаПлан >  ДатаЗавершенияПлан Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Плановая дата завершения задачи должна быть больше, чем дата начала!'"));
		ДатаЗавершенияПлан = ДатаНачалаПлан+3600;
		ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
		Возврат;
	Конецесли;
	
	Длительность = РасчитатьРазницуМеждуДатами(ДатаНачалаПлан, ДатаЗавершенияПлан);
	
КонецПроцедуры

// факт дата начала

&НаКлиенте
Процедура ДатаНачалаФактПриИзменении(Элемент)
	ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
	ВычислитьДлительностьЗадачи();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаФактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДатаНачалаФакт = СкорректироватьДатуНачала(ВыбранноеЗначение);
	ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
	ВычислитьДлительностьЗадачи();
КонецПроцедуры

// факт дата завершения

&НаКлиенте
Процедура ДатаЗавершенияФактПриИзменении(Элемент)
	ЗаполнитьСписокВыбораДляДатыНачала(Элемент);
	Если ЗначениеЗаполнено(ДатаЗавершенияФакт) и Не ЗначениеЗаполнено(ДатаНачалаФакт) Тогда
		Если Длительность = 0 Тогда
			ДатаНачалаФакт = ДатаЗавершенияФакт;
		Иначе
			ДатаНачалаФакт = СкорректироватьДатуНачала(РасчитатьОкончание(ДатаЗавершенияФакт, -Длительность));
		КонецЕсли;
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаФакт);
	КонецЕсли;
	
	ВычислитьДлительностьЗадачи();
	Если ЗначениеЗаполнено(ДатаЗавершенияФакт) Тогда
		ПроцентЗавершения = 100;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗавершенияФактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДатаЗавершенияФакт = СкорректироватьДатуОкончания(ВыбранноеЗначение, Ложь);
	ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
	
	Если Не ЗначениеЗаполнено(ДатаНачалаФакт) Тогда
		Если Длительность = 0 Тогда
			ДатаНачалаФакт = ДатаЗавершенияФакт;
		Иначе
			ДатаНачалаФакт = НачалоРабочегоДня(НачалоДня(ДатаЗавершенияФакт));
		КонецЕсли;
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаФакт);
	КонецЕсли;
	
	Если ДатаНачалаФакт >  ДатаЗавершенияФакт Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Плановая дата завершения задачи должна быть больше, чем дата начала!'"));
		ДатаЗавершенияФакт = ДатаНачалаФакт;
		ЗаполнитьСписокВыбораДляДатыОкончания(Элемент);
		Возврат;
	Конецесли;
	
	ВычислитьДлительностьЗадачи();
	
	Если ЗначениеЗаполнено(ДатаЗавершенияФакт) Тогда
		ПроцентЗавершения = 100;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДлительностьПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ДатаНачалаПлан) Тогда
		ДатаНачалаПлан = СкорректироватьДатуНачала(НачалоДня(ТекущаяДатаСеансаНаСервере()));
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаПлан);
	КонецЕсли;
	
	Если Длительность = 0 Тогда
		ДатаЗавершенияПлан = ДатаНачалаПлан;
	Иначе
		ДатаЗавершенияПлан = СкорректироватьДатуОкончания(РасчитатьОкончание(ДатаНачалаПлан, Длительность));
	КонецЕсли;
	ЗаполнитьСписокВыбораДляДатыОкончания(Элементы.ДатаЗавершенияПлан);
КонецПроцедуры


&НаКлиенте 
Процедура ЗаполнитьСписокВыбораДляДатыНачала(Элемент)
	Элемент.СписокВыбора.Очистить();
	пДата = ЭтаФорма[Элемент.Имя];
	Если Не ЗначениеЗаполнено(пДата) Тогда
		пДата = ДатаНачалаПлан;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пДата) Тогда
		пДата = ТекущаяДатаСеансаНаСервере();
	КонецЕсли;
	
	НачалоРабочегоДняДляСпискаВыбора = НачалоДня(пДата)+Час(Объект.НачалоРабочегоДня)*60*60+Минута(Объект.НачалоРабочегоДня)*60;
	ОкончаниеРабочегоДня = НачалоДня(пДата)+(Час(Объект.НачалоРабочегоДня)+Объект.КоличествоРабочихЧасовВДне)*60*60+Минута(Объект.НачалоРабочегоДня)*60;
	а = 0;
	Пока Истина Цикл
		
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*60*60;
		
		Если НачалоЧаса(ВремяСписка) >= НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		
		Элемент.СписокВыбора.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		а = а + 1;
	КонецЦикла;
	
	
	Если Элемент.Имя = "ДатаНачалаПлан" и Не ЗначениеЗаполнено(ДатаНачалаФакт) Тогда 
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаНачалаФакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьСписокВыбораДляДатыОкончания(Элемент)
	Элемент.СписокВыбора.Очистить();
	пДата = ЭтаФорма[Элемент.Имя];
	Если Не ЗначениеЗаполнено(пДата) Тогда
		пДата = ДатаЗавершенияПлан;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пДата) Тогда
		пДата = ТекущаяДатаСеансаНаСервере();
	КонецЕсли;
	НачалоРабочегоДняДляСпискаВыбора = НачалоДня(пДата)+(Час(Объект.НачалоРабочегоДня)+1)*60*60+Минута(Объект.НачалоРабочегоДня)*60;
	ОкончаниеРабочегоДня = НачалоДня(пДата)+(Час(Объект.НачалоРабочегоДня)+Объект.КоличествоРабочихЧасовВДне)*60*60+Минута(Объект.НачалоРабочегоДня)*60;
	а = 0;
	Пока Истина Цикл
		
		ВремяСписка = НачалоРабочегоДняДляСпискаВыбора + а*60*60;
		
		Если НачалоЧаса(ВремяСписка) > НачалоЧаса(ОкончаниеРабочегоДня) Тогда
			Прервать;
		КонецЕсли;
		
		Элемент.СписокВыбора.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		а = а + 1;
	КонецЦикла; 
	
	Если Элемент.Имя = "ДатаЗавершенияПлан" и Не ЗначениеЗаполнено(ДатаЗавершенияФакт) Тогда 
		ЗаполнитьСписокВыбораДляДатыНачала(Элементы.ДатаЗавершенияФакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзСпискаВремени(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		ЭтаФорма[ДополнительныеПараметры.ПутьКДанным] = РезультатВыбора.Значение;
	КонецЕсли; 
КонецПроцедуры

// [+] #222 Иванов А.Б. 04.01.24 ПланированиеПроекта
&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаНаСервере()
	Возврат ТекущаяДатаСеанса();
КонецФункции 

#КонецОбласти

/////////////////////////////////////////////////
// Связи

#Область Связи

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеВидСвязиДляProject(ВидСвязи)
		Если ВидСвязи = 1 Тогда
			Возврат "Окончание-Окончание";
		ИначеЕсли ВидСвязи = 2 Тогда
			Возврат "Начало-Окончание";
		ИначеЕсли ВидСвязи = 3 Тогда
			Возврат "Начало-Начало";
		Иначе
			Возврат "Окончание-Начало";
		КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеВидСвязиДляProjectНаКлиенте(ВидСвязи)
		Если ВидСвязи = 1 Тогда
			Возврат "Окончание-Окончание";
		ИначеЕсли ВидСвязи = 2 Тогда
			Возврат "Начало-Окончание";
		ИначеЕсли ВидСвязи = 3 Тогда
			Возврат "Начало-Начало";
		Иначе
			Возврат "Окончание-Начало";
		КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТабличноеПолеПредшественникиНазваниеЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СписокВыбора = Элементы.ТабличноеПолеПредшественникиНазваниеЗадачи.СписокВыбора;	
	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		
		// Проверка на зацикливание
		Если ВладелецФормы.ПроверкаЗацикливанияСвязей(НомерСтроки, СписокВыбора.Индекс(ЭлементСписка) + 3) Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Указанная связь невозможна, так как она может привести к циклической зависимости между указанными задачами'"));		
			Элементы.ТабличноеПолеПредшественники.ЗакончитьРедактированиеСтроки(Истина);
			Возврат;
		КонецЕсли;
		
		Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало = СписокВыбора.Индекс(ЭлементСписка) + 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиНачалоПриИзменении(Элемент)
	ВыбранноеЗначение = Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало;
	
	Если ВыбранноеЗначение > ПоследняяСтрока - 2 Тогда
		ВыбранноеЗначение = ПоследняяСтрока - 2;
	КонецЕсли;
	
	Если ВыбранноеЗначение <= 0 Тогда
		ВыбранноеЗначение = 1;
	КонецЕсли;
	
	Если ВладелецФормы.ПроверкаЗацикливанияСвязей(НомерСтроки, ВыбранноеЗначение + 2) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Указанная связь невозможна, так как она может привести к циклической зависимости между указанными задачами'"));		
		СтандартнаяОбработка = ложь;
		Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало = пНачальныйНомерСтроки;
		Возврат;
	КонецЕсли;
	                                       
	Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало = ВыбранноеЗначение;
	
	СписокВыбора = Элементы.ТабличноеПолеПредшественникиНазваниеЗадачи.СписокВыбора;	
	ЭлементСписка = СписокВыбора.Получить(ВыбранноеЗначение-1);
	Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.НазваниеЗадачи = ЭлементСписка.Значение;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//ОбновлениеОтображенияВФорме();
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиПослеУдаления(Элемент)
	ОбновлениеОтображенияВФорме();
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиПередНачаломИзменения(Элемент, Отказ)
	пНачальныйНомерСтроки = Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.Начало;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеПредшественникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Не Копирование Тогда
		Если Не ЗначениеЗаполнено(Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.ВидСвязи) Тогда
			Элементы.ТабличноеПолеПредшественники.ТекущиеДанные.ВидСвязи = ПолучитьПредставлениеВидСвязиДляProjectНаКлиенте(0);
		КонецЕсли;
	Конецесли;
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////
// Ресурсы

#Область Ресурсы

&НаКлиенте
Процедура ТабличноеПолеРесурсовЗадачиНазваниеРесурсаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТабличноеПолеРесурсовЗадачи.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.НазваниеРесурса) Тогда
		
		ТекущаяСтрока.GUID_Ресурса = ТекущаяСтрока.НазваниеРесурса;
		СтрокаВОбщейТаблицеРесурсов = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", ТекущаяСтрока.GUID_Ресурса))[0];
		ТекущаяСтрока.НазваниеРесурса = СтрокаВОбщейТаблицеРесурсов.НазваниеРесурса;
		ТекущаяСтрока.КраткоеНазвание = СтрокаВОбщейТаблицеРесурсов.КраткоеНазвание;
		ТекущаяСтрока.ТипРесурса = СтрокаВОбщейТаблицеРесурсов.ТипРесурса;
		Если ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", ТекущаяСтрока.GUID_Ресурса))[0].ТипРесурса = "Трудовой" и Не ЗначениеЗаполнено(ТекущаяСтрока.Единицы) Тогда
			ТекущаяСтрока.Единицы = 100;
		Иначе
			ТекущаяСтрока.Единицы = 1;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсовЗадачиНазваниеРесурсаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущаяСтрока = Элементы.ТабличноеПолеРесурсовЗадачи.ТекущиеДанные;
		ТекущаяСтрока.GUID_Ресурса = ВыбранноеЗначение;
			
		СтрокаВОбщейТаблицеРесурсов = ТабличноеПолеРесурсы.НайтиСтроки(Новый Структура("GUID_Ресурса", ТекущаяСтрока.GUID_Ресурса))[0];
		ТекущаяСтрока.НазваниеРесурса = СтрокаВОбщейТаблицеРесурсов.НазваниеРесурса;
		
		ТекущаяСтрока.КраткоеНазвание = СтрокаВОбщейТаблицеРесурсов.КраткоеНазвание;
		ТекущаяСтрока.ТипРесурса = СтрокаВОбщейТаблицеРесурсов.ТипРесурса;
		Если ТекущаяСтрока.ТипРесурса = "Трудовой" и Не ЗначениеЗаполнено(ТекущаяСтрока.Единицы) Тогда
			ТекущаяСтрока.Единицы = 100;
		Иначе
			ТекущаяСтрока.Единицы = 1;
		КонецЕсли;
		//Элемент.Значение =  ТекущаяСтрока.НазваниеРесурса;
		Элементы. ТабличноеПолеРесурсовЗадачи.ТекущийЭлемент = Элементы.ТабличноеПолеРесурсовЗадачиЕдиницы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсовЗадачиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	//ОбновлениеОтображенияВФорме();
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРесурсовЗадачиПослеУдаления(Элемент)
	ОбновлениеОтображенияВФорме();
КонецПроцедуры

#КонецОбласти





