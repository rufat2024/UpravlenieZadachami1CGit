
#Область ДействияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИнициализироватьФормуНаСервере(Отказ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИнициализироватьФормуНаКлиенте(Отказ);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УстановитьВидимостьЭлементовНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ДействияЭлементовФормы

&НаКлиенте
Процедура СписокЗадачиВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	ДобавитьВВыбранныеЗадачиНаКлиенте(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьКонфигурациюИзХранилищаПриИзменении(Элемент)
	УстановитьВидимостьЭлементовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьФайлыНастроекОбъединенияПриИзменении(Элемент)
	УстановитьВидимостьЭлементовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПутьВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораКаталогаНаКлиенте("ПутьВыгрузки");
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ВыбратьВсеФлаги(Команда)
	ИзменитьФлагиНаКлиенте(Объект.Конфигурации, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеФлаги(Команда)
	ИзменитьФлагиНаКлиенте(Объект.Конфигурации, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьВсеФлаги(Команда)
	ИнвертироватьВсеНаКлиенте(Объект.Конфигурации);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыбранныеЗадачи(Команда)
	ОчиститьВыбранныеЗадачиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ИзменитьПоследовательностьЗадачНаКлиенте(- 1);
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	ИзменитьПоследовательностьЗадачНаКлиенте(1);
КонецПроцедуры

#КонецОбласти

#Область Заполнение

&НаСервере
Процедура ИнициализироватьФормуНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ДатаРелиза						= ТекущаяДатаСеанса();
	
	СкопироватьСписокЗначений(ПолучитьСписокТипыОбновления(), Элементы.ТипОбновления.СписокВыбора);
	Объект.ТипОбновления					= Элементы.ТипОбновления.СписокВыбора[0].Представление;
	
	Элементы.Страницы.ОтображениеСтраниц 	= ОтображениеСтраницФормы.Нет;
	
	ИнициализироватьПоследовательностьСтраницНаСервере();
	ЗаполнитьКонфигурацииНаСервере();
	ЗаполнитьОтборыЗадачНаСервере();
	
	УстановитьВидимостьЭлементовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьФормуНаКлиенте(Отказ)
	УстановитьДоступностьКнопокВпередНазадНаКлиенте();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовНаСервере()
	
	//ПутьВыгрузки
	Элементы.ПутьВыгрузки.ТолькоПросмотр = Не (Объект.ВыгружатьКонфигурациюИзХранилища
											Или Объект.ВыгружатьФайлыНастроекОбъединения);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПоследовательностьСтраницНаСервере()
	
	ПоследовательностьСтраниц.Добавить("СтраницаОсновныеНастройки");
	ПоследовательностьСтраниц.Добавить("СтраницаКонфигурации");
	ПоследовательностьСтраниц.Добавить("СтраницаЗадачи");
	ПоследовательностьСтраниц.Добавить("СтраницаПодтверждение");
	ПоследовательностьСтраниц.Добавить("СтраницаРезультат");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКонфигурацииНаСервере()
	
	Объект.Конфигурации.Очистить();
	
	МассивКонфигураций = ПолучитьМассивКонфигурацийНаСервереБезКонтекста();
	
	Для Каждого Конфигурация Из МассивКонфигураций Цикл 
		
		НоваяСтрока 				= Объект.Конфигурации.Добавить();
		НоваяСтрока.Конфигурация 	= Конфигурация;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтборыЗадачНаСервере()
	
	МассивВыбранныхКонфигураций = Объект.Конфигурации.Выгрузить().Скопировать(Новый Структура("Выбран", Истина)).ВыгрузитьКолонку("Конфигурация");
	СписокВыбранныхКонфигураций = Новый СписокЗначений;
	СписокВыбранныхКонфигураций.ЗагрузитьЗначения(МассивВыбранныхКонфигураций);
	
	//Статус
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗадачи.Отбор, "Статус",, 
		ВидСравненияКомпоновкиДанных.Равно,, 
		Ложь, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	//Спринт
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗадачи.Отбор, "Спринт",, 
		ВидСравненияКомпоновкиДанных.Равно,, 
		Ложь, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	//Конфигурация
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗадачи.Отбор, "Конфигурация",
		СписокВыбранныхКонфигураций, 
		ВидСравненияКомпоновкиДанных.ВСписке,, 
		Ложь, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	//Ссылка
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокЗадачи.Отбор, "Ссылка",, 
		ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,, 
		Ложь, 
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлагиНаКлиенте(ТабличнаяЧасть, Значение)
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл 
		Строка.Выбран = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьВсеНаКлиенте(ТабличнаяЧасть)
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл 
		Строка.Выбран = Не Строка.Выбран;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВВыбранныеЗадачиНаКлиенте(МассивЗадач)
	
	МассивВыбранныхЗадач 	= ПолучитьМассивВыбранныхЗадачНаКлиенте();
	МассивРезультат			= ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивЗадач, МассивВыбранныхЗадач); 
	ПоследняяСтрока			= Неопределено;
	
	Для Каждого Задача Из МассивРезультат Цикл 
		
		НоваяСтрока 		= Объект.Задачи.Добавить();
		НоваяСтрока.Задача 	= Задача;
		
		ПоследняяСтрока 	= НоваяСтрока;
		
	КонецЦикла;
	
	Если ПоследняяСтрока <> Неопределено Тогда 
		Элементы.Задачи.ТекущаяСтрока = ПоследняяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыбранныеЗадачиНаКлиенте()
	
	Объект.Задачи.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоследовательностьЗадачНаКлиенте(Направление)
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	Если ТекущаяСтраница <> Неопределено Тогда 
		
		Значение					= ТекущаяСтраница.Имя;
		ЗначениеПоследовательности 	= ПоследовательностьСтраниц.НайтиПоЗначению(Значение);
		
		Если ЗначениеПоследовательности <> Неопределено Тогда 
			
			ТекущийИндекс 			= ПоследовательностьСтраниц.Индекс(ЗначениеПоследовательности);
			ИндексСледущейСтраницы 	= ТекущийИндекс + Направление;
			
			Если ИндексСледущейСтраницы >= 0
				И ИндексСледущейСтраницы <= ПоследовательностьСтраниц.Количество() - 1 Тогда 
				
				КлючЗначение = ПоследовательностьСтраниц[ИндексСледущейСтраницы];
				Элементы.Страницы.ТекущаяСтраница = Элементы[КлючЗначение.Значение];
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Направление = 1 Тогда 
		СтраницыПриСменеСтраницыНаКлиенте(ТекущаяСтраница);
	КонецЕсли;
	
	УстановитьДоступностьКнопокВпередНазадНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокВпередНазадНаКлиенте()
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	
	Если ТекущаяСтраница <> Неопределено Тогда 
		
		Значение					= ТекущаяСтраница.Имя;
		ЗначениеПоследовательности 	= ПоследовательностьСтраниц.НайтиПоЗначению(Значение);
		
		Если ЗначениеПоследовательности <> Неопределено Тогда 
			
			ТекущийИндекс 			= ПоследовательностьСтраниц.Индекс(ЗначениеПоследовательности);
			
			Если ТекущийИндекс = 0 Тогда 
				Элементы.ФормаНазад.Доступность = Ложь;	
			Иначе 
				Элементы.ФормаНазад.Доступность = Истина;	
			КонецЕсли;
			
			Если ТекущийИндекс = ПоследовательностьСтраниц.Количество() - 1 Тогда 
				Элементы.ФормаДалее.Доступность = Ложь;	
			Иначе 
				Элементы.ФормаДалее.Доступность = Истина;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницыНаКлиенте(ТекущаяСтраница)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если ТекущаяСтраница = Элементы.СтраницаОсновныеНастройки Тогда 
		
		Если Не ЗначениеЗаполнено(Объект.ДатаРелиза) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен реквизит ""Дата релиза""",, "ДатаРелиза", "Объект.ДатаРелиза", Отказ);
		КонецЕсли;		
		
		Если Не ЗначениеЗаполнено(Объект.ТипОбновления) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен реквизит ""Тип обновления""",, "ТипОбновления", "Объект.ТипОбновления", Отказ);
		КонецЕсли;
		
		Если (Объект.ВыгружатьКонфигурациюИзХранилища
			Или Объект.ВыгружатьФайлыНастроекОбъединения)
			И Не ЗначениеЗаполнено(Объект.ПутьВыгрузки) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан путь выгрузки",, "ПутьВыгрузки", "Объект.ПутьВыгрузки", Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКонфигурации Тогда 
		
		МассивВыбранныхКонфигураций = ПолучитьМассивВыбранныхКонфигураций();
		
		Если МассивВыбранныхКонфигураций.Количество() = 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбраны конфигурации",, "Конфигурации", "Объект.Конфигурации", Отказ);
		КонецЕсли;
		
		Если Не Отказ Тогда 
			ЗаполнитьОтборыЗадачНаСервере();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗадачи Тогда 
		
		Если Объект.Задачи.Количество() = 0 Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбраны задачи",, "Задачи", "Объект.Задачи", Отказ);
		КонецЕсли;
		
		ЗаполнитьТекстовыйДокументПодтверждениеНаКлиенте();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодтверждение Тогда 
		
		ПодключитьОбработчикОжидания("СформироватьДанныеНаКлиенте", 1, Истина);

	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРезультат Тогда 
		
	КонецЕсли;
	
	Если Отказ Тогда 
		ИзменитьПоследовательностьЗадачНаКлиенте(- 1);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстовыйДокументПодтверждениеНаКлиенте()
	
	Подтверждение = СформироватьТекстовыйДокументПодтверждениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьТекстовыйДокументПодтверждениеНаКлиенте()
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	//Основные настройки
	ТекстовыйДокумент.ДобавитьСтроку("Основные настройки");
	ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Дата релиза: %1", Формат(Объект.ДатаРелиза, "ДЛФ=D")));
	ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Тип обновления: %1", Объект.ТипОбновления));
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	//Конфигурации
	МассивВыбранныхКонфигураций = ПолучитьМассивВыбранныхКонфигураций();
	СтрокаКонфигурации			= ПолучитьСтрокуПоМассивуСтрок(МассивВыбранныхКонфигураций);
	
	ТекстовыйДокумент.ДобавитьСтроку("Выбранные конфигурации:");
	ТекстовыйДокумент.ДобавитьСтроку(СтрокаКонфигурации);
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	//Задачи
	МассивВыбранныхЗадач 	= ПолучитьМассивВыбранныхЗадачНаКлиенте();
	СтрокаЗадачи			= ПолучитьСтрокуПоМассивуЗадач(МассивВыбранныхЗадач);
	
	ТекстовыйДокумент.ДобавитьСтроку("Выбранные задачи:");
	ТекстовыйДокумент.ДобавитьСтроку(СтрокаЗадачи);
	ТекстовыйДокумент.ДобавитьСтроку("");
	
	//Выгрузка
	ТекстовыйДокумент.ДобавитьСтроку("Выгрузка");
	ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Выгружать конфигурацию из хранилища: %1", Объект.ВыгружатьКонфигурациюИзХранилища));
	ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Выгружать файлы настроек объединения: %1", Объект.ВыгружатьФайлыНастроекОбъединения));
	ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Путь выгрузки: %1", Объект.ПутьВыгрузки));
	
	Возврат ТекстовыйДокумент
	
КонецФункции

#КонецОбласти

#Область ФормированиеДанных

&НаКлиенте
Процедура СформироватьДанныеНаКлиенте()

	Отказ = Ложь;
	РезультатОбработки.Очистить();
	
	Данные = Новый Структура();
	Данные.Вставить("Задачи", ПолучитьМассивВыбранныхЗадачНаКлиенте());
	Данные.Вставить("Конфигурации", ПолучитьМассивВыбранныхКонфигураций());
	Данные.Вставить("ДатаРелиза", Объект.ДатаРелиза);	
	Данные.Вставить("ТипОбновления", Объект.ТипОбновления);
	Данные.Вставить("СоответствиеЗадач", ПолучитьСоответствиеЗадачНаСервереБезКонтекста(Данные.Задачи, Данные.Конфигурации));
	Данные.Вставить("СоответствиеВыпусков", Новый Соответствие);
	Данные.Вставить("Путь", Объект.ПутьВыгрузки);
	
	//Получим актуальные данные из хранилища
	ОбновитьАктуальныеДанныеИзХранилищаНаКлиенте(Отказ);
	
	//Сформируем документы "узВыпускРелиза"
	Если Не Отказ Тогда 
		СформироватьДокументыВыпускаНаКлиенте(Данные, Отказ);
	КонецЕсли;
	
	//Подготовим структуру каталогов
	ВыгружатьДанные = Объект.ВыгружатьКонфигурациюИзХранилища 
						Или Объект.ВыгружатьФайлыНастроекОбъединения;
						
	Если Не Отказ
		И ВыгружатьДанные Тогда 
		ПодготовитьСтруктуруКаталоговНаКлиенте(Данные, Отказ);	
	КонецЕсли;
	
	//Выгрузим конфигурации
	Если Не Отказ
		И Объект.ВыгружатьКонфигурациюИзХранилища Тогда 
		ВыгрузитьКонфигурацииНаКлиенте(Данные, Отказ);
	КонецЕсли;
	
	//Выгрузим файлы настройки объединения
	Если Не Отказ
		И Объект.ВыгружатьФайлыНастроекОбъединения Тогда 
		ВыгрузитьФайлыНастроекОбъединенияНаКлиенте(Данные, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда 
		
		УдалитьДокументыВыпускаНаСервереБезКонтекста(Данные);
		
		ДобавитьСообщениеВРезультат("Формирование данных остановлено");	
		
	Иначе 
		ДобавитьСообщениеВРезультат("Формирование данных выполнено");	
	КонецЕсли;
	
КонецПроцедуры

#Область Хранилище	

&НаКлиенте
Процедура ОбновитьАктуальныеДанныеИзХранилищаНаКлиенте(Отказ)
	
	ДобавитьСообщениеВРезультат("Выполняем актуализацию данных из хранилища");
	
	МассивКонфигураций 	= ПолучитьМассивВыбранныхКонфигураций();
	ДанныеКонфигураций	= ЗначенияРеквизитовОбъектовНаСервереБезКонтекста(МассивКонфигураций, "ПолучатьИзмененияИзХранилища");
	
	Для Каждого Конфигурация Из МассивКонфигураций Цикл 
		
		ПолучатьИзмененияИзХранилища = ДанныеКонфигураций[Конфигурация].ПолучатьИзмененияИзХранилища;
		
		Если ПолучатьИзмененияИзХранилища и Не Отказ Тогда 
			ОбновитьАктуальныеДанныеИзХранилищаПоКонфигурацииНаКлиенте(Конфигурация, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАктуальныеДанныеИзХранилищаПоКонфигурацииНаКлиенте(Конфигурация, Отказ)
	
	РезультатФункции = ОбновитьАктуальныеДанныеИзХранилищаПоКонфигурацииНаСервереБезКонтекста(Конфигурация, Отказ);
	ДобавитьСообщениеВРезультат(СтрШаблон("%1 - %2", Конфигурация, РезультатФункции.Сообщение));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьАктуальныеДанныеИзХранилищаПоКонфигурацииНаСервереБезКонтекста(Конфигурация, Отказ)
	
	РезультатФункции = Новый Структура;
	
	Попытка
		
		пОбработка 				= Обработки.узЗагрузкаИзмененийИзХранилища.Создать();
		пОбработка.Конфигурация = Конфигурация;
		пОбработка.ВерсияС 		= Справочники.узИсторияКонфигураций.ПолучитьПоследнююЗагруженнуюВерсию(Конфигурация);
		
		РезультатФункции 		= пОбработка.ЗагрузитьИзмененияИзХранилища();
		РезультатФункции.Вставить("Сообщение", "Синхронизация хранилища успешно завершена");
		
	Исключение
		
		Отказ = Истина;
		РезультатФункции.Вставить("Сообщение", СтрШаблон("Синхронизация хранилища выполнена с ошибкой %1%2", Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки;
	
	Возврат РезультатФункции
	
КонецФункции

#КонецОбласти

#Область ВыпускРелиза	

&НаКлиенте
Процедура СформироватьДокументыВыпускаНаКлиенте(Данные, Отказ)
	
	ДобавитьСообщениеВРезультат("Выполняем формирование документов ""Выпуск релизов""");
		
	ПроверитьВозможностьГенерацииВыпусковРелизовНаКлиенте(Данные, Отказ);
	
	Если Не Отказ Тогда 
		
		Для Каждого ЭлементСоответствия Из Данные.СоответствиеЗадач Цикл 
			Если Не Отказ Тогда //если на след. документе выпало исключение
				СформироватьДокументВыпускаПоКонфигурацииНаКлиенте(ЭлементСоответствия.Ключ, Данные, Отказ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьГенерацииВыпусковРелизовНаКлиенте(Данные, Отказ)
	
	//проверим есть ли задачи
	Если Данные.СоответствиеЗадач.Количество() = 0 Тогда 
		
		Отказ 		= Истина;
		
		ДобавитьСообщениеВРезультат("Не найдено задач по выбранным конфигурациям");
		
	КонецЕсли;
	
	//проверим задачи с пустой конфигурацией
	МассивЗадачСПустойКонфигурацией = Данные.СоответствиеЗадач[ПредопределенноеЗначение("Справочник.узКонфигурации.ПустаяСсылка")];
	
	Если МассивЗадачСПустойКонфигурацией <> Неопределено Тогда 
		
		Отказ 		= Истина;
		Сообщение 	= СтрШаблон("Найдены задачи без конфигурации: %1%2", Символы.ПС, ПолучитьСтрокуПоМассивуЗадач(МассивЗадачСПустойКонфигурацией));
		
		ДобавитьСообщениеВРезультат(Сообщение);
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументВыпускаПоКонфигурацииНаКлиенте(Конфигурация, Данные, Отказ)
	
	ТекстОшибки		= "";
	ДокументВыпуска = СформироватьДокументВыпускаПоКонфигурацииНаСервереБезКонтекста(Конфигурация, Данные, ТекстОшибки, Отказ);
	
	Если Отказ Тогда 
		ДобавитьСообщениеВРезультат(ТекстОшибки);
	Иначе 
		
		Если Данные.Свойство("СоответствиеВыпусков") = Неопределено Тогда 
			Данные.Вставить("СоответствиеВыпусков", Новый Соответствие);
		КонецЕсли;
		
		Данные.СоответствиеВыпусков[Конфигурация] = ДокументВыпуска;
		
		ДобавитьСообщениеВРезультат(СтрШаблон("Сформирован документ - %1", ДокументВыпуска));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДокументВыпускаПоКонфигурацииНаСервереБезКонтекста(Конфигурация, Данные, ТекстОшибки, Отказ)
	
	МассивЗадач 	= Данные.СоответствиеЗадач[Конфигурация];
	ТипОбновления	= ?(Данные.ТипОбновления = "Обновление", "О", "ПО"); 
	НомерРелиза		= СтрШаблон("%1_%2", ТипОбновления, Формат(Данные.ДатаРелиза, "ДФ=yy_MM_dd"));
	
	ДокументСсылка	= Документы.узВыпускРелиза.ПустаяСсылка();
	ДокументОбъект	= Документы.узВыпускРелиза.СоздатьДокумент();
	ДокументОбъект.Заполнить(Неопределено);
	
	//Шапка
	ДокументОбъект.Дата 			= ТекущаяДатаСеанса();
	ДокументОбъект.НомерРелиза 		= НомерРелиза;
	ДокументОбъект.ОписаниеРелиза   = НомерРелиза;
	ДокументОбъект.Конфигурация		= Конфигурация;
	
	//ТЧЗадачи
	Для Каждого Задача Из МассивЗадач Цикл 
		
		НоваяСтрока 		= ДокументОбъект.ТЧЗадачи.Добавить();
		НоваяСтрока.Задача 	= Задача;
		
	КонецЦикла;
	
	//ИсторияХранилища
	ЗаполнитьИсториюХранилищаДокументаВыпускаСервереБезКонтекста(ДокументОбъект);
	
	//ИзмененныеОбъекты
	ЗаполнитьИзмененныеОбъектыДокументаВыпускаСервереБезКонтекста(ДокументОбъект);
	
	Попытка
		
		ДокументОбъект.Записать();
		
		ДокументСсылка = ДокументОбъект.Ссылка;
		
	Исключение
		
		Отказ		= Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		
	КонецПопытки;
	
	Возврат ДокументСсылка
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьИсториюХранилищаДокументаВыпускаСервереБезКонтекста(ДокументОбъект)
	
	МассивЗадач = ДокументОбъект.ТЧЗадачи.Выгрузить(,"Задача");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узИсторияКонфигураций.Ссылка КАК Ссылка,
	|	узИсторияКонфигураций.Задача КАК Задача
	|ИЗ
	|	Справочник.узИсторияКонфигураций КАК узИсторияКонфигураций
	|ГДЕ
	|	узИсторияКонфигураций.Задача В(&МассивЗадач)
	|	И (узИсторияКонфигураций.Владелец = &Конфигурация
	|		ИЛИ узИсторияКонфигураций.Владелец.РасширениеДляКонфигурации = &Конфигурация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	узИсторияКонфигураций.ДатаВерсии";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	Запрос.УстановитьПараметр("Конфигурация", ДокументОбъект.Конфигурация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаИсторияХранилища = ДокументОбъект.ИсторияХранилища.Добавить();
			СтрокаИсторияХранилища.Пометка = Истина;
			СтрокаИсторияХранилища.ЗаписьИсторииХранилища = Выборка.Ссылка;
			СтрокаИсторияХранилища.Задача = Выборка.Задача;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьИзмененныеОбъектыДокументаВыпускаСервереБезКонтекста(ДокументОбъект)
	
	МассивЗаписейИсторииХранилища = ДокументОбъект.ИсторияХранилища.Выгрузить(, "ЗаписьИсторииХранилища").ВыгрузитьКолонку("ЗаписьИсторииХранилища");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	узИсторияКонфигурацийИзмененныеОбъекты.ИдентификаторОбъектаМетаданных,
	|	узИсторияКонфигурацийИзмененныеОбъекты.Ссылка.Задача КАК Задача
	|ИЗ
	|	Справочник.узИсторияКонфигураций.ИзмененныеОбъекты КАК узИсторияКонфигурацийИзмененныеОбъекты
	|ГДЕ
	|	узИсторияКонфигурацийИзмененныеОбъекты.Ссылка В(&МассивЗаписейИсторииХранилища)
	|
	|УПОРЯДОЧИТЬ ПО
	|	узИсторияКонфигурацийИзмененныеОбъекты.ИдентификаторОбъектаМетаданных.Наименование";
	
	Запрос.УстановитьПараметр("МассивЗаписейИсторииХранилища", МассивЗаписейИсторииХранилища);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаИзмененныеОбъекты 								= ДокументОбъект.ИзмененныеОбъекты.Добавить();
			СтрокаИзмененныеОбъекты.Задача 							= Выборка.Задача;
			СтрокаИзмененныеОбъекты.ИдентификаторОбъектаМетаданных 	= Выборка.ИдентификаторОбъектаМетаданных;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьПорядокДляПолноеИмяМетаданных(пПолноеИмяМетаданных)
	
	пПорядок = "999_";
	
	НомерПорядка = 1;
	
	Если Найти(пПолноеИмяМетаданных,".") = 0 Тогда
		пПорядок = "001_";
	ИначеЕсли Найти(Лев(пПолноеИмяМетаданных,5),"Общие") > 0 Тогда
		пПорядок = "002_";
	ИначеЕсли Найти(пПолноеИмяМетаданных,"Константа") > 0 Тогда
		пПорядок = "003_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"Справочник") > 0 Тогда
		пПорядок = "004_";
	ИначеЕсли Найти(пПолноеИмяМетаданных,"Документ") > 0 Тогда
		пПорядок = "005_";
	ИначеЕсли Найти(пПолноеИмяМетаданных,"ЖурналДокументов") > 0 Тогда
		пПорядок = "006_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"Перечисление") > 0 Тогда
		пПорядок = "007_";
	ИначеЕсли Найти(пПолноеИмяМетаданных,"Отчет") > 0 Тогда
		пПорядок = "008_";
	ИначеЕсли Найти(пПолноеИмяМетаданных,"Обработка") > 0 Тогда
		пПорядок = "009_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"ПланВидовХарактеристик") > 0 Тогда
		пПорядок = "010_";
	ИначеЕсли Найти(пПолноеИмяМетаданных,"ПланСчетов") > 0 Тогда
		пПорядок = "011_";
	ИначеЕсли Найти(пПолноеИмяМетаданных,"ПланВидовРасчета") > 0 Тогда
		пПорядок = "012_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"РегистрСведений") > 0 Тогда
		пПорядок = "013_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"РегистрНакопления") > 0 Тогда
		пПорядок = "014_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"РегистрБухгалтерии") > 0 Тогда
		пПорядок = "015_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"РегистрРасчета") > 0 Тогда
		пПорядок = "016_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"БизнесПроцесс") > 0 Тогда
		пПорядок = "017_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"Задача") > 0 Тогда
		пПорядок = "018_";		
	ИначеЕсли Найти(пПолноеИмяМетаданных,"ВнешнийИсточникДанных") > 0 Тогда
		пПорядок = "019_";				
	Конецесли;
	
	Возврат пПорядок;
КонецФункции 

&НаСервереБезКонтекста
Процедура УдалитьДокументыВыпускаНаСервереБезКонтекста(Данные)
	
	Для Каждого ЭлементСоответствия Из Данные.СоответствиеВыпусков Цикл 
		
		ДокументСсылка = ЭлементСоответствия.Значение;
		
		Если Не ДокументСсылка.Пустая() Тогда 
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузкаФайлов	

&НаКлиенте
//Структура каталога
//[ИмяКонфигруация]
//	[Год_Месяц_День]
//		[НомерРелиза.cf]
//		[MergeSetting.xml] - ВыгружатьФайлыНастроекОбъединенияНаКлиенте()
Процедура ПодготовитьСтруктуруКаталоговНаКлиенте(Данные, Отказ)
	
	ДобавитьСообщениеВРезультат("Подготовим каталоги для выгрузки");	
	
	//создадим папки конфигураций
	Для Каждого Конфигурация Из Данные.Конфигурации Цикл 
		
		Если Не Отказ Тогда 
			
			Имя 		= "" + Конфигурация;
			ПолныйПуть 	= СтрШаблон("%1\%2", Данные.Путь, Имя);
			Каталог		= Новый Файл(ПолныйПуть);
			
			Если Не Каталог.Существует() Тогда 
				СоздатьКаталогНаКлиенте(ПолныйПуть, Отказ);
			КонецЕсли;
			
			//создадим по дате
			Если Не Отказ Тогда 
				
				Имя 		= Формат(Данные.ДатаРелиза, "ДФ=yy_MM_dd");
				ПолныйПуть 	= СтрШаблон("%1\%2", ПолныйПуть, Имя);
				Каталог		= Новый Файл(ПолныйПуть);
				
				Если Не Каталог.Существует() Тогда 
					СоздатьКаталогНаКлиенте(ПолныйПуть, Отказ);
				КонецЕсли;
			КонецЕсли; 		
		КонецЕсли; 		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогНаКлиенте(Имя, Отказ)
	
	Попытка
		СоздатьКаталог(Имя);
	Исключение
		
		Отказ 		= Истина;
		Сообщение 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ДобавитьСообщениеВРезультат(СтрШаблон("При формирование каталогов возникла ошибка: %1%2", Символы.ПС, Сообщение));	
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлыНастроекОбъединенияНаКлиенте(Данные, Отказ)
	
	ДобавитьСообщениеВРезультат("Выполняем формирование файлов настроек объединения");
	
	Для Каждого Конфигурация Из Данные.Конфигурации Цикл
		
		Если Не Отказ Тогда 
			
			Дата 			= Формат(Данные.ДатаРелиза, "ДФ=yy_MM_dd");
			ИмяФайла		= СтрШаблон("%1_MergeSettings", Дата);
			ИмяКонфигурации	= "" + Конфигурация;
			ПутьФайла 		= СтрШаблон("%1\%2\%3\%4.xml", Данные.Путь, ИмяКонфигурации, Дата, ИмяФайла);
						
			//Файл настроек
			ДокументВыпуска	= Данные.СоответствиеВыпусков[Конфигурация];
			Результат		= СформироватьФайлНаСервереБезКонтекста(ДокументВыпуска);
			
			Если Результат <> Неопределено Тогда 
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(Результат);
				
				Если ДвоичныеДанные <> Неопределено Тогда 
					
					ДвоичныеДанные.Записать(ПутьФайла);	
					ДобавитьСообщениеВРезультат(СтрШаблон("Сформирован файл настроек для конфигурации: %1", Конфигурация));
					
				Иначе 
					ДобавитьСообщениеВРезультат(СтрШаблон("Не удалось сформировать файл настроек для конфигурации: %1", Конфигурация));
				КонецЕсли;	
			Иначе 
				ДобавитьСообщениеВРезультат(СтрШаблон("Не удалось сформировать файл настроек для конфигурации: %1", Конфигурация));
			КонецЕсли;		
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьФайлНаСервереБезКонтекста(Источник)
	
	Данные			= Обработки.Ар_СозданиеФайлаНастроекОбъединения.ИнициализироватьСтруктуруДанных();
	Данные.Источник	= Источник;
	
	Результат		= Обработки.Ар_СозданиеФайлаНастроекОбъединения.СформироватьФайлНастроекПоДанным(Данные);
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаКонфигураций	

&НаКлиенте
Процедура ВыгрузитьКонфигурацииНаКлиенте(Данные, Отказ)
	
	ДобавитьСообщениеВРезультат("Выполняем выгрузку файлов конфигураций");
		
	Для Каждого Конфигурация Из Данные.Конфигурации Цикл
		
		ОтказКонфигурация	= Ложь;
		
		Если Не Отказ Тогда 
			
			Дата 				= Формат(Данные.ДатаРелиза, "ДФ=yy_MM_dd");
			ИмяФайла			= СтрШаблон("%1_обновление", Дата);
			ИмяКонфигурации		= "" + Конфигурация;
			ПутьФайла 			= СтрШаблон("%1\%2\%3\%4.cf", Данные.Путь, ИмяКонфигурации, Дата, ИмяФайла);
			
			ДанныеКоманды 				= Ар_РаботаСКоманднойСтрокойВызовСервера.ПолучитьСтруктуруДанныхПоКонфигурации(Конфигурация);
			ДанныеКоманды.Путь 			= Данные.Путь; 
			ДанныеКоманды.ПутьФайла 	= ПутьФайла; 
			
			Ар_РаботаСКоманднойСтрокойКлиентСервер.ВыгрузитьКонфигурациюВФайл(ДанныеКоманды, ОтказКонфигурация);
			
			Если Не ОтказКонфигурация Тогда 
				ДобавитьСообщениеВРезультат(СтрШаблон("Выгружена конфигурация: %1", ИмяКонфигурации));
			Иначе 
				
				Отказ = Истина;
				
				ДобавитьСообщениеВРезультат(СтрШаблон("Не удалось выгрузить конфигурацию: %1", ИмяКонфигурации));
				
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Общее	

&НаКлиенте
Функция ПолучитьМассивВыбранныхЗадачНаКлиенте()
	
	Массив = Новый Массив;
	
	Для Каждого СтрокаЗадача Из Объект.Задачи Цикл 
		Массив.Добавить(СтрокаЗадача.Задача);		
	КонецЦикла;
	
	Возврат Массив
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивВыбранныхКонфигураций()
	
	Массив = Новый Массив;
	
	Для Каждого Строка Из Объект.Конфигурации Цикл 
		Если Строка.Выбран Тогда 
			Массив.Добавить(Строка.Конфигурация);		
		КонецЕсли;
	КонецЦикла;
	
	Возврат Массив
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивКонфигурацийНаСервереБезКонтекста()
	
	Массив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	узКонфигурации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.узКонфигурации КАК узКонфигурации
		|ГДЕ
		|	НЕ узКонфигурации.ПометкаУдаления
		|	И узКонфигурации.ПолучатьИзмененияИзХранилища";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Массив.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Массив
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокТипыОбновления()
	
	Список = Новый СписокЗначений;
	Список.Добавить("Обновление", "Обновление");
	Список.Добавить("ПромежуточноеОбновление", "Промежуточное обновление");
	
	Возврат Список
	
КонецФункции

&НаСервереБезКонтекста
Процедура СкопироватьСписокЗначений(Источник, Приемник)
	
	Приемник.Очистить();
	
	Для Каждого Строка Из Источник Цикл 
		Приемник.Добавить(Строка.Значение, Строка.Представление);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораКаталогаНаКлиенте(ИмяРеквизита)
	
	ДиалогВыбораФайла 						= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Заголовок 			= НСтр("Выберите каталог сохранения данных");
	ДиалогВыбораФайла.МножественныйВыбор 	= Ложь;
	
	Оповещение 								= Новый ОписаниеОповещения("ДиалогВыбораКаталогаЗавершениеНаКлиенте", ЭтотОбъект, ИмяРеквизита);
	ДиалогВыбораФайла.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ДиалогВыбораКаталогаЗавершениеНаКлиенте(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйКаталог <> Неопределено Тогда 
		Объект[ДополнительныеПараметры]	 = ВыбранныйКаталог[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуПоМассивуСтрок(Массив)
	
	Результат 	= "";
	Счетчик		= 0;
	
	Для Каждого Строка Из Массив Цикл 
		
		Если Счетчик = 0 Тогда 
			Результат = СтрШаблон("%1* %2", Результат, Строка);
		Иначе 
			Результат = СтрШаблон("%1%2* %3", Результат, Символы.ПС, Строка);
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуПоМассивуЗадач(Массив)
	
	Результат 	= "";
	ДанныеЗадач = ЗначенияРеквизитовОбъектовНаСервереБезКонтекста(Массив, "Код, Наименование");
	Счетчик		= 0;
	
	Для Каждого Задача Из Массив Цикл 
		
		Если Счетчик = 0 Тогда 
			Результат = СтрШаблон("%1* #%2 - %3", 
						Результат, 
						Формат(ДанныеЗадач[Задача].Код, "ЧГ=0"), 
						ДанныеЗадач[Задача].Наименование);
		Иначе 
			Результат = СтрШаблон("%1%2* #%3 - %4", 
						Результат, 
						Символы.ПС, 
						Формат(ДанныеЗадач[Задача].Код, "ЧГ=0"), 
						ДанныеЗадач[Задача].Наименование);
		КонецЕсли;
							
		Счетчик = Счетчик + 1;
					
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъектовНаСервереБезКонтекста(Массив, Реквизиты)
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Массив, Реквизиты);
КонецФункции

&НаКлиенте
Процедура ДобавитьСообщениеВРезультат(Сообщение)
	
	РезультатОбработки.ДобавитьСтроку(СтрШаблон("%1: %2", ТекущаяДата(), Сообщение));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеЗадачНаСервереБезКонтекста(МассивЗадач, МассивКонфигураций)
	
	Соответствие = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	узЗадачи.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Задачи
		|ИЗ
		|	Справочник.узЗадачи КАК узЗадачи
		|ГДЕ
		|	узЗадачи.Ссылка В(&МассивЗадач)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА узИсторияКонфигурацийИзмененныеОбъекты.ИдентификаторОбъектаМетаданных.Владелец ЕСТЬ NULL
		|			ТОГДА ВТ_Задачи.Ссылка.Конфигурация
		|		ИНАЧЕ узИсторияКонфигурацийИзмененныеОбъекты.ИдентификаторОбъектаМетаданных.Владелец
		|	КОНЕЦ КАК Конфигурация,
		|	ВТ_Задачи.Ссылка КАК Задача
		|ИЗ
		|	ВТ_Задачи КАК ВТ_Задачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.узИсторияКонфигураций.ИзмененныеОбъекты КАК узИсторияКонфигурацийИзмененныеОбъекты
		|		ПО ВТ_Задачи.Ссылка = узИсторияКонфигурацийИзмененныеОбъекты.Ссылка.Задача
		|ГДЕ
		|	ВЫБОР
		|		КОГДА узИсторияКонфигурацийИзмененныеОбъекты.ИдентификаторОбъектаМетаданных.Владелец ЕСТЬ NULL
		|			ТОГДА ВТ_Задачи.Ссылка.Конфигурация
		|		ИНАЧЕ узИсторияКонфигурацийИзмененныеОбъекты.ИдентификаторОбъектаМетаданных.Владелец
		|	КОНЕЦ В (&МассивКонфигураций)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Задачи.Ссылка,
		|	ВЫБОР
		|		КОГДА узИсторияКонфигурацийИзмененныеОбъекты.ИдентификаторОбъектаМетаданных.Владелец ЕСТЬ NULL
		|			ТОГДА ВТ_Задачи.Ссылка.Конфигурация
		|		ИНАЧЕ узИсторияКонфигурацийИзмененныеОбъекты.ИдентификаторОбъектаМетаданных.Владелец
		|	КОНЕЦ
		|ИТОГИ ПО
		|	Конфигурация";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	Запрос.УстановитьПараметр("МассивКонфигураций", МассивКонфигураций);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКонфигурация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКонфигурация.Следующий() Цикл
		
		МассивПоКонфигурации = Новый Массив;
		
		ВыборкаДетальныеЗаписи = ВыборкаКонфигурация.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивПоКонфигурации.Добавить(ВыборкаДетальныеЗаписи.Задача);
		КонецЦикла;
		
		Соответствие[ВыборкаКонфигурация.Конфигурация] = МассивПоКонфигурации;
		
	КонецЦикла;	
	
	Возврат Соответствие
	
КонецФункции

#КонецОбласти

