
&НаСервере
Процедура тт_ПриЗагрузкеДанныхИзНастроекНаСервереПосле(Настройки)
	
	ПериодичностьПланировщика = Настройки.Получить("ПериодичностьПланировщика");
	Если Не ЗначениеЗаполнено(ПериодичностьПланировщика) Тогда
		ПериодичностьПланировщика = Перечисления.тт_ПериодичностьКалендаря.День;
	КонецЕсли;
	НастройкиОтображения.ПериодОтображения = ПериодичностьПланировщика;
	Исполнители = Настройки.Получить("Исполнители");
	ТолькоРабочееВремя = Настройки.Получить("ТолькоРабочееВремя");
	ОтображатьОтмененные = Настройки.Получить("ОтображатьОтмененные");
	НеОтображатьЗавершенные = Настройки.Получить("НеОтображатьЗавершенные");
	ПоложениеШкалы = Настройки.Получить("ПоложениеШкалы");
	ОбновитьПланировщикНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	
	УстановитьОтображаемуюДату(НачалоДня(ТекущаяДата()));
	ОбновитьПланировщик();

КонецПроцедуры

&НаКлиенте
Процедура КалендарьВперед(Команда)
	УстановитьОтображаемуюДату(
		НастройкаПланировщикаКлиентСервер.ПолучитьДатуНачалаСледующегоПериода(
			ПериодичностьПланировщика, ОтображаемаяДата));
	
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображаемуюДату(НоваяОтображаемаяДата)
	
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Очистить();
	ОтображаемаяДата = НоваяОтображаемаяДата;
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Добавить(ОтображаемаяДата);
	ВыделенныеДаты.ЗагрузитьЗначения(Элементы.ОтображаемаяДата.ВыделенныеДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьНазад(Команда)
	УстановитьОтображаемуюДату(
		НастройкаПланировщикаКлиентСервер.ПолучитьДатуНачалаПредыдущегоПериода(
			ПериодичностьПланировщика, ОтображаемаяДата));
	
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПланировщикаПриИзменении(Элемент)
	УстановитьОтображаемуюДату(ОтображаемаяДата);
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРабочееВремяПриИзменении(Элемент)
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмененныеПриИзменении(Элемент)
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриИзменении(Элемент)
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Для Каждого ЭлементПланировщика Из Элементы.Планировщик.ВыделенныеЭлементы Цикл
		ОткрытьФорму("Справочник.тт_ЭлементыРасписания.ФормаОбъекта",Новый Структура("Ключ",ЭлементПланировщика.Значение.Ссылка),,,,
		,Новый ОписаниеОповещения("ПриЗакрытииСвязаннойФормыПланировщика",ЭтаФорма,Новый Структура));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		Задача = ПараметрыПеретаскивания.Значение[0].Задача;
		выбИсполнитель = Значения.Получить("Исполнители");
		ПланировщикПеретаскиваниеНаСервере(Задача, Дата, выбИсполнитель);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПланировщикПеретаскиваниеНаСервере(Задача, Дата, выбИсполнитель)
	ДатаЗадачи = ск_ОбщегоНазначенияКлиентСервер.ОкруглитьДату(Дата, 3600);
	Спр = Справочники.тт_ЭлементыРасписания.СоздатьЭлемент();
	Спр.Заполнить(Задача);
	Спр.ДатаНачалаПлан = ДатаЗадачи;
	Спр.ДатаОкончанияПлан = ДатаЗадачи + 3600;
	Если Не ЗначениеЗаполнено(Спр.Исполнитель) Тогда
		Зад = Задача.ПолучитьОбъект();
		Зад.Исполнитель = выбИсполнитель;
		Зад.Записать();
		Спр.Исполнитель = выбИсполнитель;
	КонецЕсли;
	Спр.Спринт = Справочники.узСпринты.ПолучитьТекущийСпринтДляЗадачи(ДатаЗадачи, Задача);
	Если НЕ ЗначениеЗаполнено(Спр.Спринт) Тогда
		АктивныеСпринты = Справочники.узСпринты.ПолучитьСпринтКоторыйНеЗавершен();
		Спр.Спринт = АктивныеСпринты.Спринт;
	КонецЕсли;
	Спр.Записать();
	ОбновитьПланировщикНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланировщик()
	ОтключитьОбработчикОжидания("ОбработчикОжиданияТаймер");
	ОбновитьПланировщикНаСервере();
	ПодключитьОбработчикОжидания("ОбработчикОжиданияТаймер",60,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияТаймер()
	//ToDo: Тут со временем появится счетчик отработанного времени, которы будет обновляться чаще чем планировщик.
	Если ТекущаяДата() - МоментОбновленияПланировщика >= 60 Тогда
		ОбновитьПланировщикНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПланировщикНаСервере()
	ОбновитьНастройкиОтображения();
	МоментОбновленияПланировщика = ТекущаяДата();
	НастройкаПланировщикаСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтображения()
	
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты = Элементы.ОтображаемаяДата.ВыделенныеДаты; //ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения = ПериодичностьПланировщика;
	НастройкиОтображения.ОтображатьОтмененные = ОтображатьОтмененные;
	НастройкиОтображения.Исполнители = Исполнители;
	НастройкиОтображения.ПоложениеШкалы = ПоложениеШкалы;
	ПриИзмененииРабочегоВремени(НастройкиОтображения, ТолькоРабочееВремя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииРабочегоВремени(Настройки, НовоеЗначение)
	//ToDo: Вынести в константы
	Если НовоеЗначение = Истина Тогда
		Настройки.РабочиеДниНедели = "Пн,Вт,Ср,Чт,Пт";
		Настройки.ОтображатьВремяС = 8;
		Настройки.ОтображатьВремяПо = 20;
	Иначе
		Настройки.РабочиеДниНедели = "Пн,Вт,Ср,Чт,Пт,Сб,Вс";
		Настройки.ОтображатьВремяС = 0;
		Настройки.ОтображатьВремяПо = 24;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	масСобытияПланировщика = Новый Массив;
	Для Каждого ЭлементПланировщика Из Элементы.Планировщик.ВыделенныеЭлементы Цикл
		Событие = ЭлементПланировщика.Значение;
		// Факт в планировщике не редактируем. Пока доступно в карточке элемента расписания
		Если Событие.Состояние <> "План" 
			И Событие.Состояние <> "Текущий" Тогда
			Продолжить;
		КонецЕсли;
		Событие.ДатаНачалаПлан = ЭлементПланировщика.Начало;
		Событие.ДатаОкончанияПлан = ЭлементПланировщика.Конец;
		масСобытияПланировщика.Добавить(Событие);
	КонецЦикла;
	
	СтруктураДействий = Новый Структура("ИзменитьВремя",Истина);
	ВыполнитьФоновуюСинхронизациюЗадач(масСобытияПланировщика, СтруктураДействий);
	ОбновитьПланировщик();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьФоновуюСинхронизациюЗадач(Знач масСобытияПланировщика, СтруктураДействий)
	
	Для Каждого ЭлементПланировщика Из масСобытияПланировщика Цикл
		Если СтруктураДействий.Свойство("ИзменитьВремя") Тогда
			ЭлементРасписания = ЭлементПланировщика.Ссылка.ПолучитьОбъект();
			ЭлементРасписания.ДатаНачалаПлан    = ЭлементПланировщика.ДатаНачалаПлан;
			ЭлементРасписания.ДатаОкончанияПлан = ЭлементПланировщика.ДатаОкончанияПлан;
			ЭлементРасписания.Записать();
		ИначеЕсли СтруктураДействий.Свойство("Удалить") Тогда
			ЭлементРасписания = ЭлементПланировщика.Ссылка.ПолучитьОбъект();
			ЭлементРасписания.УстановитьПометкуУдаления(НЕ ЭлементРасписания.ПометкаУдаления);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Для Каждого ЭлементПланировщика Из Элементы.Планировщик.ВыделенныеЭлементы Цикл
			ОткрытьФорму("Справочник.тт_ЭлементыРасписания.ФормаОбъекта",Новый Структура("Ключ",ЭлементПланировщика.Значение.Ссылка),,,,
			,Новый ОписаниеОповещения("ПриЗакрытииСвязаннойФормыПланировщика",ЭтаФорма,Новый Структура));
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ПриЗакрытииСвязаннойФормыПланировщика(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	масСобытияПланировщика = Новый Массив;
	Для Каждого ЭлементПланировщика Из Элементы.Планировщик.ВыделенныеЭлементы Цикл
		Событие = ЭлементПланировщика.Значение;
		Событие.ДатаНачалаПлан     = ЭлементПланировщика.Начало;
		Событие.ДатаОкончанияПлан  = ЭлементПланировщика.Конец;
		масСобытияПланировщика.Добавить(Событие);
	КонецЦикла;
	СтруктураДействий = Новый Структура("Удалить",Истина);
	ВыполнитьФоновуюСинхронизациюЗадач(масСобытияПланировщика, СтруктураДействий);
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаСервере
Процедура тт_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	Элементы.Расписание.Пометка = Истина;
	ОтображаемаяДата = НачалоДня(ТекущаяДата());
	НастройкиОтображения = НастройкаПланировщикаСервер.СформироватьНастройкиОтображения();
	НастройкиОтображения.ОтображаемаяДата = ОтображаемаяДата;
	НастройкиОтображения.РазмерЯчейкиВремени = 15;
	Если Не ЗначениеЗаполнено(ПериодичностьПланировщика) Тогда
		ПериодичностьПланировщика = Перечисления.тт_ПериодичностьКалендаря.День;
	КонецЕсли;
	НастройкиОтображения.ПериодОтображения = ПериодичностьПланировщика;
	//ToDo: Что-то где-то сломалось. Выделенные даты не формируются как задумано.
	// Выделенные даты
	ВыделенныеДаты.Добавить(НастройкиОтображения.ОтображаемаяДата);
	НастройкиОтображения.ВыделенныеДаты = ВыделенныеДаты.ВыгрузитьЗначения();
	ПоложениеШкалы = ПоложениеШкалыВремени.Верх;
	
КонецПроцедуры


&НаКлиенте
&После("ТЧЗадачиПроверкаПеретаскивания")
Процедура тт_ТЧЗадачиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.КопированиеИПеремещение;
КонецПроцедуры


&НаКлиенте
Процедура тт_ИсполнителиПриИзмененииПосле(Элемент)
	НастройкиОтображения.Исполнители = Исполнители;
	ОбновитьПланировщик();
КонецПроцедуры


&НаКлиенте
Процедура тт_ПоложениеШкалыВремениПриИзмененииПосле(Элемент)
	НастройкиОтображения.ПоложениеШкалы = ПоложениеШкалы;
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура тт_ПланировщикНажатиеНаДействиеПланировщикаПосле(Элемент, ЭлементПланировщика, Действие)
	Если ЭлементПланировщика.Значение.Исполнитель <> ПользователиКлиентСервер.АвторизованныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	Обновляем = Ложь;
	Если Действие.Значение = "Стоп" Тогда
		ПоказатьЗначение(,ЭлементПланировщика.Значение.Ссылка);
	Иначе
		Обновляем = ОбработатьКомандуЭлементаПланировщика(ЭлементПланировщика.Значение, Действие.Значение);
	КонецЕсли;
	Если Обновляем Тогда
		ОбновитьПланировщик();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьКомандуЭлементаПланировщика(ЭлементРасписанияЗначение, Действие)
	Обновляем = Ложь;
	ЭлементРасписанияСсылка = ЭлементРасписанияЗначение.Ссылка;
	Если Действие = "Старт" Тогда
		БылаПауза = Справочники.тт_ЭлементыРасписания.ПаузаРаботы(Пользователи.АвторизованныйПользователь());
		Обновляем = Справочники.тт_ЭлементыРасписания.СтартРаботы(ЭлементРасписанияСсылка);
		Обновляем = Обновляем ИЛИ БылаПауза;
	ИначеЕсли Действие = "Пауза" Тогда
		Справочники.тт_ЭлементыРасписания.ПаузаРаботы(Пользователи.АвторизованныйПользователь());
		Обновляем = Истина;
	ИначеЕсли Действие = "СнятьПометку" Тогда
		Спр = ЭлементРасписанияСсылка.ПолучитьОбъект();
		Спр.УстановитьПометкуУдаления(Ложь);
		Обновляем = Истина;
	КонецЕсли;
	Возврат Обновляем;
КонецФункции

&НаКлиенте
Процедура тт_РасписаниеПосле(Команда)
	//ToDo: Сделать скрытым по умолчанию
	Элементы.Расписание.Пометка = НЕ Элементы.Расписание.Пометка;
	Элементы.ГруппаКалендарь.Видимость = Элементы.Расписание.Пометка;
КонецПроцедуры
