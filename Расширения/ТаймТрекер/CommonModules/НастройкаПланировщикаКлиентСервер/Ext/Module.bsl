// Возвращает дату приведенную к началу следующего периода отображения календаря
Функция ПолучитьДатуНачалаСледующегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаСледующегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.День") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоДня(Дата+86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ТриДня") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоДня(Дата+3*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Неделя") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоНедели(Дата+7*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.РабочаяНеделя") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоНедели(Дата+7*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоНедели(Дата+14*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Месяц") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоМесяца(ДобавитьМесяц(Дата, 1));
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаСледующегоПериода;
	
КонецФункции

// Возвращает дату приведенную к началу предыдущего периода отображения календаря
Функция ПолучитьДатуНачалаПредыдущегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПредыдущегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.День") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(Дата - 86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ТриДня") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(Дата - 3*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Неделя") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоНедели(Дата - 7*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.РабочаяНеделя") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоНедели(Дата - 7*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоНедели(Дата - 14*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Месяц") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоМесяца(ДобавитьМесяц(Дата, -1));
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаПредыдущегоПериода;
	
КонецФункции

Функция ПолучитьПериодОтображения(НастройкиОтображения) Экспорт
	
	Если НастройкиОтображения.ВыделенныеДаты.Количество() > 1 Тогда
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.День");
	Иначе
		ПериодОтображения = НастройкиОтображения.ПериодОтображения;
	КонецЕсли;
	Возврат ПериодОтображения;
	
КонецФункции

Процедура ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения) Экспорт
	
	ПериодОтображения = ПолучитьПериодОтображения(НастройкиОтображения);
	ДатаНачала = НастройкаПланировщикаКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения,НастройкиОтображения.ОтображаемаяДата);
	ДатаОкончания = НастройкаПланировщикаКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения,НастройкиОтображения.ОтображаемаяДата);
	ВыделенныеДаты = ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьВремяС = НастройкиОтображения.ОтображатьВремяС;
	ОтображатьВремяПо = 24 - НастройкиОтображения.ОтображатьВремяПо;
	
	// Заполнение текущих периодов отображения
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
		НастройкаПланировщикаКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		
		ОтображаемаяДатаОкончания =
		НастройкаПланировщикаКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		
		Планировщик.ТекущиеПериодыОтображения.Добавить(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания);
		
	КонецЦикла;
	
	//ToDo: Закомментированный код расширяет период часы отображения если есть планы на нерабочее время.
	// Надо перепроверить алгоритм. Или не надо.
	// Рассчет отображаемых часов
	//Если НастройкиОтображения.ОтображатьСкрытыеЭлементы Тогда
	//Для Каждого Событие Из Планировщик.Элементы Цикл
	//	
	//	Если ОтображатьВремяС = 0 И ОтображатьВремяПо = 0 Тогда
	//		Прервать;
	//	КонецЕсли;
	//				
	//	// Определяем час начала и окончания.
	//	// Если окончание приходится на начало дня - то час окончания 24.
	//	ЧасНачала = Цел((Событие.Начало - НачалоДня(Событие.Начало)) / 3600);
	//	ЧасОкончания = Цел((Событие.Конец - НачалоДня(Событие.Конец - 1)) / 3600);
	//	
	//	// Определяем минимальное время для отображения.
	//	// Час начала берем как есть.
	//	// Час окончания берем предыдущий.
	//	МинВремя = Мин(ЧасНачала, Макс(ЧасОкончания - 1, 0));
	//	Если МинВремя < ОтображатьВремяС Тогда
	//		ОтображатьВремяС = МинВремя;
	//	КонецЕсли;
	//	
	//	// Определеяем максимальное время для отображения.
	//	// Час начала берем следующий.
	//	// Час окончания берем как есть, если час окончания приходится на начало часа, иначе следующий.
	//	СмещениеЧасаОкончания = ?(Событие.Конец = НачалоЧаса(Событие.Конец), 0, 1);
	//	МаксВремя = Макс(Мин(ЧасНачала + 1, 24), Мин(ЧасОкончания + СмещениеЧасаОкончания, 24));
	//	ОтображатьВремяПоНормализованное = 24 - ОтображатьВремяПо;
	//	Если МаксВремя > ОтображатьВремяПоНормализованное Тогда
	//		ОтображатьВремяПо = 24 - МаксВремя;
	//	КонецЕсли;
	//				
	//КонецЦикла;
	//КонецЕсли;
	
	// Настройки общие для всех периодов отображения
	Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени = Истина;
	//	Планировщик.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, dd.MM'";
	
	//// Фон календаря.
	//ДобавитьФонКалендаря(Планировщик.ИнтервалыФона, НастройкиОтображения);
	//
	//// Настройки специфичные для периода отображения
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ТриДня") 
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Неделя") 
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.РабочаяНеделя") 
		Тогда
		
		// Планировщик по часам
		Планировщик.ОтображатьТекущуюДату = Истина;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени = ОтображатьВремяС;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ОтображатьВремяПо;
		//	
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Месяц")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ДвеНедели") 
		
		Тогда
		
		// Планировщик по дням
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		//	
	КонецЕсли;
	//
	// Шкала времени
	УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения);
	//
	
КонецПроцедуры

Функция ПолучитьВыделенныеДаты(НастройкиОтображения) Экспорт
	
	ВыделенныеДаты = НастройкиОтображения.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Тогда
		ВыделенныеДаты.Добавить(НастройкиОтображения.ОтображаемаяДата);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(ВыделенныеДаты);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ВыделенныеДаты = СписокДат.ВыгрузитьЗначения();
	
	Возврат ВыделенныеДаты;
	
КонецФункции

// Возвращает дату приведенную к началу периода отображения календаря
Функция ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПериода = НачалоДня(ТекущаяДата());
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.День") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ТриДня") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Неделя") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.РабочаяНеделя") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Месяц") Тогда
		
		ДатаНачалаПериода = НачалоНедели(НачалоМесяца(Дата));
		
	КонецЕсли;
	
	Возврат ДатаНачалаПериода;
	
КонецФункции

// Возвращает дату приведенную к концу периода отображения календаря
Функция ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаОкончанияПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.День") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ТриДня") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата+86400*2);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.РабочаяНеделя") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата)- 2 * 86400;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Неделя") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ДвеНедели") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата+7*86400);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Месяц") Тогда
		
		ДатаОкончанияПериода = КонецНедели(КонецМесяца(Дата));
		
	КонецЕсли;
	
	Возврат ДатаОкончанияПериода;
	
КонецФункции

Процедура УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения)
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
			Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
		КонецЦикла;
	КонецЕсли;
	ПоложениеШкалы = ПоложениеШкалыВремени.Верх;
	Если НастройкиОтображения.ПоложениеШкалы = Истина Тогда
		ПоложениеШкалы = ПоложениеШкалыВремени.Лево;
	КонецЕсли;
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ТриДня")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.РабочаяНеделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Неделя") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалы;
		
		ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
		ШкалаВремениЧас.Кратность = 1;
		ШкалаВремениЧас.Формат = "DF='HH:mm'";
		
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = НастройкиОтображения.РазмерЯчейкиВремени;
		ШкалаВремениМинута.Формат = "";
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.Месяц")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.тт_ПериодичностьКалендаря.ДвеНедели") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалы;
		
		ШкалаВремени = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремени.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
		ШкалаВремени.Кратность = 1;
		ШкалаВремени.Формат = "ДФ=''ddd, dd.MM''";
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруСобытия() Экспорт
	Структура = Новый Структура("Ссылка,Фикс,ВремяНачала,ВремяОкончания,Задача,Клиент,КлиентНаименование,КлиентЦвет,ПометкаУдаления,Наименование,Фикс,Место,Описание");
	Возврат Структура;
КонецФункции

Процедура ПрименитьОформлениеКоВсем(Планировщик, НастройкиОтображения) Экспорт
	
	Для Каждого ЭлементПланировщика Из Планировщик.Элементы Цикл
		ПрименитьОформление(ЭлементПланировщика, НастройкиОтображения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьОформление(ЭлементПланировщика, НастройкиОтображения) Экспорт
	#Если Сервер И НЕ Сервер Тогда
		Планировщик = Новый Планировщик;
		ЭлементПланировщика = Планировщик.Элементы.Добавить();
	#КонецЕсли
	Событие = ЭлементПланировщика.Значение;
	ЭлементПланировщика.Текст = Событие.ИсполнительПредставление + ": " + Событие.Наименование;
	Если Событие.ПометкаУдаления Тогда
		ЭлементПланировщика.Шрифт = Новый Шрифт(ЭлементПланировщика.Шрифт,,,,,,Истина);
		ЭлементПланировщика.ЦветФона = Новый Цвет(180,180,180);
		ЭлементПланировщика.Действия.Добавить("СнятьПометку","",БиблиотекаКартинок.Удалить);
	Иначе
		Цвет = WebЦвета.Желтый;
		Если Событие.Состояние  = "План" Тогда
			ЭлементПланировщика.ЦветРамки = Новый Цвет(0,0,0);
			ЭлементПланировщика.Действия.Добавить("Старт","",БиблиотекаКартинок.тт_Старт);
		ИначеЕсли Событие.Состояние = "Текущий" Тогда
			Цвет = WebЦвета.Зеленый;
			ЭлементПланировщика.Шрифт = Новый Шрифт(ЭлементПланировщика.Шрифт,,,Истина);
			ЭлементПланировщика.Действия.Добавить("Пауза","",БиблиотекаКартинок.тт_Пауза);
			ЭлементПланировщика.Действия.Добавить("Стоп","",БиблиотекаКартинок.тт_Стоп);
		ИначеЕсли Событие.Состояние = "Факт" Тогда
			Цвет = WebЦвета.Голубой;
			ЭлементПланировщика.ЦветРамки = Новый Цвет(255,0,0);
			ЭлементПланировщика.Действия.Добавить("Старт","",БиблиотекаКартинок.тт_Старт);
		ИначеЕсли Событие.Состояние = "Открыт" Тогда
			Цвет = WebЦвета.Лосось;
			ЭлементПланировщика.ЦветРамки = Новый Цвет(255,0,0);
			ЭлементПланировщика.Шрифт = Новый Шрифт(ЭлементПланировщика.Шрифт,,,Истина);
			ЭлементПланировщика.Действия.Добавить("Пауза","",БиблиотекаКартинок.тт_Пауза);
			ЭлементПланировщика.Действия.Добавить("Стоп","",БиблиотекаКартинок.тт_Стоп);
		КонецЕсли;
		ЭлементПланировщика.ЦветФона = Цвет;
	КонецЕсли;
	
КонецПроцедуры