#Область ПрограммныйИнтерфейс

Процедура РегламентноеПолучениеИОбработкаСообщений() Экспорт
	
	НастройкиБота = НастройкиБота();
	
	Попытка
		
		Обновления = ПолучитьОбновления();	
		//api.telegram.org/bot6249156645:AAEwBnc4MWrYVB_a6YXgDVPcduyzIPDWJRE/getUpdates?&offset=
	Исключение
		
		ЗаписьЖурналаРегистрации("Руф_Телеграмм.ПолучитьОбновления", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		
		Обновления = Неопределено;
		
	КонецПопытки;
	
	Если ТипЗнч(Обновления) = Тип("Массив") Тогда
		
		Для Каждого Обновление из Обновления Цикл
			
			РезультатОбработкиОбновления = ОбработатьОбновление(Обновление);	
			
			Если Не РезультатОбработкиОбновления.Обработано Тогда 
				ЗаписьЖурналаРегистрации("Руф_Телеграмм.ОбработкаОбновления", УровеньЖурналаРегистрации.Ошибка,,,ЗначениеВСтрокуВнутр(Обновление)+"
				|"+РезультатОбработкиОбновления.ТекстСообщения);
				Прервать;
			КонецЕсли;	
			
		Конеццикла;	
		
	Конецесли;
	
КонецПроцедуры

// Возвращает настройки бота
//
// Возвращаемое значение:
//  Структура - структура с параметрами
//  * ТокенБота - Строка - токен телеграмм-бота
//  * ТекущийПрокси - Число,Неопределено - текущий индекс прокси. Заполняется в ЗаполнитьНастройкиПрокси
//
Функция НастройкиБота() Экспорт
	
	НастройкиБота = Новый Структура;
	НастройкиБота.Вставить("ТокенБота", Константы.узТелеграмм_ТокенБота.Получить());
	НастройкиБота.Вставить("ТекущийПрокси", Неопределено);
	
	Возврат НастройкиБота;
	
КонецФункции

// Добавляет в настройки бота данные прокси
//
// Параметры:
//  НастройкиБота - Структура - структура настроек для заполнения
//
// Возвращаемое значение:
//  НастройкиБота - Структура - входящие настройки бота
//  * ТекущийПрокси - Число - Индекс текущего прокси. Равен 0 и изменяется при выполнении запросов
//  * Прокси - Массив структур - Массив доступных прокси. Задаются в регистре сведений узПроксиСерверы
//  ** Адрес - Строка - адрес прокси
//  ** Порт - Число - порт прокси
//  ** Логин - Строка - логин прокси
//  ** Пароль - Строка - пароль прокси
//
Процедура ЗаполнитьНастройкиПрокси(НастройкиБота) Экспорт
	
	Прокси = РегистрыСведений.узПроксиСерверы.ПолучитьМассивНастроекПроксиСерверов();
	Если Прокси.Количество() > 0 Тогда
		НастройкиБота.Вставить("Прокси", Прокси);
		НастройкиБота.ТекущийПрокси = 0;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новые сообщения относительно переданного ИД
//
// Параметры:
//  MaxMessageID - Необязательное. Идентификатор последнего полученного сообщения (не номер в чате).
//                 Сообщения получаются после этого номера. Если не указано, то значение
//                 получается из элемента-константы ТелеграмMaxMessangeID.
//  Ответ - HTTPОтвет - если указана переменная, то в нее помещается ответ, полученный при запросе
//  НеПолучатьПовторно - Булево - Если Истина, то последний идентификатор сообщения
//                                будет сохранен в элемент-константу ТелеграмMaxMessangeID
//
// Возвращаемое значение: 
//  Соответствие:
//
Функция ПолучитьОбновления(MaxMessageID = "") Экспорт
	
	
	НастройкиБота = НастройкиБота();
	Если ПустаяСтрока(НастройкиБота.ТокенБота) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗаполнитьНастройкиПрокси(НастройкиБота);
	
	Если ПустаяСтрока(MaxMessageID) Тогда
		ИДПоследнегоПринятогоСообщения = Справочники.узКонстанты.ПолучитьЗначениеКонстанты("ТелеграмMaxMessangeID", Тип("Строка"), , Ложь);
	Иначе
		ИДПоследнегоПринятогоСообщения = MaxMessageID;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИДПоследнегоПринятогоСообщения) Тогда
		ИДПоследнегоПринятогоСообщения = "";
	КонецЕсли;
	
	Обновления = OPI_Telegram.ПолучитьОбновления(НастройкиБота.ТокенБота , ,ИДПоследнегоПринятогоСообщения); 
	
	Возврат Обновления.Получить("result");
	
КонецФункции 

Функция ОбработатьОбновление(Знач Обновление) Экспорт
	
	НастройкиБота = НастройкиБота();
	ТокенБота = НастройкиБота.ТокенБота;
	
	Обработано = Ложь;
	ТекстСообщения = "";
	
	Попытка
		
		update_id = Обновление.Получить("update_id");
		Если update_id = Неопределено Тогда
			
			update_id = Справочники.узКонстанты.ПолучитьЗначениеКонстанты("ТелеграмMaxMessangeID", Тип("Строка"), , Ложь);	
			
		КонецЕсли;	
		
		channel_post = Обновление.Получить("channel_post");   
		message = Обновление.Получить("message");       
		message_reaction_count = Обновление.Получить("message_reaction_count");
		
		Если Не message_reaction_count = Неопределено Тогда
			
			chat = message_reaction_count.Получить("chat"); 
			message_id = message_reaction_count.Получить("message_id");
			date = message_reaction_count.Получить("date"); 
			Если Не chat = Неопределено Тогда
				
				chat_id = chat.Получить("id");
				
				Если chat_id = -1001808416927 Тогда
					
					НужнаяРеакцияПалецВверх = Ложь;
					НужнаяРеакцияПалецВниз = Ложь;
					НеНужнаяРеакция = Ложь;
					
					Попытка 
						reactions = message_reaction_count.получить("reactions");  
						Для Каждого Текreactions из reactions Цикл       
							Если КодСимвола(Сред(Текreactions.получить("type").получить("emoji"), 1, 1)) +КодСимвола(Сред(Текreactions.получить("type").получить("emoji"), 2, 1))  = 111754 Тогда
								НужнаяРеакцияПалецВверх = Истина; 
							ИначеЕсли КодСимвола(Сред(Текreactions.получить("type").получить("emoji"), 1, 1)) +КодСимвола(Сред(Текreactions.получить("type").получить("emoji"), 2, 1))  = 111755 Тогда
								НужнаяРеакцияПалецВниз = Истина; 
							Иначе
								НеНужнаяРеакция = Истина;
							КонецЕсли;
						КонецЦикла;           
					Исключение
						
					КонецПопытки;   
					
					Если НужнаяРеакцияПалецВниз и Не НужнаяРеакцияПалецВверх Тогда
						
						Обработано = ОтработатьРеакциюНаКаналеЛК(message_id, Ложь, ТокенБота); 
						
						
						
					ИначеЕсли НужнаяРеакцияПалецВверх Тогда
						
						Обработано = ОтработатьРеакциюНаКаналеЛК(message_id, Истина, ТокенБота);
						
					Иначе
						Обработано = Истина;
					КонецЕсли;	
				Иначе
						Обработано = Истина;	
				КонецЕсли;	
				
			КонецЕсли; 
			
		ИначеЕсли Не channel_post = Неопределено Тогда // сообюшение в канале
			
			//-1002163304215 - ОВ Первый БИТ Ташкент
			//-1001808416927 - ЛК Канал	   
			chat = channel_post.Получить("chat");
			Если Не chat = Неопределено Тогда
				
				chat_id = chat.Получить("id");
				
				Если chat_id = -1001808416927 Тогда
					
					Обработано = ОтработатьЗаявкуНаЛК(channel_post);
					
				КонецЕсли;	
				
			КонецЕсли;  
			
			
		ИначеЕсли Не message = Неопределено Тогда //есть сообшение	  
			
			message_id = message.Получить("message_id");
			
			chat = message.Получить("chat");
			chat_type = chat.Получить("type");        
			chat_id = chat.Получить("id");  
			chat_username = chat.Получить("username");
			chat_last_name = chat.Получить("last_name");
			chat_first_name = chat.Получить("first_name");
			
			Если chat_type = "private" Тогда   //Когда пишут напрямую боту
				
				ПользовательПоТелеграммИд = ПолучитьПользователяПоТелеграммИд(chat_id);
				
				Если Не ЗначениеЗаполнено(ПользовательПоТелеграммИд) Тогда
					
					
					
					СообщениеОтвета = "Пользователь с ИД "+chat_id+" не найден!
					|Сообщите администратору свой ид для привязки!";
					
					OPI_Telegram.ОтправитьТекстовоеСообщение(ТокенБота, chat_id, СообщениеОтвета);
					Обработано = Истина;
					
					
				Иначе  //есть пользователь с ид
					
					//тест 
					text = "";
					Попытка
						
						text = message.Получить("text");
						
					Исключение
						
					КонецПопытки;
					СообщениеОтвета = "Зерпкало сообшения:
					|"+text;
					
					OPI_Telegram.ОтправитьТекстовоеСообщение(ТокенБота, chat_id, СообщениеОтвета);
					Обработано = Истина;
					//тест
					
				КонецЕсли;	
				
			Иначе   	
				
				from =  message.Получить("from");  
				Если Не from = Неопределено Тогда //ответ    
					
					from_id = from.Получить("id");  
					reply_to_message = message.Получить("reply_to_message");
					
					если from_id = 777000 Тогда  //это значит что канал автоматом создал в обсуждении 
						
						forward_origin = message.Получить("forward_origin"); 
						Если Не forward_origin = Неопределено Тогда
							
							Если forward_origin.Получить("chat").Получить("id") = -1001808416927 и message.Получить("chat").Получить("id") = -1001847257057 Тогда  //Копия сообшения в канале, ответим что создали задачу, если найдем
								
								forward_origin_message_id = forward_origin.Получить("message_id");
								
								Если Не forward_origin_message_id = Неопределено Тогда
									
									forward_origin_message_id = Формат(forward_origin_message_id,"ЧГ=0");
									ЗадачаПоНомеруВнешнейЗаявки = ПолучитьЗадачуПоВнешнейЗаявке(forward_origin_message_id);  
									
									Если Не ЗадачаПоНомеруВнешнейЗаявки = Неопределено Тогда
										
										Об =  ЗадачаПоНомеруВнешнейЗаявки.ПолучитьОбъект();
										Об.Руф_НомерФорумаВнешнейЗаявки =Формат(message_id,"ЧГ=0");
										Об.Записать();
										
										//Создаем комментарий что задача создана
										СообщениеОтвета = "Задача для пользователя "+ЗадачаПоНомеруВнешнейЗаявки.Исполнитель+" создан!";
										
										OPI_Telegram.ОтправитьТекстовоеСообщение(ТокенБота, chat_id, СообщениеОтвета,,,message_id);
										Обработано = Истина; 
									Иначе
										
										СообщениеОтвета = "!!!Ошибка при создании задачи по тексту:
										|"+message.получить("text");
										
										OPI_Telegram.ОтправитьТекстовоеСообщение(ТокенБота, chat_id , СообщениеОтвета,,,message_id);
										Обработано = Истина; 
									КонецЕсли;	
									
								КонецЕсли;	
								
								
							КонецЕсли;	
							
							
						КонецЕсли;
					ИначеЕсли Не reply_to_message = Неопределено Тогда
						Попытка    						
							
							Если reply_to_message.Получить("sender_chat").Получить("id") = -1001808416927 и reply_to_message.Получить("chat").Получить("id") = -1001847257057 Тогда
								
								from_username = from.Получить("username");
								text = from_username+": "+message.Получить("text");  
								message_thread_id = Формат(message.Получить("message_thread_id"),"ЧГ=0"); 
								
								ЗадачаПоНомеруВнешнейЗаявкиФорума = ПолучитьЗадачуПоВнешнейЗаявкеОбсуждения(message_thread_id); 
								
								Если Не ЗадачаПоНомеруВнешнейЗаявкиФорума = Неопределено Тогда
									Об =  ЗадачаПоНомеруВнешнейЗаявкиФорума.ПолучитьОбъект();
									Комментарии = Об.Комментарии;
									НовыйКомментарий = Комментарии.Добавить();
									НовыйКомментарий.КлючСтроки = message_id; 
									НовыйКомментарий.ДатаКомментария = ТекущаяДата();
									НовыйКомментарий.Автор = Пользователи.ТекущийПользователь();
									НовыйКомментарий.Комментарий = text;
									НовыйКомментарий.Выполнено = Истина;
									Об.Записать(); 
								КонецЕсли;		
								Обработано = Истина;
							Иначе
								Обработано = Истина; //Тест	
							КонецЕсли;
						Исключение
							Обработано = Истина; //Тест
						КонецПопытки;
					Иначе	
						Обработано = Истина; //Тест
						
					КонецЕсли;
					
					
					
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			Обработано = Истина; //Тест
			
		КонецЕсли;	
		
		
		Если Обработано Тогда
			Справочники.узКонстанты.УстановитьЗначениеКонстанты("ТелеграмMaxMessangeID", update_id+1);
		КонецЕсли; 
		
	Исключение          
		Обработано = Ложь;
		ТекстСообщения = ОписаниеОшибки();		
	КонецПопытки;
	
	Ответ = Новый Структура();
	Ответ.Вставить("Обработано",Обработано); 
	Ответ.Вставить("ТекстСообщения",ТекстСообщения);
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьПользователяПоТелеграммИд(ТелеграммИд = "")
	
	Ответ = Справочники.Пользователи.ПустаяСсылка();
	
	Если не ТелеграммИд="" и Не ТелеграммИд = Неопределено Тогда
		
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
		// Данный фрагмент построен конструктором.
		// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.узИДПользователяТелеграмм = &узИДПользователяТелеграмм";
		
		Запрос.УстановитьПараметр("узИДПользователяТелеграмм", ТелеграммИд);
		
		РезультатЗапроса = Запрос.Выполнить();         
		
		Если не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			Ответ =  ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Ответ;
	
КонецФункции

Функция ОтработатьРеакциюНаКаналеЛК(Знач message_id, ВыполненОтменен, ТокенБота)
	
	Обработано = Ложь;
	
	message_id = СокрЛп(Формат(message_id,"ЧГ=0"));
	
	Если Не message_id="" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	узЗадачи.Ссылка КАК Ссылка,
		|	Естьnull(узФактПоЗадачамОстатки.Руф_ВРасчетОстаток,0) КАК Руф_ВРасчетОстаток
		|ИЗ
		|	Справочник.узЗадачи КАК узЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.узФактПоЗадачам.Остатки КАК узФактПоЗадачамОстатки
		|		ПО узФактПоЗадачамОстатки.Задача = узЗадачи.Ссылка
		|ГДЕ
		|	узЗадачи.НомерВнешнейЗаявки = &НомерВнешнейЗаявки";
		
		Запрос.УстановитьПараметр("НомерВнешнейЗаявки", message_id);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда 
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			ВыборкаДетальныеЗаписи.Следующий();
			
			ЗадачаОб = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			
			
			Если ВыполненОтменен Тогда   
				ЗадачаОб.Статус = Справочники.узСтатусыЗадачи.Готово;
				Если ВыборкаДетальныеЗаписи.Руф_ВРасчетОстаток = 0 Тогда
					
					ДокВводФактаОб = Документы.узВводФактаПоЗадаче.СоздатьДокумент();
					ДокВводФактаОб.УстановитьНовыйНомер();
					ДокВводФактаОб.Дата = ТекущаяДата();
					ДокВводФактаОб.Задача = ВыборкаДетальныеЗаписи.Ссылка;
					ДокВводФактаОб.Исполнитель = ЗадачаОб.Исполнитель;
					ДокВводФактаОб.Комментарий = "Добавлен через обработку Телеграмм бота! "+ТекущаяДата();
					
					НоваяВремя =  ДокВводФактаОб.Данные.Добавить();
					НоваяВремя.ДатаНачала = ТекущаяДата()-20*60;  
					НоваяВремя.ДатаОкончания = ТекущаяДата(); 
					НоваяВремя.Примечание = "Добавлен через обработку Телеграмм бота! "+ТекущаяДата();
					НоваяВремя.Руф_ВРасчет = 1/3;
					НоваяВремя.Факт = 1/3; 
					НоваяВремя.Руф_ТипВремени = ЗадачаОб.Руф_ТипВремени;
					ДокВводФактаОб.Записать(РежимЗаписиДокумента.Проведение);
					Обработано = Истина;
					
				Иначе    
					
					Обработано = Истина;
					
				КонецЕсли;   
				
				chat_id = -1001847257057;
				СообщениеОтвета = "Задача для пользователя "+ЗадачаОб.Исполнитель+" выполнен!";
				
				OPI_Telegram.ОтправитьТекстовоеСообщение(ТокенБота, chat_id, СообщениеОтвета,,,ЗадачаОб.Руф_НомерФорумаВнешнейЗаявки);
				
			Иначе 
				ЗадачаОб.Статус = Справочники.узСтатусыЗадачи.Отменена;
				Если Не ВыборкаДетальныеЗаписи.Руф_ВРасчетОстаток = 0 Тогда
					Обработано = Истина;
				Иначе
					Обработано = Истина;	
				КонецЕсли;
				
				chat_id = -1001847257057;
				СообщениеОтвета = "Задача для пользователя "+ЗадачаОб.Исполнитель+" отменен!";
				
				OPI_Telegram.ОтправитьТекстовоеСообщение(ТокенБота, chat_id, СообщениеОтвета,,,ЗадачаОб.Руф_НомерФорумаВнешнейЗаявки);
				
			КонецЕсли;	
			ЗадачаОб.Записать();	
		иначе
		Обработано = Истина	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Обработано;
	
КонецФункции	

Функция ОтработатьЗаявкуНаЛК(Знач channel_post) Экспорт
	
	Обработано = Ложь;
	
	message_id = channel_post.Получить("message_id");  
	author_signature = channel_post.Получить("author_signature");  
	
	sender_chat = channel_post.Получить("sender_chat");   
	Если не sender_chat = Неопределено тогда 
		sender_chat_id = sender_chat.Получить("id");
		sender_chat_title = sender_chat.Получить("title");
		sender_chat_type = sender_chat.Получить("type"); 
	Иначе
		sender_chat_id = "";
		sender_chat_title = "";
		sender_chat_type = "";
	КонецЕсли;
	chat = channel_post.Получить("chat");
	chat_id = chat.Получить("id");
	chat_title = chat.Получить("title");
	chat_type = chat.Получить("type");
	date = channel_post.Получить("date");
	text = channel_post.Получить("text");
	entities = channel_post.Получить("entities");
	
	Если Не text = Неопределено Тогда 
		
		ЗаявкаНаЛк = Новый Соответствие;
		ЗаявкаНаЛк.Вставить("Организация:","");  
		ЗаявкаНаЛк.Вставить("ИНН:","");
		ЗаявкаНаЛк.Вставить("Контакт ФИО:","");
		ЗаявкаНаЛк.Вставить("Контакт номер телефона:","");;
		ЗаявкаНаЛк.Вставить("Задача/Проблемы:","");
		ЗаявкаНаЛк.Вставить("Рекомендованное дата связи:","");
		ЗаявкаНаЛк.Вставить("Рекомендованное время связи:",""); 
		ЗаявкаНаЛк.Вставить("Исполнитель:","");
		
		ТекстровыйДокумент = Новый ТекстовыйДокумент;
		ТекстровыйДокумент.УстановитьТекст(text);
		
		Если ТекстровыйДокумент.КоличествоСтрок()>0 Тогда
			Для НомерСтр=1 по ТекстровыйДокумент.КоличествоСтрок() Цикл
				
				ТекТекст = ТекстровыйДокумент.ПолучитьСтроку(НомерСтр);
				
				Для Каждого ТекДанные из ЗаявкаНаЛк Цикл
					
					Если Найти(ТекТекст,ТекДанные.Ключ) = 1 Тогда
						
						СтрокаБезКлюча = СокрЛп(СтрЗаменить(ТекТекст,ТекДанные.Ключ,""));
						ЗаявкаНаЛк.Вставить(ТекДанные.Ключ,СтрокаБезКлюча);	
						
					КонецЕсли;	
					
					
				КонецЦикла;				
				
			КонецЦикла;	
			
			Если не ЗаявкаНаЛк.Получить("Организация:") = "" Тогда
				ИсполнительПоИмени = ПолучитьИсполнителяПоИмени(ЗаявкаНаЛк.Получить("Исполнитель:"));
				
				ЗадачаОбъект = Справочники.узЗадачи.СоздатьЭлемент();
				ЗадачаОбъект.Автор = Пользователи.ТекущийПользователь();
				ЗадачаОбъект.ДатаСоздания = ТекущаяДата();
				ЗадачаОбъект.ТекстСодержания = text;
				ЗадачаОбъект.Наименование = "ЛК: "+ЗаявкаНаЛк.Получить("Организация:");
				ЗадачаОбъект.ОформлениеТекста = Перечисления.узОформлениеТекста.Текст; 
				ЗадачаОбъект.Важность = ПредопределенноеЗначение("Справочник.узВариантыВажностиЗадачи.Обычная");
				ЗадачаОбъект.ПоказыватьВОтчетахИКанбанДоске = Истина;
				ЗадачаОбъект.Статус = ПредопределенноеЗначение("Справочник.узСтатусыЗадачи.Зарегистрирована");
				ЗадачаОбъект.Родитель = Справочники.узЗадачи.НайтиПоНаименованию("Линия консультации",Истина,Справочники.узЗадачи.ПустаяСсылка());
				ЗадачаОбъект.ПоказыватьВОтчетахИКанбанДоске = Истина;
				
				ЗадачаОбъект.НомерВнешнейЗаявки = Формат(message_id,"ЧГ=0");
				ЗадачаОбъект.URLВнешнейЗаявки = "https://t.me/c/1808416927/"+Формат(message_id,"ЧГ=0");
				ЗадачаОбъект.Исполнитель = ИсполнительПоИмени;   
				
				Контрагент = ПолучитьКонтрагента(ЗаявкаНаЛк.Получить("Организация:"),ЗаявкаНаЛк.Получить("ИНН:"));
				ЗадачаОбъект.Контрагент = Контрагент;
				ЗадачаОбъект.Руф_Постановщик = ПолучитьИсполнителяПоИмени("Алиса");
				ЗадачаОбъект.Руф_ТипВремени = Справочники.Руф_ТипыВремени.НайтиПоНаименованию("ЛК");
				ЗадачаОбъект.Руф_ВЗР = Справочники.Руф_Подразделения.НайтиПоНаименованию("Отдел сопровождения");
				ЗадачаОбъект.ЧасыПлан = 1/60*20;
				
				ЗадачаОбъект.Записать();   
			КонецЕсли;
			Обработано = Истина;
			
			
		КонецЕсли;
	Иначе
		Обработано = Истина;
	КонецЕсли;	
	
	Возврат Обработано;
	
КонецФункции 

Функция ПолучитьИсполнителяПоИмени(Знач ИсполнительЛКПоИмени)
	
	ИсполнителиЛКПоИмени = Новый Соответствие;
	ИсполнителиЛКПоИмени.Вставить("Аня",Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",Новый УникальныйИдентификатор("f0eb307f-575a-440c-b0b8-62aaeb906a89")));
	ИсполнителиЛКПоИмени.Вставить("Никита",Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",Новый УникальныйИдентификатор("3ba3f1e9-7fe4-41f4-be0a-ab008186bc43")));
	ИсполнителиЛКПоИмени.Вставить("Марат",Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",Новый УникальныйИдентификатор("e4bfd30e-8cac-4215-905a-2c339c566fdf")));
	ИсполнителиЛКПоИмени.Вставить("Данай",Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",Новый УникальныйИдентификатор("b3107844-bc21-4fcc-ba0f-2a262a17e9b2")));
	ИсполнителиЛКПоИмени.Вставить("Руфат",Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",Новый УникальныйИдентификатор("32eba4a5-a1c1-4b62-b083-a70ca909faf4")));  
	ИсполнителиЛКПоИмени.Вставить("Алиса",Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ",Новый УникальныйИдентификатор("45727200-e9c7-46cf-9bda-c19e3c342e8a")));
	
	Исполнитель=ИсполнителиЛКПоИмени.Получить(ИсполнительЛКПоИмени);
	
	Если Исполнитель = Неопределено Тогда
		Исполнитель = ИсполнителиЛКПоИмени.Получить("Руфат");	
	КонецЕсли;
	
	Возврат Исполнитель;
	
КонецФункции

Функция ПолучитьКонтрагента(НаименованиеКонтрагента,ИННКонтрагента)
	
	Ответ = Справочники.узКонтрагенты.ПустаяСсылка();
	
	Если не ИННКонтрагента="" Тогда
		
		Ответ = Справочники.узКонтрагенты.НайтиПоРеквизиту("Руф_ИНН",ИННКонтрагента);
		
	КонецЕсли;	
	
	Если не НаименованиеКонтрагента="" и Не ЗначениеЗаполнено(Ответ) Тогда
		
		Ответ = Справочники.узКонтрагенты.НайтиПоНаименованию(НаименованиеКонтрагента);
		
	КонецЕсли;
	
	Если Не НаименованиеКонтрагента="" и Не ИННКонтрагента="" и Не ЗначениеЗаполнено(Ответ) Тогда
		
		НовыйКонтрагент = Справочники.узКонтрагенты.СоздатьЭлемент();
		НовыйКонтрагент.Наименование =  НаименованиеКонтрагента;
		НовыйКонтрагент.Руф_ИНН =  ИННКонтрагента;
		НовыйКонтрагент.Записать();
		
		Ответ = НовыйКонтрагент.Ссылка;	
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции	

Функция ПолучитьЗадачуПоВнешнейЗаявке(Знач НомерВнешнейЗаявки)
	
	Ответ = Неопределено;
	
	Если СокрЛп(НомерВнешнейЗаявки) = "" Тогда
		Возврат Ответ;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.НомерВнешнейЗаявки = &НомерВнешнейЗаявки";
	
	Запрос.УстановитьПараметр("НомерВнешнейЗаявки", НомерВнешнейЗаявки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Ответ = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Ответ;
	
	
КонецФункции

Функция ПолучитьЗадачуПоВнешнейЗаявкеОбсуждения(Знач Руф_НомерФорумаВнешнейЗаявки)
	
	Ответ = Неопределено;
	
	Если СокрЛп(Руф_НомерФорумаВнешнейЗаявки) = "" Тогда
		Возврат Ответ;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.Руф_НомерФорумаВнешнейЗаявки = &Руф_НомерФорумаВнешнейЗаявки";
	
	Запрос.УстановитьПараметр("Руф_НомерФорумаВнешнейЗаявки", Руф_НомерФорумаВнешнейЗаявки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		Ответ = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Ответ;
	
	
КонецФункции

#КонецОбласти