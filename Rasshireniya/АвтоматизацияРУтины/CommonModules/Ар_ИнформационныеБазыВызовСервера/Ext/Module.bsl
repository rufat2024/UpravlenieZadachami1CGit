
#Область ФормированиеСпискаБаз

Процедура ОбновитьСписокБаз(Данные) Экспорт 
	
	МассивСсылок = Новый Массив;
	
	Для Каждого ЭлементСоответствия Из Данные.СоответствиеДанных Цикл 

		ДополнительныеДанные = Новый Структура();
		ДополнительныеДанные.Вставить("МассивСсылок", Новый Массив);
		ДополнительныеДанные.Вставить("СоответствиеДанных", Данные.СоответствиеДанных);
		ДополнительныеДанные.Вставить("Параметры", Данные.Параметры);
		ДополнительныеДанные.Вставить("Режимы", Данные.Режимы);
		
		ЭтоГруппа = ЭлементСоответствия.Значение.Connect = Неопределено;
		
		Если ЭтоГруппа Тогда 
			ОбновитьГруппу(ЭлементСоответствия.Значение.Name, ЭлементСоответствия.Значение, ДополнительныеДанные);
		Иначе 	
			ОбновитьИнформационнуюБазу(ЭлементСоответствия.Значение.Name, ЭлементСоответствия.Значение, ДополнительныеДанные);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылок, ДополнительныеДанные.МассивСсылок); 
		
	КонецЦикла;
	
	УдалитьНеИспользуемыеИнформационныеБазы(МассивСсылок);
	
КонецПроцедуры

Процедура ОбновитьГруппу(Имя, Данные, ДополнительныеДанные)
	
	Если Имя <> "Информационная база" Тогда 
		
		Владелец		= Пользователи.ТекущийПользователь();
		
		РодительСсылка 	= Справочники.Ар_ИнформационныеБазы.ПустаяСсылка();
		ГруппаСсылка 	= Справочники.Ар_ИнформационныеБазы.НайтиПоРеквизиту("УникальныйИдентификатор", Данные.ID, , Владелец);
		
		//определем родителя группы
		Родитель 		= Данные.Folder;
		
		МассивРодителей	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Родитель, "/", Истина);
		
		Если МассивРодителей.Количество() = 0
			И Данные.Folder = "/" Тогда 
			МассивРодителей.Добавить("");
		КонецЕсли;
		
		ДанныеРодителя	= ПолучитьДанныеСоответствияПоИмениБазы(ДополнительныеДанные.СоответствиеДанных, МассивРодителей[МассивРодителей.Количество() - 1]);
		
		Если ЗначениеЗаполнено(Родитель)
			И ДанныеРодителя <> Неопределено Тогда
			РодительСсылка = Справочники.Ар_ИнформационныеБазы.НайтиПоРеквизиту("УникальныйИдентификатор", ДанныеРодителя.ID, , Владелец);
		КонецЕсли;
		
		//обновляем данные
		Если ГруппаСсылка.Пустая() Тогда 
			
			ОбъектГруппа 							= Справочники.Ар_ИнформационныеБазы.СоздатьГруппу();
			ОбъектГруппа.Владелец 					= Владелец;
			ОбъектГруппа.Родитель					= РодительСсылка;
			ОбъектГруппа.УникальныйИдентификатор    = Данные.ID;
			ОбъектГруппа.Наименование				= Имя;
			ОбъектГруппа.Записать();
			
			ДополнительныеДанные.МассивСсылок.Добавить(ОбъектГруппа.Ссылка);
			
		Иначе 
			
			ОбъектГруппа 							= ГруппаСсылка.ПолучитьОбъект();
			ОбъектГруппа.УстановитьПометкуУдаления(Ложь);
			ОбъектГруппа.Родитель					= РодительСсылка;
			ОбъектГруппа.Наименование				= Имя;
			ОбъектГруппа.Записать();
			
			ДополнительныеДанные.МассивСсылок.Добавить(ГруппаСсылка);
			
		КонецЕсли;
		
		//обновляем рекурсивно родителей		
		Для Каждого Родитель Из МассивРодителей Цикл 
						
			Если ДанныеРодителя <> Неопределено Тогда 
				
				Если ЗначениеЗаполнено(Родитель) Тогда 
					ОбновитьГруппу(Родитель, ДанныеРодителя, ДополнительныеДанные);
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИнформационнуюБазу(Имя, Данные, ДополнительныеДанные)
	
	Режим			= ДополнительныеДанные.Параметры.Режим;
	Владелец		= Пользователи.ТекущийПользователь();
	МассивГрупп		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Данные.Folder, "/", Истина);
	
	Если МассивГрупп.Количество() = 0
		И Данные.Folder = "/" Тогда 
		МассивГрупп.Добавить("");
	КонецЕсли;
	
	Для Каждого Родитель Из МассивГрупп Цикл  

		Родитель 		= СтрЗаменить(Родитель, "/", "");
		РодительСсылка 	= Справочники.Ар_ИнформационныеБазы.ПустаяСсылка();
		ДанныеРодителя	= ПолучитьДанныеСоответствияПоИмениБазы(ДополнительныеДанные.СоответствиеДанных, Родитель);
		
		БазаСсылка 	= Справочники.Ар_ИнформационныеБазы.НайтиПоРеквизиту("УникальныйИдентификатор", Данные.ID, , Владелец);
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			ОбновитьГруппу(Родитель, ДанныеРодителя, ДополнительныеДанные);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			РодительСсылка = Справочники.Ар_ИнформационныеБазы.НайтиПоРеквизиту("УникальныйИдентификатор", ДанныеРодителя.ID, , Владелец); 
		КонецЕсли;
		
		Если БазаСсылка.Пустая() Тогда 
			
			Объект 							= Справочники.Ар_ИнформационныеБазы.СоздатьЭлемент();
			Объект.Владелец 				= Владелец;
			Объект.Родитель					= РодительСсылка;
			Объект.УникальныйИдентификатор	= Данные.ID;
			Объект.Наименование				= Имя;
			
			ОбновитьПараметизируемыеРеквизитыИнформационнойБазы(Объект, Данные, ДополнительныеДанные.Режимы.ОбновитьВсе);
			
			Объект.Записать();
			
			ДополнительныеДанные.МассивСсылок.Добавить(Объект.Ссылка);
			
		Иначе 
			
			Объект 							= БазаСсылка.ПолучитьОбъект();
			Объект.УстановитьПометкуУдаления(Ложь);
			Объект.Родитель					= РодительСсылка;
			Объект.Наименование				= Имя;
			
			ОбновитьПараметизируемыеРеквизитыИнформационнойБазы(Объект, Данные, Режим);
			
			Объект.Записать();
			
			ДополнительныеДанные.МассивСсылок.Добавить(БазаСсылка);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметизируемыеРеквизитыИнформационнойБазы(Объект, Данные, Режим)
	
	ИмяРеквизитаТипАвторизации = "WA";
	
	//Connect
	Если СтрНайти(Данные.Connect, "File") > 0 Тогда 
		
		НомерСимвола								= СтрНайти(Данные.Connect, "File");
		Объект.ТипРасположенияИнформационныйБазы 	= Перечисления.Ар_ТипыРасположенияИнформационныйБазы.НаДанномКомпьютереИлиНаКомпьютереВЛокальнойСети;
		Объект.КаталогИнформационнойБазы			= Сред(Данные.Connect, НомерСимвола);
		Объект.КаталогИнформационнойБазы			= СтрЗаменить(Объект.КаталогИнформационнойБазы, "File=""", "");
		Объект.КаталогИнформационнойБазы			= СтрЗаменить(Объект.КаталогИнформационнойБазы, """;", "");
		
	ИначеЕсли СтрНайти(Данные.Connect, "Srvr") > 0 Тогда 
		
		Объект.ТипРасположенияИнформационныйБазы 	= Перечисления.Ар_ТипыРасположенияИнформационныйБазы.НаСервере1СПредприятия;
		НомерСимволаSrvr							= СтрНайти(Данные.Connect, "Srvr");
		НомерСимволаRef								= СтрНайти(Данные.Connect, "Ref");
		Объект.КластерСерверов						= Сред(Данные.Connect, НомерСимволаSrvr, НомерСимволаRef - НомерСимволаSrvr);
		Объект.КластерСерверов						= СтрЗаменить(Объект.КластерСерверов, "Srvr=""", "");
		Объект.КластерСерверов						= СтрЗаменить(Объект.КластерСерверов, """;", "");
		Объект.ИмяИнформационнойБазы				= Сред(Данные.Connect, НомерСимволаRef);
		Объект.ИмяИнформационнойБазы				= СтрЗаменить(Объект.ИмяИнформационнойБазы, "Ref=""", "");
		Объект.ИмяИнформационнойБазы				= СтрЗаменить(Объект.ИмяИнформационнойБазы, """;", "");
		
	ИначеЕсли СтрНайти(Данные.Connect, "ws") > 0 Тогда 
		
		НомерСимвола								= СтрНайти(Данные.Connect, "ws") + 1;
		Объект.ТипРасположенияИнформационныйБазы 	= Перечисления.Ар_ТипыРасположенияИнформационныйБазы.НаВебСервере;
		Объект.АдресИнформационнойБазы				= Сред(Данные.Connect, НомерСимвола);
		
		ИмяРеквизитаТипАвторизации					= "WSA";
		
	КонецЕсли;
	
	//App
	Если Режим = "ОбновитьВсе" Тогда 
		
		Если Данные.Свойство("App") Тогда 
			
			App = Данные.App;
			
			Если Не ЗначениеЗаполнено(App) Тогда 
				App = Данные.DefaultApp;
			КонецЕсли;
			
			Если СтрНайти(Данные.App, "Auto") > 0 Тогда
				Объект.ОсновнойРежимЗапуска = Перечисления.Ар_РежимЗапуска.ВыбиратьАвтоматически;	
			ИначеЕсли СтрНайти(Данные.App, "ThinClient") > 0 Тогда
				Объект.ОсновнойРежимЗапуска = Перечисления.Ар_РежимЗапуска.ТонкийКлиент;	
			ИначеЕсли СтрНайти(Данные.App, "ThickClient") > 0 Тогда
				Объект.ОсновнойРежимЗапуска = Перечисления.Ар_РежимЗапуска.ТолстыйКлиент;	
			Иначе
				Объект.ОсновнойРежимЗапуска = Перечисления.Ар_РежимЗапуска.ВебКлиент;	
			КонецЕсли;
		КонецЕсли;
		
		//Version
		Если Данные.Свойство("Version") Тогда 
			
			Version = Данные.Version;
			
			Если Не ЗначениеЗаполнено(Version) Тогда 
				Version = Данные.DefaultVersion;
			КонецЕсли;
			
			Объект.Версия1С = Version;	
		КонецЕсли;
		
		//AdditionalParameters
		Если Данные.Свойство("AdditionalParameters") Тогда 
			Объект.ДополнительныеПараметрыЗапуска = Данные.AdditionalParameters;
		КонецЕсли;
		
		//AppArch
		Если Данные.Свойство("AppArch")
			И ЗначениеЗаполнено(Данные.AppArch) Тогда 
			
			Если Данные.AppArch = "x86" Тогда
				Объект.Разрядность = Перечисления.Ар_Разрядность.x86;
			ИначеЕсли Данные.AppArch = "x86_prt" Тогда
				Объект.Разрядность = Перечисления.Ар_Разрядность.x86_Приоритет;
			ИначеЕсли Данные.AppArch = "x86_64" Тогда
				Объект.Разрядность = Перечисления.Ар_Разрядность.x64;
			ИначеЕсли Данные.AppArch = "x86_64_prt" Тогда
				Объект.Разрядность = Перечисления.Ар_Разрядность.x64_Приоритет;
			КонецЕсли;
			
		Иначе 
			Объект.Разрядность = Перечисления.Ар_Разрядность.x86;
		КонецЕсли;
		
		//Execute
		Если Данные.Свойство("Execute") Тогда 
			Объект.ВнешняяОбработка = Данные.Execute;
		КонецЕсли;
		
		//ПутьКФайлуСписка
		Объект.ПутьКФайлуСписка = Данные.ПутьКФайлуСписка;
		
		//ЛичныйФайл
		Объект.ЛичныйФайл = Данные.ЛичныйФайл;
		
		//ВариантАутентификации
		//по умолчанию wa/wsa = 1 воспринимается как по умолчанию пытаемся авторизоваться win, если не получилось логин пароль
		//поэтому во всех базах стоит по умолчанию wa/wsa = 1
		Объект.ВариантАутентификации = Перечисления.Ар_ВариантыАутентификации.ЛогинПароль;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНеИспользуемыеИнформационныеБазы(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ар_ИнформационныеБазы.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Ар_ИнформационныеБазы.ЭтоГруппа
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.Ар_ИнформационныеБазы КАК Ар_ИнформационныеБазы
		|ГДЕ
		|	Ар_ИнформационныеБазы.Владелец = &Владелец
		|	И НЕ Ар_ИнформационныеБазы.Ссылка В (&МассивСсылок)
		|
		|СГРУППИРОВАТЬ ПО
		|	Ар_ИнформационныеБазы.Ссылка,
		|	ВЫБОР
		|		КОГДА Ар_ИнформационныеБазы.ЭтоГруппа
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ";
	
	Запрос.УстановитьПараметр("Владелец", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ОбщегоНазначения.СсылкаСуществует(ВыборкаДетальныеЗаписи.Ссылка) Тогда 
			ОбъектИБ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектИБ.Удалить();
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьДанныеСоответствияПоИмениБазы(СоответствиеДанных, Имя)
	
	Результат = Неопределено;
	
	Для Каждого ЭлементСоответствия Из СоответствиеДанных Цикл 
		
		Если ЭлементСоответствия.Значение.Name = Имя Тогда 
			Результат = ЭлементСоответствия.Значение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#Область ФормированиеДанныхДляКоманд

Функция ПолучитьДанныеФормированияКоманды(ИнформационнаяБаза, Режим = "") Экспорт 
	Возврат Справочники.Ар_ИнформационныеБазы.ПолучитьДанныеВыполненияКомандыКонфигурации(ИнформационнаяБаза, Режим);
КонецФункции

#КонецОбласти

#Область Кластер

Функция ПолучитьПараметрыКластера(ИнформационнаяБаза, ДополнительныеДанные = Неопределено) Экспорт 
	Возврат Ар_ИнформационныеБазы.ПолучитьПараметрыКластера(ИнформационнаяБаза, ДополнительныеДанные);
КонецФункции

Функция СвойстваБлокировокИнформационнойБазы(ПараметрыКластера, ПараметрыИБ) Экспорт
	Возврат АдминистрированиеКластера.БлокировкаСеансовИЗаданийИнформационнойБазы(ПараметрыКластера, ПараметрыИБ);
КонецФункции

Процедура УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(ПараметрыКластера, ПараметрыИБ, Значение) Экспорт 
	АдминистрированиеКластера.УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(ПараметрыКластера, ПараметрыИБ, Значение)
КонецПроцедуры

Процедура УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(ПараметрыКластера, ПараметрыИБ, Данные) Экспорт
	АдминистрированиеКластера.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(ПараметрыКластера, ПараметрыИБ, Данные)
КонецПроцедуры

Функция СеансыИнформационнойБазы(ПараметрыКластера, ПараметрыИБ) Экспорт 
	Возврат АдминистрированиеКластера.СеансыИнформационнойБазы(ПараметрыКластера, ПараметрыИБ)
КонецФункции

Процедура УдалитьСеансыИнформационнойБазы(ПараметрыКластера, ПараметрыИБ, Фильтр = Неопределено) Экспорт 
	АдминистрированиеКластера.УдалитьСеансыИнформационнойБазы(ПараметрыКластера, ПараметрыИБ, Фильтр)
КонецПроцедуры

Функция СоединенияСИнформационнойБазой(ПараметрыКластера, ПараметрыИБ) Экспорт 
	Возврат АдминистрированиеКластера.СоединенияСИнформационнойБазой(ПараметрыКластера, ПараметрыИБ)
КонецФункции

Процедура РазорватьСоединенияСИнформационнойБазой(ПараметрыКластера, ПараметрыИБ, Фильтр = Неопределено) Экспорт 
	АдминистрированиеКластера.РазорватьСоединенияСИнформационнойБазой(ПараметрыКластера, ПараметрыИБ, Фильтр)
КонецПроцедуры

#КонецОбласти

#Область Общее

Функция ПолучитьДанныеКонфигурации(ИнформационнаяБаза) Экспорт 
	Возврат Справочники.Ар_ИнформационныеБазы.ПолучитьДанныеКонфигурации(ИнформационнаяБаза);		
КонецФункции

#КонецОбласти

