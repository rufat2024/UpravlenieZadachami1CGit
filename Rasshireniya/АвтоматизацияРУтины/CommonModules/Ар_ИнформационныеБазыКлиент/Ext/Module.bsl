
#Область ФормированиеСпискаБаз

Процедура ОбновитьСписокБаз(Параметры = Неопределено) Экспорт 
	
	Режимы	= Ар_ИнформационныеБазыКлиент.СписокРежимовОбновленияСпискаБаз();
	
	Если Параметры = Неопределено Тогда 
		
		Параметры 		= Ар_ИнформационныеБазыКлиент.ИнициализироватьПараметрыСпискаБаз();
		Параметры.Режим = Режимы.ОбновитьОбязательныеРеквизиты;
		
	КонецЕсли;
	
	СоответствиеДанных 	= Новый Соответствие;
	МассивКолонок 		= Новый Массив;
	МассивФайлов 		= ПолучитьМассивСписокБазФайлов();
	
	//заполним колонки
	МассивКолонок.Добавить("Name");
	
	Для Каждого Файл Из МассивФайлов Цикл 
		
		ТекстовыйДокумент 	= Новый ТекстовыйДокумент();
		ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя);
		КоличествоСтрок 	= ТекстовыйДокумент.КоличествоСтрок();
		
		Для Счетчик = 1 По КоличествоСтрок Цикл 
			
			Строка = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
			
			Если СтрНайти(Строка, "[") > 0 Тогда
				
			ИначеЕсли СтрНайти(Строка, "=") > 0 Тогда
				
				НомерКлюча 	= СтрНайти(Строка, "=");
				Ключ 		= Сред(Строка, 1, НомерКлюча - 1); 
				
				Если МассивКолонок.Найти(Ключ) = Неопределено Тогда 
					МассивКолонок.Добавить(Ключ);	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	//Заполним данные
	Для Каждого Файл Из МассивФайлов Цикл 
		
		ТекстовыйДокумент 	= Новый ТекстовыйДокумент();
		ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя);
		КоличествоСтрок 	= ТекстовыйДокумент.КоличествоСтрок();
		ТекущаяБаза			= "";
		СтруктураБазы		= Новый Структура;
				
		Для Счетчик = 1 По КоличествоСтрок Цикл 
			
			Строка = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
			
			Если СтрНайти(Строка, "[") > 0
				И СтрНайти(Строка, "]") > 0 Тогда
				
				Если ЗначениеЗаполнено(ТекущаяБаза)
					И СтруктураБазы.Количество() > 0 Тогда 
					
					СтруктураБазы.Name = ТекущаяБаза;

					СоответствиеДанных[СтруктураБазы.ID] = СтруктураБазы;
					
				КонецЕсли;
				
				ТекущаяБаза 	= Строка;
				ТекущаяБаза		= СтрЗаменить(ТекущаяБаза, "[", "");
				ТекущаяБаза		= СтрЗаменить(ТекущаяБаза, "]", "");
				
				СтруктураБазы	= Новый Структура;
				
				СтруктураБазы.Вставить("ПутьКФайлуСписка", Файл.ПолноеИмя);
				
				Если СтрНайти(Файл.ПолноеИмя, ПолучитьКаталогССпискомБазПользователя()) > 0
					И СтрНайти(Файл.ИмяБезРасширения, "public") = 0 Тогда 
					СтруктураБазы.Вставить("ЛичныйФайл", Истина);
				Иначе 
					СтруктураБазы.Вставить("ЛичныйФайл", Ложь);
				КонецЕсли;
				
				Для Каждого Колонка Из МассивКолонок Цикл 
					СтруктураБазы.Вставить(Колонка);
				КонецЦикла;
				
			ИначеЕсли СтрНайти(Строка, "=") > 0 Тогда
				
				НомерКлюча 	= СтрНайти(Строка, "=");
				Ключ 		= Сред(Строка, 1, НомерКлюча - 1); 
				Значение	= Сред(Строка, НомерКлюча + 1);
				
				СтруктураБазы.Вставить(Ключ, Значение);				
				
			КонецЕсли;
		КонецЦикла;
				
		Если ЗначениеЗаполнено(ТекущаяБаза)
			И СтруктураБазы.Количество() > 0 Тогда 
			
			СтруктураБазы.Name = ТекущаяБаза;
			
			СоответствиеДанных[СтруктураБазы.ID] = СтруктураБазы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Данные = Новый Структура();
	Данные.Вставить("МассивКолонок", МассивКолонок);
	Данные.Вставить("СоответствиеДанных", СоответствиеДанных);
	Данные.Вставить("Параметры", Параметры);
	Данные.Вставить("Режимы", Режимы);
	
	Ар_ИнформационныеБазыВызовСервера.ОбновитьСписокБаз(Данные);
	
КонецПроцедуры

Функция ПолучитьМассивСписокБазФайлов()
	
	Массив = Новый Массив;
	
	МассивФайловВсехПользователей 	= НайтиФайлы("C:\ProgramData\1C\1CEStart\", "*.v8i", Истина);
	МассивФайловПользователя 		= НайтиФайлы(ПолучитьКаталогССпискомБазПользователя(), "*.v8i", Истина);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, МассивФайловВсехПользователей); 
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, МассивФайловПользователя); 
	
	Возврат Массив
	
КонецФункции

Функция ПолучитьКаталогССпискомБазПользователя()
	
	Путь			= "";
	РабочийКаталог 	= РабочийКаталогДанныхПользователя();
	МассивПодстрок	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РабочийКаталог, "\", Истина);
	Счетчик			= 0;	
	
	Пока МассивПодстрок[Счетчик] <> "1C"
		И Счетчик <= МассивПодстрок.Количество() - 1 Цикл 
		
		Если Не ЗначениеЗаполнено(Путь) Тогда 
			Путь 	= МассивПодстрок[Счетчик];
		Иначе 
			Путь 	= СтрШаблон("%1\%2", Путь, МассивПодстрок[Счетчик]);
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Путь = СтрШаблон("%1\1C\1CEStart\", Путь);
	
	Возврат Путь
	
КонецФункции

Функция ИнициализироватьПараметрыСпискаБаз() Экспорт 
	
	Структура = Новый Структура();
	Структура.Вставить("Режим");
	
	Возврат Структура
	
КонецФункции

Функция СписокРежимовОбновленияСпискаБаз() Экспорт 
	
	Список = Новый Структура;
	Список.Вставить("ОбновитьВсе", "ОбновитьВсе");
	Список.Вставить("ОбновитьОбязательныеРеквизиты", "ОбновитьОбязательныеРеквизиты");
	
	Возврат Список
	
КонецФункции

#КонецОбласти

#Область ФормированиеДанныхДляКоманд

Процедура ЗапуститьПредриятие(ИнформационнаяБаза, ПараметрыПереопределения = Неопределено) Экспорт 
	
	ДанныеКоманды 	= ПолучитьДанныеФормированияКоманды(ИнформационнаяБаза, "ENTERPRISE");
	
	//переопределим данные запуска
	Если ПараметрыПереопределения <> Неопределено
		И ПараметрыПереопределения.Количество() > 0 Тогда 
		
		ДанныеКоманды.Разрядность 		= ПараметрыПереопределения.Разрядность;
		ДанныеКоманды.РежимЗапуска 		= ПараметрыПереопределения.РежимЗапуска;
				
	КонецЕсли;	
		
	Команда			= Ар_РаботаСКоманднойСтрокойКлиентСервер.ПолучитьКомандуПоДаннымИнформационнойСистемы(ДанныеКоманды);
	
	ЗапуститьПриложение(Команда);
	
КонецПроцедуры

Процедура ЗапуститьКонфигуратор(ИнформационнаяБаза, ПараметрыПереопределения = Неопределено) Экспорт 
	
	ДанныеКоманды 	= ПолучитьДанныеФормированияКоманды(ИнформационнаяБаза, "DESIGNER");
	
	//переопределим данные запуска
	Если ПараметрыПереопределения <> Неопределено
		И ПараметрыПереопределения.Количество() > 0 Тогда 
		
		ДанныеКоманды.Разрядность 		= ПараметрыПереопределения.Разрядность;
		ДанныеКоманды.РежимЗапуска 		= ПараметрыПереопределения.РежимЗапуска;
		ОбновитьПутьК1С(ДанныеКоманды);
		
	КонецЕсли;	
	
	Команда			= Ар_РаботаСКоманднойСтрокойКлиентСервер.ПолучитьКомандуПоДаннымИнформационнойСистемы(ДанныеКоманды);
	
	ЗапуститьПриложение(Команда);
	
КонецПроцедуры

Функция ПолучитьДанныеФормированияКоманды(ИнформационнаяБаза, Режим)
	
	ДанныеКоманды 					= Ар_ИнформационныеБазыВызовСервера.ПолучитьДанныеФормированияКоманды(ИнформационнаяБаза, Режим);
	ОбновитьПутьК1С(ДанныеКоманды);
	
	Возврат ДанныеКоманды
	
КонецФункции

Процедура ОбновитьПутьК1С(Данные)
		
	ДанныеПолученияПути				= Новый Структура;
	ДанныеПолученияПути.Вставить("Версия", Данные.Платформа.Версия1С);
	ДанныеПолученияПути.Вставить("Разрядность", Данные.Разрядность);
	ДанныеПолученияПути.Вставить("РежимЗапуска", Данные.РежимЗапуска);
	
	Данные.Платформа.Путь 	= ПолучитьПутьК1С(ДанныеПолученияПути);

КонецПроцедуры

Функция ПолучитьПутьК1С(Данные) Экспорт 
	
	Путь = "";
	
	Путь_83_64 = "C:\Program Files\1cv8";
	Путь_83_32 = "C:\Program Files (x86)\1cv8";
	Путь_82_32 = "C:\Program Files (x86)\1cv82";
	
	Путь_83_64_common = "C:\Program Files\1cv8\common\1cestart.exe";
	Путь_83_32_common = "C:\Program Files (x86)\1cv8\common\1cestart.exe";
	Путь_82_32_common = "C:\Program Files (x86)\1cv82\common\1cestart.exe";	
	
	МассивКаталогов = Новый Массив;
	МассивКаталогов.Добавить(Путь_83_64);
	МассивКаталогов.Добавить(Путь_83_32);
	МассивКаталогов.Добавить(Путь_82_32);
	
	МассивПутей 		= Новый Массив;
	МассивПутейCommon 	= Новый Массив;
	
	//добавляем каталоги
	Для Каждого Каталог Из МассивКаталогов Цикл 
		
		МассивВерсий = НайтиФайлы(Каталог, "1cv8.exe", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПутей, МассивВерсий); 
		
	КонецЦикла;
	
	//фильтруем по версии
	МассивПутейФильтр = Новый Массив;
	
	Если ЗначениеЗаполнено(Данные.Версия) Тогда 
		
		Для Каждого Файл Из МассивПутей Цикл 
			Если СтрНайти(Файл.Путь, Данные.Версия) > 0 Тогда 
				МассивПутейФильтр.Добавить(Файл);				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	МассивПутей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПутей, МассивПутейФильтр); 

	//фильтруем по разрядность
	МассивПутейФильтр = Новый Массив;
	
	Если Данные.Разрядность = ПредопределенноеЗначение("Перечисление.Ар_Разрядность.x64") Тогда 
		
		МассивПоРазрядности = Новый Массив;
		МассивПоРазрядности.Добавить(Путь_83_64);
		
		МассивПутейCommonФильтр = Новый Массив;
		МассивПутейCommonФильтр.Добавить(Путь_83_64_common);
		
	ИначеЕсли Данные.Разрядность = ПредопределенноеЗначение("Перечисление.Ар_Разрядность.x86") Тогда 
		
		МассивПоРазрядности = Новый Массив;
		МассивПоРазрядности.Добавить(Путь_83_32);
		МассивПоРазрядности.Добавить(Путь_82_32);
		
		МассивПутейCommonФильтр = Новый Массив;
		МассивПутейCommonФильтр.Добавить(Путь_83_32_common);
		МассивПутейCommonФильтр.Добавить(Путь_82_32_common);
		
	ИначеЕсли Данные.Разрядность = ПредопределенноеЗначение("Перечисление.Ар_Разрядность.x64_Приоритет") Тогда 
		
		МассивПоРазрядности = Новый Массив;
		МассивПоРазрядности.Добавить(Путь_83_64);
		МассивПоРазрядности.Добавить(Путь_83_32);
		МассивПоРазрядности.Добавить(Путь_82_32);
		
		МассивПутейCommonФильтр = Новый Массив;
		МассивПутейCommonФильтр.Добавить(Путь_83_64_common);
		МассивПутейCommonФильтр.Добавить(Путь_83_32_common);
		МассивПутейCommonФильтр.Добавить(Путь_82_32_common);
		
	ИначеЕсли Данные.Разрядность = ПредопределенноеЗначение("Перечисление.Ар_Разрядность.x86_Приоритет") Тогда 
		
		МассивПоРазрядности = Новый Массив;
		МассивПоРазрядности.Добавить(Путь_83_32);
		МассивПоРазрядности.Добавить(Путь_82_32);
		МассивПоРазрядности.Добавить(Путь_83_64);
		
		МассивПутейCommonФильтр = Новый Массив;
		МассивПутейCommonФильтр.Добавить(Путь_83_32_common);
		МассивПутейCommonФильтр.Добавить(Путь_82_32_common);
		МассивПутейCommonФильтр.Добавить(Путь_83_64_common);
		
	КонецЕсли;
	
	Для Каждого ПутьПоРазрядности Из МассивПоРазрядности Цикл 
		Для Каждого Файл Из МассивПутей Цикл 
			Если СтрНайти(Файл.Путь, ПутьПоРазрядности) > 0 Тогда 
				МассивПутейФильтр.Добавить(Файл);				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ПутьПоРазрядности Из МассивПутейCommonФильтр Цикл 
		
		Файл = Новый Файл(ПутьПоРазрядности);
		
		Если Файл.Существует() Тогда 
			МассивПутейCommon.Добавить(Файл);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивПутей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПутей, МассивПутейФильтр); 
	
	Источник 				= Новый Массив;

	Если МассивПутей.Количество() = 1 Тогда 
		Источник = МассивПутей;
	Иначе 
		Источник = МассивПутейCommon;
	КонецЕсли;
	
	Если Источник.Количество() > 0 Тогда 
		Путь = Источник[0].ПолноеИмя; 	
	КонецЕсли;
	
	Возврат Путь
	
КонецФункции

#КонецОбласти

#Область Кластер

Функция ПолучитьСписокДоступныхОперацийКластера() Экспорт 
	
	Структура = Новый Структура();
	Структура.Вставить("ОткрытьФормуСвойствБлокировокИнфомационнойБазы"				, "ОткрытьФормуСвойствБлокировокИнфомационнойБазы");
	
	Структура.Вставить("УстановитьБлокировкуРегламентныхЗаданий"					, "УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы");
	Структура.Вставить("СнятьБлокировкуРегламентныхЗаданий"							, "СнятьБлокировкуРегламентныхЗаданийИнформационнойБазы");
	
	Структура.Вставить("УстановитьБлокировкуСеансов"								, "УстановитьБлокировкуСеансов");
	Структура.Вставить("СнятьБлокировкуСеансов"										, "СнятьБлокировкуСеансов");
	
	Структура.Вставить("УстановитьБлокировкуСеансовИЗаданий"						, "УстановитьБлокировкуСеансовИЗаданий");
	Структура.Вставить("СнятьБлокировкуСеансовИЗаданий"								, "СнятьБлокировкуСеансовИЗаданий");
	
	Структура.Вставить("СеансыИнформационнойБазы"									, "СеансыИнформационнойБазы");
	Структура.Вставить("УдалитьСеансыИнформационнойБазы"							, "УдалитьСеансыИнформационнойБазы");
	
	Структура.Вставить("СоединенияСИнформационнойБазой"								, "СоединенияСИнформационнойБазой");
	Структура.Вставить("РазорватьСоединенияСИнформационнойБазой"					, "РазорватьСоединенияСИнформационнойБазой");

	
	Возврат Структура
	
КонецФункции

Функция ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, Операция) Экспорт 
	
	Параметры	= ПолучитьСохраненныеПараметрыФормы(Форма, ИнформационнаяБаза);
	
	Если Параметры = Неопределено Тогда 	
		Параметры 	= Ар_ИнформационныеБазыВызовСервера.ПолучитьПараметрыКластера(ИнформационнаяБаза);
	КонецЕсли;
	
	Если Параметры.ОтказКластера
		И ЗначениеЗаполнено(Параметры.ОшибкаКластера)
		И СтрНайти(Параметры.ОшибкаКластера, "Администратор кластера не аутентифицирован") > 0 Тогда
		
		ПараметрыОткрытия 		= Новый Структура("Заголовок", "Аутентификация кластера");
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Параметры", Параметры);
		ДополнительныеПараметры.Вставить("Операция", Операция);
		
		ОткрытьФорму("ОбщаяФорма.Ар_ФормаАутентификации", ПараметрыОткрытия, Форма,,,, Новый ОписаниеОповещения("ПолучитьПараметрыКластераЗавершение", Ар_ИнформационныеБазыКлиент, ДополнительныеПараметры), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе 
		ПоказатьОшибкаКластера(Параметры);
	КонецЕсли;
	
	СохранитьНастройкиПараметровВФорме(Форма, ИнформационнаяБаза,Параметры);
	
	Возврат Параметры
	
КонецФункции

Процедура ПолучитьПараметрыКластераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 

		ДополнительныеДанные 	= Новый Структура("ИмяАдминистратораКластера, ПарольАдминистратораКластера", Результат.Логин, Результат.Пароль);
		Параметры 				= Ар_ИнформационныеБазыВызовСервера.ПолучитьПараметрыКластера(ДополнительныеПараметры.ИнформационнаяБаза, ДополнительныеДанные);
		
		СохранитьНастройкиПараметровВФорме(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		
		ПоказатьОшибкаКластера(Параметры);
		
		Если ДополнительныеПараметры.Операция = "ОткрытьФормуСвойствБлокировокИнфомационнойБазы" Тогда 
			ОткрытьФормуСвойствБлокировокИнфомационнойБазы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы" Тогда 
			УстановитьБлокировкуРегламентныхЗаданий(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "СнятьБлокировкуРегламентныхЗаданийИнформационнойБазы" Тогда 
			СнятьБлокировкуРегламентныхЗаданий(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "УстановитьБлокировкуСеансов" Тогда 
			УстановитьБлокировкуСеансов2(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "СнятьБлокировкуСеансов" Тогда 
			СнятьБлокировкуСеансов(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "УстановитьБлокировкуСеансовИЗаданий" Тогда 
			УстановитьБлокировкуСеансовИЗаданий(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "СнятьБлокировкуСеансовИЗаданий" Тогда 
			СнятьБлокировкуСеансовИЗаданий(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "СеансыИнформационнойБазы" Тогда 
			СеансыИнформационнойБазы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "УдалитьСеансыИнформационнойБазы" Тогда 
			УдалитьСеансыИнформационнойБазы(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "СоединенияСИнформационнойБазой" Тогда 
			СоединенияСИнформационнойБазой(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		ИначеЕсли ДополнительныеПараметры.Операция = "РазорватьСоединенияСИнформационнойБазой" Тогда 
			РазорватьСоединенияСИнформационнойБазой(ДополнительныеПараметры.Форма, ДополнительныеПараметры.ИнформационнаяБаза, Параметры);
		КонецЕсли;
		
	Иначе 
		ПоказатьОшибкаКластера(ДополнительныеПараметры.Параметры);
	КонецЕсли;

КонецПроцедуры

Процедура ПоказатьОшибкаКластера(Параметры)
	
	Если Параметры.ОтказКластера
		И ЗначениеЗаполнено(Параметры.ОшибкаКластера) Тогда
		
		ПоказатьПредупреждение(, Параметры.ОшибкаКластера,, "Внимание");
		
	КонецЕсли;
	
	Если Параметры.ОтказИБ
		И ЗначениеЗаполнено(Параметры.ОшибкаИБ)
		И Параметры.ОшибкаИБ <> Параметры.ОшибкаКластера Тогда
		
		ПоказатьПредупреждение(, Параметры.ОшибкаИБ,, "Внимание");
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСохраненныеПараметрыФормы(Форма, ИнформационнаяБаза)
	
	Параметры 	= Неопределено;
	Ключ 		= "СохраненныеНастройки";
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Ключ)
		И ТипЗнч(Форма[Ключ]) = Тип("Структура") Тогда 
		
		ДанныеКонфигурации		= Ар_ИнформационныеБазыВызовСервера.ПолучитьДанныеКонфигурации(ИнформационнаяБаза);
		СохраненныеНастройки 	= Форма[Ключ];
		Параметры 				= СохраненныеНастройки.СоответствиеПараметровИнформационныхБаз[ИнформационнаяБаза];
		ПараметрыКластера		= СохраненныеНастройки.СоответствияПараметровКластера[ДанныеКонфигурации.КластерСерверов];
		
		Если Параметры = Неопределено
			И ПараметрыКластера <> Неопределено Тогда 
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ПараметрыКластера", ПараметрыКластера);
			
			Параметры = Ар_ИнформационныеБазыВызовСервера.ПолучитьПараметрыКластера(ИнформационнаяБаза, ДополнительныеПараметры);
			
		ИначеЕсли Параметры <> Неопределено
			И ПараметрыКластера <> Неопределено Тогда
			Параметры.Вставить("ПараметрыКластера", ПараметрыКластера);	
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Параметры
	
КонецФункции

Процедура СохранитьНастройкиПараметровВФорме(Форма, ИнформационнаяБаза, Параметры)
	
	Ключ 		= "СохраненныеНастройки";
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Ключ)
		И ТипЗнч(Форма[Ключ]) = Тип("Структура") Тогда 
		
		СохраненныеНастройки 	= Форма[Ключ];
		
		Если Не Параметры.Отказ Тогда 
			
			СохраненныеНастройки.СоответствиеПараметровИнформационныхБаз[ИнформационнаяБаза] = Параметры;
			
			Если СохраненныеНастройки.СоответствияПараметровКластера[Параметры.ПараметрыКластера.АдресАгентаСервера] = Неопределено
				Или ЗначениеЗаполнено(Параметры.ПараметрыКластера.ИмяАдминистратораКластера) Тогда 
				СохраненныеНастройки.СоответствияПараметровКластера[Параметры.ПараметрыКластера.АдресАгентаСервера] = Параметры.ПараметрыКластера;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуСвойствБлокировокИнфомационнойБазы(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.ОткрытьФормуСвойствБлокировокИнфомационнойБазы);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда 
		
		Данные = Ар_ИнформационныеБазыВызовСервера.СвойстваБлокировокИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ);
		Данные.Вставить("ПараметрыБлокировки", Параметры);
				
		ОткрытьФорму("Справочник.Ар_ИнформационныеБазы.Форма.Кластер_СвойстваБлокировокИнформационнойБазы", Данные, Форма, ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировкуРегламентныхЗаданий(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.УстановитьБлокировкуРегламентныхЗаданий);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда 
		Ар_ИнформационныеБазыВызовСервера.УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьБлокировкуРегламентныхЗаданий(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.СнятьБлокировкуРегламентныхЗаданий);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда 
		Ар_ИнформационныеБазыВызовСервера.УстановитьБлокировкуРегламентныхЗаданийИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировкуСеансов2(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.УстановитьБлокировкуСеансовИЗаданий);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда
		
		Данные 						= Ар_ИнформационныеБазыВызовСервера.СвойстваБлокировокИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ);
		Данные.БлокировкаСеансов 	= Истина;
		
		Ар_ИнформационныеБазыВызовСервера.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьБлокировкуСеансов(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.УстановитьБлокировкуСеансовИЗаданий);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда
		
		Данные 						= Ар_ИнформационныеБазыВызовСервера.СвойстваБлокировокИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ);
		Данные.БлокировкаСеансов 	= Ложь;
		
		Ар_ИнформационныеБазыВызовСервера.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьБлокировкуСеансовИЗаданий(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.УстановитьБлокировкуСеансовИЗаданий);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда
		
		Данные 									= Ар_ИнформационныеБазыВызовСервера.СвойстваБлокировокИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ);
		Данные.БлокировкаРегламентныхЗаданий 	= Истина;
		Данные.БлокировкаСеансов 				= Истина;
		
		Ар_ИнформационныеБазыВызовСервера.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьБлокировкуСеансовИЗаданий(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.СнятьБлокировкуСеансовИЗаданий);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда
		
		Данные 									= Ар_ИнформационныеБазыВызовСервера.СвойстваБлокировокИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ);
		Данные.БлокировкаРегламентныхЗаданий 	= Ложь;
		Данные.БлокировкаСеансов 				= Ложь;
		
		Ар_ИнформационныеБазыВызовСервера.УстановитьБлокировкуСеансовИЗаданийИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СеансыИнформационнойБазы(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт
	
	ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
	
	Если Параметры = Неопределено Тогда 
		
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.СеансыИнформационнойБазы);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда
		
		Сеансы									= Ар_ИнформационныеБазыВызовСервера.СеансыИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ);
		
		ПараметрыОткрытия 						= Новый Структура();
		ПараметрыОткрытия.Вставить("АдресПроизвольныхДанных", ПоместитьВоВременноеХранилище(Сеансы));
		ПараметрыОткрытия.Вставить("ПараметрыИБ", Параметры);
		ПараметрыОткрытия.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
		ПараметрыОткрытия.Вставить("Операция", ДоступныеОперации.СеансыИнформационнойБазы);
		ПараметрыОткрытия.Вставить("Заголовок", "Сеансы");
		
		ОткрытьФорму("Справочник.Ар_ИнформационныеБазы.Форма.Кластер_ПроизвольныеДанные", ПараметрыОткрытия, Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСеансыИнформационнойБазы(Форма, ИнформационнаяБаза, Параметры = Неопределено, Фильтр = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.УдалитьСеансыИнформационнойБазы);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда
		
		Ар_ИнформационныеБазыВызовСервера.УдалитьСеансыИнформационнойБазы(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоединенияСИнформационнойБазой(Форма, ИнформационнаяБаза, Параметры = Неопределено) Экспорт
	
	ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
	
	Если Параметры = Неопределено Тогда 
		
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.СоединенияСИнформационнойБазой);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда
		
		Соединения			= Ар_ИнформационныеБазыВызовСервера.СоединенияСИнформационнойБазой(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ);
		
		ПараметрыОткрытия 	= Новый Структура();
		ПараметрыОткрытия.Вставить("АдресПроизвольныхДанных", ПоместитьВоВременноеХранилище(Соединения));
		ПараметрыОткрытия.Вставить("ПараметрыИБ", Параметры);
		ПараметрыОткрытия.Вставить("ИнформационнаяБаза", ИнформационнаяБаза);
		ПараметрыОткрытия.Вставить("Операция", ДоступныеОперации.СоединенияСИнформационнойБазой);
		ПараметрыОткрытия.Вставить("Заголовок", "Соединения");
		
		ОткрытьФорму("Справочник.Ар_ИнформационныеБазы.Форма.Кластер_ПроизвольныеДанные", ПараметрыОткрытия, Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РазорватьСоединенияСИнформационнойБазой(Форма, ИнформационнаяБаза, Параметры = Неопределено, Фильтр = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда 
		
		ДоступныеОперации 	= ПолучитьСписокДоступныхОперацийКластера(); 
		Параметры 			= ПолучитьПараметрыКластера(Форма, ИнформационнаяБаза, ДоступныеОперации.РазорватьСоединенияСИнформационнойБазой);
		
	КонецЕсли;
	
	Если Не Параметры.Отказ Тогда
		
		Ар_ИнформационныеБазыВызовСервера.РазорватьСоединенияСИнформационнойБазой(Параметры.ПараметрыКластера, Параметры.ПараметрыИБ, Фильтр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзмененияФайлаБазы

Процедура ОбновитьФайлСпискаБазПоИнформационнойБазе(ИнформационнаяБаза) Экспорт 
	
	ДанныеКоманды 	= Ар_ИнформационныеБазыВызовСервера.ПолучитьДанныеФормированияКоманды(ИнформационнаяБаза);
	Файл 			= Новый Файл(ДанныеКоманды.ПутьКФайлуСписка);
	ФайлИзменен		= Ложь;
	
	Если ДанныеКоманды.ЛичныйФайл
		И Файл.Существует() Тогда 
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ДанныеКоманды.ПутьКФайлуСписка);
		
		АдресаСтрок				= ПолучитьАдресаСтрокИнформационнойБазыПоФайлуСписка(ТекстовыйДокумент, ДанныеКоманды.УникальныйИдентификатор);
		ОбновитьФайлСпискаБазПоДаннымИнформационнойБазы(ТекстовыйДокумент, АдресаСтрок, ДанныеКоманды, ФайлИзменен);
		
		Если ФайлИзменен Тогда 
			ТекстовыйДокумент.Записать(ДанныеКоманды.ПутьКФайлуСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАдресаСтрокИнформационнойБазыПоФайлуСписка(ТекстовыйДокумент, УникальныйИдентификатор)
	
	Данные = Новый Структура();
	Данные.Вставить("Найдена", Ложь);
	Данные.Вставить("Base");
		
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Начало			= 0;
	Конец			= 0;
	
	Для Счетчик = 1 По КоличествоСтрок Цикл 
		
		Строка = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
		
		Если Строка = СтрШаблон("ID=%1", Строка(УникальныйИдентификатор)) > 0 Тогда 
			
			Данные.Найдена 	= Истина;
			Начало 			= Счетчик - 2;
			
		ИначеЕсли Данные.Найдена
			И СтрНайти(Строка, "[") > 0
			И СтрНайти(Строка, "]") > 0
			И Конец = 0 Тогда 
			
			Конец = Счетчик;
			
		КонецЕсли;
	КонецЦикла;
	
	Если Данные.Найдена
		И Конец = 0 Тогда //если это последняя база в файле
			Конец = КоличествоСтрок;
	КонецЕсли;
	
	Если Данные.Найдена Тогда 
		
		Для Счетчик = 1 По Конец - 1 Цикл 
			
			Строка = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
			
			Если СтрНайти(Строка, "[") > 0
				И СтрНайти(Строка, "]") > 0
				И Конец = 0 Тогда 
				
				Начало = Счетчик;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Данные.Найдена Тогда 
		
		Данные.Base = Начало;
		
		Для Счетчик = Начало + 1 По Конец - 1 Цикл 
			
			Строка 			= ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
			НомерЗнакаРавно = СтрНайти(Строка, "=");
			Ключ			= Лев(Строка, НомерЗнакаРавно - 1);
			
			Данные.Вставить(Ключ, Счетчик);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные
	
КонецФункции

Процедура ОбновитьФайлСпискаБазПоДаннымИнформационнойБазы(ТекстовыйДокумент, АдресаСтрок, ДанныеКоманды, ФайлИзменен)
	
	//App
	Если АдресаСтрок.Найдена
		И АдресаСтрок.Свойство("App") Тогда 
		
		Строка 				= ТекстовыйДокумент.ПолучитьСтроку(АдресаСтрок.App);
		НомерЗнакаРавно 	= СтрНайти(Строка, "=");
		Значение			= Сред(Строка, НомерЗнакаРавно + 1, СтрДлина(Строка));
		ЗаменяемоеЗначение 	= "";
		
		Если ДанныеКоманды.РежимЗапуска = ПредопределенноеЗначение("Перечисление.Ар_РежимЗапуска.ВыбиратьАвтоматически") Тогда 
			ЗаменяемоеЗначение = "Auto";
		ИначеЕсли ДанныеКоманды.РежимЗапуска = ПредопределенноеЗначение("Перечисление.Ар_РежимЗапуска.ТонкийКлиент") Тогда
			ЗаменяемоеЗначение = "ThinClient";
		ИначеЕсли ДанныеКоманды.РежимЗапуска = ПредопределенноеЗначение("Перечисление.Ар_РежимЗапуска.ТолстыйКлиент") Тогда
			ЗаменяемоеЗначение = "ThickClient";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаменяемоеЗначение)
			И ЗаменяемоеЗначение <> Значение Тогда 
			ФайлИзменен 	= Истина;
			ОбновитьСтрокуФайлаСпискаИнформационныхБаз(ТекстовыйДокумент, АдресаСтрок.App, ЗаменяемоеЗначение);
		КонецЕсли;
		
	ИначеЕсли АдресаСтрок.Найдена
		И Не АдресаСтрок.Свойство("App") Тогда
		Сообщить("Не найдено свойство App в файле баз для данной базы. Файл баз не изменен");	
	КонецЕсли;
	
	//AppArch
	Если АдресаСтрок.Найдена Тогда 
		
		ЗаменяемоеЗначение 	= "";
		
		Если ДанныеКоманды.Разрядность = ПредопределенноеЗначение("Перечисление.Ар_Разрядность.x86") Тогда
			ЗаменяемоеЗначение = "x86";
		ИначеЕсли ДанныеКоманды.Разрядность = ПредопределенноеЗначение("Перечисление.Ар_Разрядность.x86_Приоритет") Тогда
			ЗаменяемоеЗначение = "x86_prt";
		ИначеЕсли ДанныеКоманды.Разрядность = ПредопределенноеЗначение("Перечисление.Ар_Разрядность.x64") Тогда
			ЗаменяемоеЗначение = "x86_64";
		ИначеЕсли ДанныеКоманды.Разрядность = ПредопределенноеЗначение("Перечисление.Ар_Разрядность.x64_Приоритет") Тогда
			ЗаменяемоеЗначение = "x86_64_prt";
		КонецЕсли;
		
		Если АдресаСтрок.Свойство("AppArch") Тогда 
			
			Строка 				= ТекстовыйДокумент.ПолучитьСтроку(АдресаСтрок.AppArch);
			НомерЗнакаРавно		= СтрНайти(Строка, "=");
			Значение			= Сред(Строка, НомерЗнакаРавно + 1, СтрДлина(Строка));
			
			Если ЗначениеЗаполнено(ЗаменяемоеЗначение)
				И ЗаменяемоеЗначение <> Значение Тогда 
				ФайлИзменен 	= Истина;
				ОбновитьСтрокуФайлаСпискаИнформационныхБаз(ТекстовыйДокумент, АдресаСтрок.AppArch, ЗаменяемоеЗначение);
			КонецЕсли;
			
		ИначеЕсли Не АдресаСтрок.Свойство("AppArch") Тогда
			
			ФайлИзменен 		= Истина;
			МаксимальнаяСтрока 	= 0;
			
			Для Каждого Элемент Из АдресаСтрок Цикл 
				МаксимальнаяСтрока = Макс(МаксимальнаяСтрока, Элемент.Значение);	
			КонецЦикла;
			
			СтрокаВставки = СтрШаблон("AppArch=%1", ЗаменяемоеЗначение);
			ТекстовыйДокумент.ВставитьСтроку(МаксимальнаяСтрока + 1, СтрокаВставки);
			
			АдресаСтрок.Вставить("AppArch", МаксимальнаяСтрока + 1);
			
		КонецЕсли;
	КонецЕсли;
	
	//Version
	Если АдресаСтрок.Найдена
		И АдресаСтрок.Свойство("Version") Тогда
		
		Строка 				= ТекстовыйДокумент.ПолучитьСтроку(АдресаСтрок.Version);
		НомерЗнакаРавно 	= СтрНайти(Строка, "=");
		Значение			= Сред(Строка, НомерЗнакаРавно + 1, СтрДлина(Строка));
		ЗаменяемоеЗначение 	= ДанныеКоманды.Платформа.Версия1С;
		
		Если ЗначениеЗаполнено(ЗаменяемоеЗначение)
			И ЗаменяемоеЗначение <> Значение Тогда 
			ФайлИзменен 	= Истина;
			ОбновитьСтрокуФайлаСпискаИнформационныхБаз(ТекстовыйДокумент, АдресаСтрок.Version, ЗаменяемоеЗначение);
		КонецЕсли;
	ИначеЕсли АдресаСтрок.Найдена
		И Не АдресаСтрок.Свойство("Version") Тогда
		Сообщить("Не найдено свойство Version в файле баз для данной базы. Файл баз не изменен");	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтрокуФайлаСпискаИнформационныхБаз(ТекстовыйДокумент, НомерСтроки, Значение)
	
	Строка 			= ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
	НомерЗнакаРавно = СтрНайти(Строка, "=");
	Строка			= СтрЗаменить(Строка, Сред(Строка, НомерЗнакаРавно + 1, СтрДлина(Строка)), Значение);
	
	ТекстовыйДокумент.ЗаменитьСтроку(НомерСтроки, Строка);
	
КонецПроцедуры

#КонецОбласти
