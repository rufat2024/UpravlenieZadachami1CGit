
 #Область ПрограммныйИнтерфейс
 
Процедура РазобратьМассивФайловНаСервере(ПараметрыЗапуска) Экспорт
	
	Конфигурация  = ПараметрыЗапуска.Конфигурация;
	НаименованиеМодуля = ПараметрыЗапуска.НаименованиеМодуля;
	НаименованиеМетода = ПараметрыЗапуска.НаименованиеМетода;
	АдресВременногоХранилища = ПараметрыЗапуска.АдресСМассивомФайлов; 
	ВидЗагрузки = ПараметрыЗапуска.ВидЗагрузки; 
		
	
	Если Не ЗначениеЗаполнено(Конфигурация) или Не ЗначениеЗаполнено(АдресВременногоХранилища) Тогда
		Возврат;
	КонецЕсли;	

	
	МассивСтруктур  =  ПолучитьИзВременногоХранилища(АдресВременногоХранилища);	
	
	
	Если ВидЗагрузки = 1 Тогда
		Для Каждого ТекСтруктураФайл Из МассивСтруктур Цикл
			ТекТипФайла = ТекСтруктураФайл.РасширениеФайла;
			Если ВРЕГ(ТекТипФайла) = ".XML" Тогда
				ЗаполнитьОбщийМодуль(ТекСтруктураФайл, Конфигурация, ПараметрыЗапуска);
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого ТекСтруктураФайл Из МассивСтруктур Цикл
			ТекТипФайла = ТекСтруктураФайл.РасширениеФайла;
			Если ВРЕГ(ТекТипФайла) = ".BSL" Тогда
				ЗаполнитьЭкпортныеМетодыМодуля(ТекСтруктураФайл, Конфигурация, ПараметрыЗапуска);
			КонецЕсли;	
		КонецЦикла;
	ИначеЕсли	ВидЗагрузки = 2 Тогда
		Для Каждого ТекСтруктураФайл Из МассивСтруктур Цикл
			ТекТипФайла = ТекСтруктураФайл.РасширениеФайла;
			Если ВРЕГ(ТекТипФайла) = ".BSL" Тогда
				ЗаполнитьЭкпортныеМетодыМодуля(ТекСтруктураФайл, Конфигурация, ПараметрыЗапуска);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтруктураФайл Из МассивСтруктур Цикл
			ТекТипФайла = ТекСтруктураФайл.РасширениеФайла;
			Если ВРЕГ(ТекТипФайла) = ".XML" Тогда
				ЗаполнитьМодульОбъектаМД(ТекСтруктураФайл, Конфигурация, ПараметрыЗапуска);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры	

Функция ПолучитьСтруктуруФайлаКонфы() Экспорт
	
	Возврат АМ_РаботаСТекстомПроцедурИФункцийКлиентСервер.ПолучитьСтруктуруФайлаКонфы();
	
КонецФункции

	

#КонецОбласти
 
#Область СправочникОбщиеМодули

Процедура ЗаполнитьОбщийМодуль(СтруктураФайлаКонфы, Конфигурация, ПараметрыЗапуска)
	
	НаименованиеМодуляЗагр = ПараметрыЗапуска.НаименованиеМодуля;
	
	ОбъектМодуля = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(СтруктураФайлаКонфы.ТекстФайла);
	
	СвойстваОбщегоМодуря = Неопределено;
	ЗаполнитьЗначениемXDTO(СвойстваОбщегоМодуря, ОбъектМодуля, "CommonModule/Properties");
	
	Если СвойстваОбщегоМодуря <> Неопределено Тогда
		ИмяМодуля = ""; 
		ЗаполнитьЗначениемXDTO(ИмяМодуля, СвойстваОбщегоМодуря, "Name"); 
	КонецЕсли;	
	
	Если ИмяМодуля <> "" Тогда                   
		Если НаименованиеМодуляЗагр <> "" Тогда
			Если ИмяМодуля <> НаименованиеМодуляЗагр Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;	
		МодульОбъектВЗадачнике = ПолучитьОбщийМодуль(ИмяМодуля, Конфигурация);
	Иначе
		Возврат;
	КонецЕсли;	    
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.Наименование, СвойстваОбщегоМодуря, "Name"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.Глобальный, СвойстваОбщегоМодуря, "Global"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.КлиентУправляемоеПриложение, СвойстваОбщегоМодуря, "ClientManagedApplication"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.ВнешнееСоединение, СвойстваОбщегоМодуря, "ExternalConnection"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.Сервер, СвойстваОбщегоМодуря, "Server"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.КлиентОбычноеПриложение, СвойстваОбщегоМодуря, "ClientOrdinaryApplication"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.ВызовСервера, СвойстваОбщегоМодуря, "ServerCall"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.Привилегированный, СвойстваОбщегоМодуря, "Privileged"); 
	
	ТекстПовтИсп = "";
	
	ЗаполнитьЗначениемXDTO(ТекстПовтИсп, СвойстваОбщегоМодуря, "ReturnValuesReuse"); 
	
	Если ТекстПовтИсп = "DontUse" Тогда
		МодульОбъектВЗадачнике.ПовторноеИспользованиеВозвращаемыхЗначений = Перечисления.АМ_ВидПовторногоИспользованияМодуля.НеИспользовать;	
	ИначеЕсли ТекстПовтИсп = "DuringSession" Тогда	
		МодульОбъектВЗадачнике.ПовторноеИспользованиеВозвращаемыхЗначений = Перечисления.АМ_ВидПовторногоИспользованияМодуля.НаВремяСеанса;		
	Иначе
		МодульОбъектВЗадачнике.ПовторноеИспользованиеВозвращаемыхЗначений = Перечисления.АМ_ВидПовторногоИспользованияМодуля.НаВремяВызова;	
	КонецЕсли;	
	
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.Версия, ОбъектМодуля, "version"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.Комментарий, СвойстваОбщегоМодуря, "Comment/item/content"); 
	ЗаполнитьЗначениемXDTO(МодульОбъектВЗадачнике.Синоним, СвойстваОбщегоМодуря, "Synonym/item/content"); 
	МодульОбъектВЗадачнике.Владелец = Конфигурация;
   	МодульОбъектВЗадачнике.Записать();

	
КонецПроцедуры	

Функция ПолучитьОбщийМодуль(НаименованиеОбщегоМодуля, Конфигурация)
	СсылкаНаМодуль = Справочники.АМ_ОбщиеМодули.НайтиПоНаименованию(НаименованиеОбщегоМодуля,,Конфигурация);
	
	Если Не ЗначениеЗаполнено(СсылкаНаМодуль) Тогда
		ОбщийМодульОбъект = Справочники.АМ_ОбщиеМодули.СоздатьЭлемент();
	Иначе
		ОбщийМодульОбъект = СсылкаНаМодуль.ПолучитьОбъект();
	КонецЕсли;	                                                  
	Возврат ОбщийМодульОбъект;
КонецФункции	

#КонецОбласти 

#Область СправочникМодулиОбъектовМетаданных

Процедура ЗаполнитьМодульОбъектаМД(СтруктураФайлаКонфы, Конфигурация, ПараметрыЗапуска)
	
	НаименованиеМодуляЗагр = ПараметрыЗапуска.НаименованиеМодуля;
	
	Если НаименованиеМодуляЗагр <> "" Тогда
		Если НаименованиеМодуляЗагр <> СтруктураФайлаКонфы.НаименованиеОбъекта Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	МассивМодулейРедактируем = ПолучитьСписокМодулейОбъектовМД(СтруктураФайлаКонфы.НаименованиеТипаОбъекта, СтруктураФайлаКонфы.НаименованиеОбъекта, Конфигурация); 	
	
	ОбъектМодуля = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(СтруктураФайлаКонфы.ТекстФайла);
	
	ИмяОбъектаЛат =  Лев(СтруктураФайлаКонфы.ЗаголовокКаталогаОбъекта, СтрДлина(СтруктураФайлаКонфы.ЗаголовокКаталогаОбъекта)-1);
	
	СвойстваОбщегоМодуля = Неопределено;
	ЗаполнитьЗначениемXDTO(СвойстваОбщегоМодуля, ОбъектМодуля, ИмяОбъектаЛат + "/Properties");                
	СинонимОбъекта = "";
	ЗаполнитьЗначениемXDTO(СинонимОбъекта, СвойстваОбщегоМодуля, "Synonym/item/content"); 
	Если СинонимОбъекта <> "" Тогда
		Для Каждого ТекСсылкаМодуля Из МассивМодулейРедактируем Цикл
			МудульОбъектаОбъ = ТекСсылкаМодуля.ПолучитьОбъект(); 
			МудульОбъектаОбъ.СинонимОбъектаМД  = СинонимОбъекта;
			Попытка
				МудульОбъектаОбъ.Записать();
			Исключение
			КонецПопытки;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

Функция ПолучитьМодульОбъектаМД(ТипОбъекта, ИмяОбъекта, Конфигурация, ТипМодуля, ВВидеСсылки = Истина)
	
	МодульОбъектаМД = Неопределено;
	
	ЗапросПоОбъектам = Новый Запрос;
	ЗапросПоОбъектам.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                         |	АМ_МодулиОбъектовМетаданных.Ссылка КАК Ссылка
	                         |ИЗ
	                         |	Справочник.АМ_МодулиОбъектовМетаданных КАК АМ_МодулиОбъектовМетаданных
	                         |ГДЕ
	                         |	АМ_МодулиОбъектовМетаданных.Владелец = &Владелец
	                         |	И АМ_МодулиОбъектовМетаданных.ТипМодуля = &ТипМодуля
	                         |	И АМ_МодулиОбъектовМетаданных.Наименование = &Наименование
	                         |	И АМ_МодулиОбъектовМетаданных.ТипОбъектаМД = &ТипОбъектаМД
	                         |	И НЕ АМ_МодулиОбъектовМетаданных.ПометкаУдаления";
	ЗапросПоОбъектам.УстановитьПараметр("Владелец", Конфигурация);						 
	ЗапросПоОбъектам.УстановитьПараметр("ТипМодуля", ТипМодуля);						 
	ЗапросПоОбъектам.УстановитьПараметр("Наименование",ИмяОбъекта);						 
	ЗапросПоОбъектам.УстановитьПараметр("ТипОбъектаМД",ТипОбъекта);						 
	
	ВыборкаМодульОб = ЗапросПоОбъектам.Выполнить().Выбрать();
	Если ВыборкаМодульОб.Следующий() Тогда 
		Если ВВидеСсылки Тогда
			МодульОбъектаМД = ВыборкаМодульОб.Ссылка;
		Иначе	
			МодульОбъектаМД = ВыборкаМодульОб.Ссылка.ПолучитьОбъект();
		КонецЕсли;	
	Иначе	
		МодульОбъектаМД = Справочники.АМ_МодулиОбъектовМетаданных.СоздатьЭлемент();
		МодульОбъектаМД.Владелец = Конфигурация;
		МодульОбъектаМД.Наименование = ИмяОбъекта;
		МодульОбъектаМД.ТипОбъектаМД = ТипОбъекта;
		МодульОбъектаМД.ТипМодуля = ТипМодуля;
		Если ВВидеСсылки Тогда        
			Попытка
				МодульОбъектаМД.Записать();	   
				МодульОбъектаМД = МодульОбъектаМД.Ссылка; 
			Исключение   
				МодульОбъектаМД = Неопределено;
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат МодульОбъектаМД;
	
КонецФункции	

Функция ПолучитьСписокМодулейОбъектовМД(ТипОбъекта, ИмяОбъекта, Конфигурация)
	ЗапросПоОбъектам = Новый Запрос;
	ЗапросПоОбъектам.Текст = "ВЫБРАТЬ 
	                         |	АМ_МодулиОбъектовМетаданных.Ссылка КАК МодульСсылка
	                         |ИЗ
	                         |	Справочник.АМ_МодулиОбъектовМетаданных КАК АМ_МодулиОбъектовМетаданных
	                         |ГДЕ
	                         |	АМ_МодулиОбъектовМетаданных.Владелец = &Владелец
	                         |	И АМ_МодулиОбъектовМетаданных.Наименование = &Наименование
	                         |	И АМ_МодулиОбъектовМетаданных.ТипОбъектаМД = &ТипОбъектаМД
	                         |	И НЕ АМ_МодулиОбъектовМетаданных.ПометкаУдаления";
	ЗапросПоОбъектам.УстановитьПараметр("Владелец", Конфигурация);						 
	ЗапросПоОбъектам.УстановитьПараметр("Наименование",ИмяОбъекта);						 
	ЗапросПоОбъектам.УстановитьПараметр("ТипОбъектаМД",ТипОбъекта);						 
	
	МассивМодулей = ЗапросПоОбъектам.Выполнить().Выгрузить().ВыгрузитьКолонку("МодульСсылка");	
	
	Возврат МассивМодулей;
	
КонецФункции	

#КонецОбласти

#Область СправочникПроцедурыИФункции

Процедура ЗаполнитьЭкпортныеМетодыМодуля(СтруктураФайлаКонфы, Конфигурация, ПараметрыЗапуска)  
	
	НаименованиеМодуляЗагр = ПараметрыЗапуска.НаименованиеМодуля;
	НаименованиеМетодаЗагр = ПараметрыЗапуска.НаименованиеМетода;
	
	ВидЗагрузки = ПараметрыЗапуска.ВидЗагрузки;
	
    ИмяОбщегоМодуля = "";
	Если ВидЗагрузки = 1 Тогда
		МассивСтрокПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураФайлаКонфы.КаталогФайла, ПолучитьРазделительПутиКлиента());
		КоличествоЭлементов = МассивСтрокПути.Количество();
		Если КоличествоЭлементов > 2 Тогда
			ИмяОбщегоМодуля = МассивСтрокПути[КоличествоЭлементов-3];
		КонецЕсли;	
	ИначеЕсли ВидЗагрузки = 2 Тогда
		ИмяОбщегоМодуля = СтруктураФайлаКонфы.НаименованиеОбъекта; 	
	КонецЕсли;	
	
	МассивСтрокПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураФайлаКонфы.КаталогФайла, ПолучитьРазделительПутиКлиента());
	КоличествоЭлементов = МассивСтрокПути.Количество();
	Если ИмяОбщегоМодуля <> "" Тогда
		
		Если НаименованиеМодуляЗагр <> "" Тогда
			Если ИмяОбщегоМодуля <> НаименованиеМодуляЗагр Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		
		Если ВидЗагрузки = 1 Тогда
			ОбщийМодульСправочник = Справочники.АМ_ОбщиеМодули.НайтиПоНаименованию(ИмяОбщегоМодуля,,Конфигурация);
		ИначеЕсли ВидЗагрузки = 2 Тогда 
			ТипМодуля = Перечисления.АМ_ТипыМодулейОбъектовМетаданных.Объекта;
			Если СтруктураФайлаКонфы.ИмяФайла = "ObjectModule" Тогда
				ТипМодуля = Перечисления.АМ_ТипыМодулейОбъектовМетаданных.Объекта;
			Иначе	
				ТипМодуля = Перечисления.АМ_ТипыМодулейОбъектовМетаданных.Менеджера;
			КонецЕсли;	
			ОбщийМодульСправочник =  ПолучитьМодульОбъектаМД(СтруктураФайлаКонфы.НаименованиеТипаОбъекта, СтруктураФайлаКонфы.НаименованиеОбъекта, Конфигурация, ТипМодуля); 
		Иначе
			Возврат;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ОбщийМодульСправочник) Тогда
			ТекстМДок = Новый ТекстовыйДокумент;
			ТекстМДок.УстановитьТекст(СтруктураФайлаКонфы.ТекстФайла);
			КоличествоСтрокТекста = ТекстМДок.КоличествоСтрок();
			ОбластьНачалась = Ложь;
			ТекИмяОбласти = "";
			
			МетодНачался = Ложь;
			КонецНаименованияФункции = Ложь;
			ТекстМетода = "";
			ТекстМетодаТело = "";
			
			КомментарииМеждуМетодами = Новый Массив;
			
			Для ТекНомерСтроки = 1  По КоличествоСтрокТекста Цикл
				ТекСтрокаДок = ТекстМДок.ПолучитьСтроку(ТекНомерСтроки); 
				ПервоеСловоВСтроке = "";
				//МассивСтрокВСтроке = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтрокаДок, " ", Истина);
				//Если МассивСтрокВСтроке.Количество() <> 0 Тогда
				//	ПервоеСловоВСтроке = СокрЛП(МассивСтрокВСтроке[0]);
				//Иначе     
					
				//КонецЕсли; 
				ПервоеСловоВСтроке = НайтиСледующееСлово(ТекСтрокаДок,1);
				ПозСлова = СтрНайти(ТекСтрокаДок, ПервоеСловоВСтроке);
				ПозСлэшей = СтрНайти(ТекСтрокаДок, "//");
				
				Если ПозСлэшей <> 0 и ПозСлэшей < ПозСлова Тогда 
					ПервоеСловоВСтроке = "";
				КонецЕсли;	
				
				
				Если МетодНачался  и КонецНаименованияФункции  и не (ВРег(ПервоеСловоВСтроке) = Врег("КонецФункции") или Врег(ПервоеСловоВСтроке) = Врег("КонецПроцедуры"))Тогда
					ТекстМетодаТело = ТекстМетодаТело + ?(ТекстМетодаТело = "","",Символы.ПС) +  ТекСтрокаДок;	
				КонецЕсли;

				
				Если СтрНайти(Врег(ТекСтрокаДок), Врег("#Область")) <> 0 Тогда
					ОбластьНачалась = Истина;
					ТекИмяОбласти = СтрЗаменить(ТекСтрокаДок, "#Область ","");
				КонецЕсли;	
				
					
				
				Если Врег(ПервоеСловоВСтроке) = Врег("Функция") или ВРЕГ(ПервоеСловоВСтроке) = ВРег("Процедура") Тогда
					МетодНачался = Истина;
					КонецНаименованияФункции = Ложь;
				КонецЕсли;
				
				//Если НЕ МетодНачался и СтрНайти(ТекСтрокаДок, "//") <> 0  Тогда
				Если НЕ МетодНачался Тогда
					КомментарииМеждуМетодами.Добавить(ТекСтрокаДок);
				КонецЕсли;
				
				Если МетодНачался и СтрНайти(ТекСтрокаДок, ")") <> 0 и НЕ КонецНаименованияФункции Тогда
					ТекстМетода = ТекстМетода + ТекСтрокаДок;
					КонецНаименованияФункции = Истина;
				КонецЕсли;	
				
					
				
				Если МетодНачался и (Врег(ПервоеСловоВСтроке) = Врег("КонецФункции") или Врег(ПервоеСловоВСтроке) = Врег("КонецПроцедуры")) Тогда
					
					СтруктураЗаполненияМетода =  ПолучитьСтруктуруЗаполненияМетода();
					СтруктураЗаполненияМетода.СтрокаМетода = ТекстМетода;
					СтруктураЗаполненияМетода.КомментарииПередМетодом = КомментарииМеждуМетодами;
					СтруктураЗаполненияМетода.ТекОбласть = ТекИмяОбласти;
					СтруктураЗаполненияМетода.ТекстМетодаТело = ТекстМетодаТело;
					СтруктураЗаполненияМетода.МодульСправочник = ОбщийМодульСправочник;
					
					
					Если НаименованиеМетодаЗагр <> "" Тогда
						Если  СтрНайти(ТекстМетода, НаименованиеМетодаЗагр) <> 0  Тогда
							ЗаполнитьЭкспортныйМетод(СтруктураЗаполненияМетода);
						КонецЕсли;
					Иначе
						ЗаполнитьЭкспортныйМетод(СтруктураЗаполненияМетода);
					КонецЕсли;
					
					
					МетодНачался = Ложь;
					ТекстМетода = "";  
					ТекстМетодаТело = "";
					КомментарииМеждуМетодами = Новый Массив;
				КонецЕсли;	
				
				Если МетодНачался и НЕ КонецНаименованияФункции	Тогда
					ТекстМетода = ТекстМетода + ТекСтрокаДок;
				КонецЕсли;
				
								
				Если  ОбластьНачалась и СтрНайти(Врег(ТекСтрокаДок), Врег("#КонецОбласти")) <> 0 Тогда
					ОбластьНачалась = Ложь;
					ТекИмяОбласти = "";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьСтруктуруЗаполненияМетода()
	СтруктураЗаполненияМетода = Новый Структура; 
	СтруктураЗаполненияМетода.Вставить("СтрокаМетода","");
	СтруктураЗаполненияМетода.Вставить("КомментарииПередМетодом","");
	СтруктураЗаполненияМетода.Вставить("ТекОбласть","");
	СтруктураЗаполненияМетода.Вставить("ТекстМетодаТело","");
	СтруктураЗаполненияМетода.Вставить("МодульСправочник",Справочники.АМ_ОбщиеМодули.ПустаяСсылка());
	
	Возврат СтруктураЗаполненияМетода;
КонецФункции	

Процедура ЗаполнитьЭкспортныйМетод(СтруктураЗаполненияМетода)
	
	СтрокаМетода = СтруктураЗаполненияМетода.СтрокаМетода;
	КомментарииПередМетодом = СтруктураЗаполненияМетода.КомментарииПередМетодом;
	ТекОбласть = СтруктураЗаполненияМетода.ТекОбласть;
	ТекстМетодаТело = СтруктураЗаполненияМетода.ТекстМетодаТело;
	МодульСправочник = СтруктураЗаполненияМетода.МодульСправочник;
	
	
	Если СтрНайти(Врег(СтрокаМетода), Врег("Экспорт")) <> 0 Тогда
		
		ПозицияСкобкиОткр = СтрНайти(СтрокаМетода, "(");
		ПозицияСкобкиЗакр = СтрНайти(СтрокаМетода, ")", НаправлениеПоиска.СКонца);
		
		СтрокаНачалаМетода = Сред(СтрокаМетода,1, ПозицияСкобкиОткр - 1);
		СтрокаПараметров = Сред(СтрокаМетода,ПозицияСкобкиОткр + 1, ПозицияСкобкиЗакр - ПозицияСкобкиОткр - 1); 
		
		МассивСтрокиМетода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаНачалаМетода, " ", Истина);
		
		КоличествоСтрокКомментария = КомментарииПередМетодом.Количество();
		СчетчикСтрок = КоличествоСтрокКомментария - 1;
		ДальшеНеОтноситсяКМетоду = Ложь;
		КомментНачался = Ложь;
		
		Пока СчетчикСтрок >= 0 и Не ДальшеНеОтноситсяКМетоду Цикл
			
			СтрокаКоммСКонца = КомментарииПередМетодом[СчетчикСтрок];
			ЕстьКоммент = Ложь;
			Если Найти(СтрокаКоммСКонца,"//") <> 0 Тогда
				ЕстьКоммент = Истина;
			КонецЕсли;	
			
			Если Найти(СтрокаКоммСКонца,"///") <> 0 Тогда
				ЕстьКоммент = Ложь;
			КонецЕсли;
			
			Если Не КомментНачался и ЕстьКоммент Тогда
				КомментНачался = Истина;
			КонецЕсли;	
			Если КомментНачался и Не ЕстьКоммент  Тогда
				ДальшеНеОтноситсяКМетоду = Истина;
			КонецЕсли;	
			СчетчикСтрок = СчетчикСтрок - 1;	
		КонецЦикла;
		Если ДальшеНеОтноситсяКМетоду Тогда
			СчетчикСтрок = СчетчикСтрок + 1	
		КонецЕсли;	
		
		КомментМетода = "";
		Для Сч = СчетчикСтрок + 1 По КоличествоСтрокКомментария - 1 Цикл
			КомментМетода = КомментМетода + ?(КомментМетода = "", "", Символы.ПС) +  КомментарииПередМетодом[Сч];
		КонецЦикла;	
		
		Если МассивСтрокиМетода.Количество() = 2 Тогда
		    ТипМетодаСтр = СокрЛП(МассивСтрокиМетода[0]);
			ИмяМетода = СокрЛП(МассивСтрокиМетода[1]); 
			ВидМетодаТек = Неопределено;
			Если ВРЕГ(ТипМетодаСтр) = "ФУНКЦИЯ" Тогда
				ВидМетодаТек = Перечисления.АМ_ВидыМетодов.Функция;
			Иначе     
				ВидМетодаТек = Перечисления.АМ_ВидыМетодов.Процедура;
			КонецЕсли;	
		    //Здесь запись метода
			//МетодОбъект = ПолучитьМетодОбъект(ИмяМетода, МодульСправочник); 
			СтруктураМетода =Новый Структура;                        
			СтруктураМетода.Вставить("Наименование", ИмяМетода);
			СтруктураМетода.Вставить("ТекстМодуля", ТекстМетодаТело);
			СтруктураМетода.Вставить("ТекстКомментария", КомментМетода);
			
			СтруктураКомментария = РазложитьСтруктуруКомментария(КомментМетода);
			
			СтруктураМетода.Вставить("ВидМетода", ВидМетодаТек);
			СтруктураМетода.Вставить("Экспортная", Истина);
			СтруктураМетода.Вставить("НеТиповая", Ложь);
			СтруктураМетода.Вставить("КомментарийВручную", Ложь);
			СтруктураМетода.Вставить("Автор", Справочники.Пользователи.ПустаяСсылка());
			СтруктураМетода.Вставить("ТолькоВКонтексте", Неопределено);
			СтруктураМетода.Вставить("ОбластьМодуля", ТекОбласть);
			
			
			
			СтруктураМетода.Вставить("ОбщееОписание", СтруктураКомментария.ОсновноеОписаниеМетода);
			СтруктураМетода.Вставить("Устарела", СтруктураКомментария.МетодУстарел);
			СтруктураМетода.Вставить("Важно", СтруктураКомментария.ТекстВажно);
			СтруктураМетода.Вставить("Пример", СтруктураКомментария.ТекстПример);
			СтруктураМетода.Вставить("МодульВладелец", МодульСправочник);
			
			МассивПараметровМетода = Новый Массив;
			
			//Здесь Формирование Параметров метода с подстановкой описаний
			МассивСтрокПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, ",",Истина);
			Если МассивСтрокПараметров.Количество() <> 0 Тогда
				СчП = 1;
				Для	Каждого ТекПараметр Из МассивСтрокПараметров Цикл 
					ЭтоОбязательныйПараметр = Истина;
					ЗначениеПоУмолчанию = Неопределено;
					ИмяПараметра = СокрЛП(ТекПараметр);
					Если СтрНайти(ТекПараметр, "=") <> 0 Тогда
						ЭтоОбязательныйПараметр	= Ложь;
						МассивПараметрЗначение = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекПараметр,"=");
						Если МассивПараметрЗначение.Количество() = 2 Тогда
							ИмяПараметра = СокрЛП(МассивПараметрЗначение[0]);
							ЗначениеПоУмолчанию = СокрЛП(МассивПараметрЗначение[1]);
						ИначеЕсли МассивПараметрЗначение.Количество() > 0 Тогда
								ИмяПараметра = СокрЛП(МассивПараметрЗначение[0]);
						КонецЕсли;	
					КонецЕсли;	
					УбратьСлужебноеСлово(ИмяПараметра); 
					УбратьСлужебныеСимволы(ИмяПараметра);
					Если ИмяПараметра = "" Тогда
						ИмяПараметра = "Параметр_"+Строка(СчП);
					КонецЕсли;	
					СтруктураПараметраТек = Новый Структура;					                                       
					СтруктураПараметраТек.Вставить("Наименование", ИмяПараметра);
					СтруктураПараметраТек.Вставить("ВидПараметра", Перечисления.АМ_ВидыПараметровПроцедурФункций.Входной);
					СтруктураПараметраТек.Вставить("ПорядокВВызове", СчП);
					СтруктураПараметраТек.Вставить("Обязательный", ЭтоОбязательныйПараметр);
					СтруктураПараметраТек.Вставить("ЗначениеПоУмолчанию", ЗначениеПоУмолчанию );
					СтруктураПараметраТек.Вставить("ТекстовоеОписание","");
					ДополнитьТекПараметрДаннымиИзКоммента(СтруктураПараметраТек, СтруктураКомментария);
					МассивПараметровМетода.Добавить(СтруктураПараметраТек);
					СчП = СчП + 1;
				КонецЦикла;	
			КонецЕсли;
			Если	ВидМетодаТек = Перечисления.АМ_ВидыМетодов.Функция Тогда
				СтруктураПараметраТек = Новый Структура;					                                       
				СтруктураПараметраТек.Вставить("Наименование", "ВыходнойПараметр");
				СтруктураПараметраТек.Вставить("ВидПараметра", Перечисления.АМ_ВидыПараметровПроцедурФункций.Выходной);
				СтруктураПараметраТек.Вставить("ПорядокВВызове", 0);
				СтруктураПараметраТек.Вставить("Обязательный", Истина);
				СтруктураПараметраТек.Вставить("ЗначениеПоУмолчанию", Неопределено);
				СтруктураПараметраТек.Вставить("ТекстовоеОписание","");
				ДополнитьТекПараметрДаннымиИзКоммента(СтруктураПараметраТек, СтруктураКомментария);
				МассивПараметровМетода.Добавить(СтруктураПараметраТек);
			КонецЕсли;	
			СтруктураМетода.Вставить("МассивПараметров", МассивПараметровМетода); 
			ЗаписатьМетодИзСтрукутуры(СтруктураМетода);		
		КонецЕсли; 
		
		
	КонецЕсли;
КонецПроцедуры

Процедура ДополнитьТекПараметрДаннымиИзКоммента(СтруктураПараметра, СтруктураПоКомментарию)
	СтруктураПараметровПоиск = Неопределено; 
	ИскатьЗначениеПар = Ложь;              
	СтруктураПараметра.Вставить("ТипыПараметра", Неопределено);			
	СтруктураПараметра.Вставить("ТипыСписок", Неопределено);
	Если СтруктураПараметра.ВидПараметра = Перечисления.АМ_ВидыПараметровПроцедурФункций.Выходной Тогда
		Если СтруктураПоКомментарию.Свойство("ВозвращаемоеЗначение",СтруктураПараметровПоиск) Тогда
			ИскатьЗначениеПар = Истина;
		КонецЕсли;	
	Иначе
		Если СтруктураПоКомментарию.Свойство("Параметры",СтруктураПараметровПоиск) Тогда
			ИскатьЗначениеПар = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ИскатьЗначениеПар Тогда 
		ТекСтруктураПараметраКоммент = Неопределено;
		Если ТипЗнч(СтруктураПараметровПоиск) = Тип("Структура") и СтруктураПараметровПоиск.Свойство(СтруктураПараметра.Наименование, ТекСтруктураПараметраКоммент) Тогда
			СтруктураПараметра.Вставить("ТипыПараметра", ТекСтруктураПараметраКоммент.ТипыПараметра);			
			СтруктураПараметра.Вставить("ТипыСписок", ТекСтруктураПараметраКоммент.ТипыСписок);
			СтруктураПараметра.ТекстовоеОписание = ТекСтруктураПараметраКоммент.ТекстовоеОписание;
		КонецЕсли;	
	КонецЕсли;	
	
КонеЦПроцедуры	

Функция РазложитьСтруктуруКомментария (КомментарийМетода)
	СтруктураКомментария = Новый Структура;                         
	СтруктураКомментария.Вставить("ОсновноеОписаниеМетода", "");
	СтруктураКомментария.Вставить("МетодУстарел", Ложь);
	СтруктураКомментария.Вставить("ТекстВажно","");
	СтруктураКомментария.Вставить("ТекстПример","");
	Если КомментарийМетода <> "" Тогда
		
		КомментарийБезКомментов = СтрЗаменить(КомментарийМетода,"// ", "");
		КомментарийБезКомментов = СтрЗаменить(КомментарийМетода,"//", "");
		
		
		ТаблицаОснБлоков = Новый ТаблицаЗначений;
		ТаблицаОснБлоков.Колонки.Добавить("НаименованиеБлока", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50)));
		ТаблицаОснБлоков.Колонки.Добавить("ПозицияВТексте", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(12)));
		ТаблицаОснБлоков.Колонки.Добавить("ТекстБлока", Новый ОписаниеТипов("Строка"));
		
		ПозицияВозврЗнач = СтрНайти(КомментарийБезКомментов ,"Возвращаемое значение");
		Если ПозицияВозврЗнач <> 0 Тогда
			СтрокаТЗБлоков = ТаблицаОснБлоков.Добавить();		
			СтрокаТЗБлоков.НаименованиеБлока = "ВозвращаемоеЗначение";
			СтрокаТЗБлоков.ПозицияВТексте = ПозицияВозврЗнач;
		КонецЕсли;	
		ПозицияПараметры = СтрНайти(КомментарийБезКомментов ,"Параметры");
		Если ПозицияПараметры <> 0 Тогда
			СтрокаТЗБлоков = ТаблицаОснБлоков.Добавить();		
			СтрокаТЗБлоков.НаименованиеБлока = "Параметры";
			СтрокаТЗБлоков.ПозицияВТексте = ПозицияПараметры;
		КонецЕсли;
		ПозицияВажно = СтрНайти(КомментарийБезКомментов ,"Важно:");
		Если ПозицияВажно <> 0 Тогда
			СтрокаТЗБлоков = ТаблицаОснБлоков.Добавить();		
			СтрокаТЗБлоков.НаименованиеБлока = "Важно";
			СтрокаТЗБлоков.ПозицияВТексте = ПозицияВажно;
		КонецЕсли;
		ПозицияУстарела = СтрНайти(КомментарийБезКомментов ,"Устарела");
		Если ПозицияУстарела <> 0 Тогда
			СтрокаТЗБлоков = ТаблицаОснБлоков.Добавить();		
			СтрокаТЗБлоков.НаименованиеБлока = "Устарела";
			СтрокаТЗБлоков.ПозицияВТексте = ПозицияУстарела;
		КонецЕсли;   
		ПозицияПримеры = СтрНайти(КомментарийБезКомментов ,"Пример:");
		Если ПозицияПримеры <> 0 Тогда
			СтрокаТЗБлоков = ТаблицаОснБлоков.Добавить();		
			СтрокаТЗБлоков.НаименованиеБлока = "Пример";
			СтрокаТЗБлоков.ПозицияВТексте = ПозицияПримеры;
		КонецЕсли;
		
		ТаблицаОснБлоков.Сортировать("ПозицияВТексте"); 
		
		Если ТаблицаОснБлоков.Количество() <> 0 Тогда
			ПозицияКонцаОсновногоОписнаия = ТаблицаОснБлоков[0]["ПозицияВТексте"];
			ОсновноеОписаниеТекст = Лев(КомментарийБезКомментов,ПозицияКонцаОсновногоОписнаия - 1);
			ДлинаТекстаВсего = СтрДлина(КомментарийБезКомментов);
			ВсегоСтрок = ТаблицаОснБлоков.Количество();
			ТекСчСтроки = 1;
			Для КАждого ТекПозБлока Из ТаблицаОснБлоков Цикл
				Если	ТекСчСтроки	 <> ВсегоСтрок	Тогда
					СтрокаСлед = ТаблицаОснБлоков[ТекСчСтроки];
					ТекПозБлока.ТекстБлока = Сред(КомментарийБезКомментов, ТекПозБлока.ПозицияВТексте, СтрокаСлед.ПозицияВТексте -  ТекПозБлока.ПозицияВТексте -1);   
				Иначе
					ТекПозБлока.ТекстБлока = Сред(КомментарийБезКомментов, ТекПозБлока.ПозицияВТексте, ДлинаТекстаВсего -1);   
				КонецЕсли;	
				
				ТекСчСтроки = ТекСчСтроки + 1;
			КонецЦикла;	
			СтрокаУстарела = ТаблицаОснБлоков.Найти("Устарела"); 
			Если СтрокаУстарела <> Неопределено Тогда
				ОсновноеОписаниеТекст = ОсновноеОписаниеТекст + СтрокаУстарела.ТекстБлока; 
				СтруктураКомментария.Вставить("МетодУстарел", Истина);
			КонецЕсли;
			СтруктураКомментария.Вставить("ОсновноеОписаниеМетода", ОсновноеОписаниеТекст);
			
			СтрокаВажно = ТаблицаОснБлоков.Найти("Важно"); 
			Если СтрокаВажно <> Неопределено Тогда         
				СтруктураКомментария.Вставить("ТекстВажно", СтрокаВажно.ТекстБлока);
			КонецЕсли;	
			
			СтрокаПример = ТаблицаОснБлоков.Найти("Пример"); 
			Если СтрокаВажно <> Неопределено Тогда         
				СтруктураКомментария.Вставить("ТекстПример", СтрокаВажно.ТекстБлока);
			КонецЕсли;	
			
			СтрокаВозвращаемоеЗначение = ТаблицаОснБлоков.Найти("ВозвращаемоеЗначение"); 
			Если СтрокаВозвращаемоеЗначение <> Неопределено Тогда
				СтруктураВозвращаемогоПараметра  = ВернутьСтруктуруОписанийПараметров(СтрокаВозвращаемоеЗначение.ТекстБлока, 
														Перечисления.АМ_ВидыПараметровПроцедурФункций.Выходной);
				СтруктураКомментария.Вставить("ВозвращаемоеЗначение", СтруктураВозвращаемогоПараметра);	
			КонецЕсли;	
			СтрокаПараметров = ТаблицаОснБлоков.Найти("Параметры"); 
			Если СтрокаПараметров <> Неопределено Тогда
				СтруктураПараметров  = ВернутьСтруктуруОписанийПараметров(СтрокаПараметров.ТекстБлока,
														Перечисления.АМ_ВидыПараметровПроцедурФункций.Входной);
				СтруктураКомментария.Вставить("Параметры", СтруктураПараметров);	
			КонецЕсли;	
			
		Иначе
			СтруктураКомментария.Вставить("ОсновноеОписаниеМетода", КомментарийБезКомментов);	
		КонецЕсли;
	КонецЕсли;
	Возврат СтруктураКомментария;
КонецФункции	

Функция ВернутьСтруктуруОписанийПараметров(ТекстПараметров, ТипПараметра)
	СтруктураПараметров = Новый Структура;                 
	
	МассивСтрокТекстаПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПараметров,Символы.ПС);	
	
	ТаблицаАнализаСтрокТекста = Новый ТаблицаЗначений;
	ТаблицаАнализаСтрокТекста.Колонки.Добавить("ТекстСтроки", Новый ОписаниеТипов("Строка"));
	ТаблицаАнализаСтрокТекста.Колонки.Добавить("ПробеловСначала", Новый ОписаниеТипов("Число"));
	ТаблицаАнализаСтрокТекста.Колонки.Добавить("ОписаниеВСтроке", Новый ОписаниеТипов("Строка"));
	ТаблицаАнализаСтрокТекста.Колонки.Добавить("ТипСтр", Новый ОписаниеТипов("Строка"));
	ТаблицаАнализаСтрокТекста.Колонки.Добавить("ИмяПараметра", Новый ОписаниеТипов("Строка")); 
	ТаблицаАнализаСтрокТекста.Колонки.Добавить("ПолеСчетчик", Новый ОписаниеТипов("Число")); 
	СчетчикСтрокА = 1;
	ПредыдущвяПозСлова = 0; 
	ЭтоПерваяСтрока = Истина;
	ДобавилиСловоКПараметру = Ложь;
	Для Каждого ТекСтрокаПараметров Из МассивСтрокТекстаПараметров Цикл
		Если ЭтоПерваяСтрока и (
			 СтрНайти(ТекСтрокаПараметров,"Параметры") <> 0 или 
			 СтрНайти(ТекСтрокаПараметров,"Возвращаемое значение") <> 0) Тогда
			 ТекСтрокаПараметров = СокрЛП(СтрЗаменить(ТекСтрокаПараметров,"Параметры:", ""));
			 ТекСтрокаПараметров = СокрЛП(СтрЗаменить(ТекСтрокаПараметров,"Параметры", ""));
			 ТекСтрокаПараметров = СокрЛП(СтрЗаменить(ТекСтрокаПараметров,"Возвращаемое значение:", ""));
			 ТекСтрокаПараметров = СокрЛП(СтрЗаменить(ТекСтрокаПараметров,"Возвращаемое значение", ""));
			 ЭтоПерваяСтрока = Ложь;
		КонецЕсли;	 
		Если ТекСтрокаПараметров = ""  Тогда
			Продолжить;
		КонецЕсли;	
		
		ТекСтрокаТаблицы = 	ТаблицаАнализаСтрокТекста.Добавить(); 
		
		Если Не ДобавилиСловоКПараметру и ТипПараметра = Перечисления.АМ_ВидыПараметровПроцедурФункций.Выходной Тогда
			СловоСледующееПерв = НайтиСледующееСлово(ТекСтрокаПараметров,1); 	
			СтрокаПередСовом = "";
			СтрокаПослеСлова = ТекСтрокаПараметров;
		    Если СловоСледующееПерв <> "" Тогда
				ПозНачалаСлова = СтрНайти(ТекСтрокаПараметров,СловоСледующееПерв,,1);
				
				СтрокаПередСовом = Сред(ТекСтрокаПараметров,1, ПозНачалаСлова - 1); 
				СтрокаПослеСлова = Сред(ТекСтрокаПараметров,ПозНачалаСлова, СтрДлина(ТекСтрокаПараметров) - ПозНачалаСлова + 1); 
				УбратьСлужебныеСимволы(СтрокаПередСовом, " 	");
			КонецЕсли;
			
			ТекСтрокаПараметров = СтрокаПередСовом +  "ВыходнойПараметр" + " "+Символ(8211)+" " + СтрокаПослеСлова;
			ДобавилиСловоКПараметру = Истина;	
		КонецЕсли;	
		
		//Добавить пробелы перед служебными символами коммента, обозначающими струкутру, чтобы было смещение
		СтрокаДляПроверкиКоммент = ТекСтрокаПараметров;
		ПервыйСимволПроверки = Лев(СокрЛП(СтрокаДляПроверкиКоммент),1);
		Если ПервыйСимволПроверки = "*"  или ПервыйСимволПроверки = "-" или ПервыйСимволПроверки = Символ(8211)  Тогда
			ТекСтрокаПараметров = "   " + ТекСтрокаПараметров;
		КонецЕсли;
		
		ТекСтрокаТаблицы.ТекстСтроки = ТекСтрокаПараметров;
		
		ТекСтрокаТаблицы.ПолеСчетчик = 1;
		
		ТекСтрокаТаблицы.ПробеловСначала = КоличествоПробеловСначала(ТекСтрокаПараметров);
		
		
		КоличествоТире = СтрЧислоВхождений(ТекСтрокаПараметров," - ");
		ПозицияПробела = СтрНайти(СокрЛП(ТекСтрокаПараметров), " ");
		
		//Здесь надо четко определить есть разделение на наименование тип и текст
		//Характерные признаки:
		//1. Если второе слово  тип и между ним и первым словом - или скобка ( то первое имя, аторое тип, далее текст
		//2. Если  после первого слова - то первое имя - далее текст
		//3. Если  строка начинается сильно дальше от начала то это описание
		
		//  ТекСтрокаТаблицы.ИмяПараметра = "";
		//	ТекСтрокаТаблицы.ТипСтр = "";
		//  ТекСтрокаТаблицы.ОписаниеВСтроке = "";
		
		ТаблицаСловВСтроке = ВернутьТаблицусловИзСтроки(ТекСтрокаПараметров);
		
	    ДлинаТекСтроки = СтрДлина(ТекСтрокаПараметров);
		
		ПервоеСловоВСтроке = "";
		НачальнаяПозСлова = 0;
		ВтороеСловоВСтроке = "";           
		ТретьеСловоВСтроке = "";
		СтрокаМеждуПервымиСловами = "";
		НачальнаяПозицияВторогоСлова = 0; 
		ПозТретьегоСлова = 0;   
		СтрокаМеждуВторымИТретьим = "";
		Если  ТаблицаСловВСтроке.Количество() > 1 Тогда
			СтрокаСоСловом = ТаблицаСловВСтроке[0];
			СтрокаСоСловом2 = ТаблицаСловВСтроке[1];
			ПервоеСловоВСтроке = СтрокаСоСловом.Слово;
			НачальнаяПозСлова = СтрокаСоСловом.ПозНачСлова; 
			
			ВтороеСловоВСтроке = СтрокаСоСловом2.Слово;  
			НачальнаяПозицияВторогоСлова = СтрокаСоСловом2.ПозНачСлова;
			СтрокаМеждуПервымиСловами = СтрокаСоСловом2.ПередСловом;
			Если ТаблицаСловВСтроке.Количество() > 2 Тогда
				СтрокаСоСловом3 = ТаблицаСловВСтроке[2];
				ТретьеСловоВСтроке = СтрокаСоСловом3.Слово;
				ПозТретьегоСлова = СтрокаСоСловом3.ПозНачСлова; 
				СтрокаМеждуВторымИТретьим = СтрокаСоСловом3.ПередСловом; 
			КонецЕсли;	
		КонецЕсли;	
		УбратьСлужебныеСимволы(ПервоеСловоВСтроке);
		УбратьСлужебныеСимволы(ВтороеСловоВСтроке);
		УбратьСлужебныеСимволы(ТретьеСловоВСтроке);
		Если ЭтоСловоПропустить(ВтороеСловоВСтроке) Тогда
			ВтороеСловоВСтроке = ТретьеСловоВСтроке;
			НачальнаяПозицияВторогоСлова = ПозТретьегоСлова;
			//СтрокаМеждуПервымиСловами = СтрокаМеждуВторымИТретьим;
			Если ТаблицаСловВСтроке.Количество() > 3 Тогда
				СтрокаСоСловом4 = ТаблицаСловВСтроке[3];
				ТретьеСловоВСтроке = СтрокаСоСловом4.Слово;
				УбратьСлужебныеСимволы(ТретьеСловоВСтроке);
				ПозТретьегоСлова = СтрокаСоСловом4.ПозНачСлова; 
				СтрокаМеждуВторымИТретьим = СтрокаСоСловом4.ПередСловом; 
			КонецЕсли;
		КонецЕсли;	
		//ПервоеСловоВСтроке = НайтиСледующееСлово(ТекСтрокаПараметров,1);
		//НачальнаяПозСлова = 0;
		//НачальнаяПозСлова = СтрНайти(ТекСтрокаПараметров, ПервоеСловоВСтроке);
		//ПозицияПоискаВторогоСлова = НачальнаяПозСлова + СтрДлина(ПервоеСловоВСтроке);
		
		//
		//ВтороеСловоВСтроке = "";           
		//НачальнаяПозицияВторогоСлова = 0;
		//ПозПоискаТретьегоСлова = ПозицияПоискаВторогоСлова; 
		//СтрокаМеждуПервымиСловами = "";
		//Если ДлинаТекСтроки >  ПозицияПоискаВторогоСлова Тогда
		//	
		//	ВтороеСловоВСтроке = НайтиСледующееСлово(ТекСтрокаПараметров, ПозицияПоискаВторогоСлова);
		//	НачальнаяПозицияВторогоСлова  = СтрНайти(ТекСтрокаПараметров, ВтороеСловоВСтроке, ,ПозицияПоискаВторогоСлова);
		//	ПозПоискаТретьегоСлова = НачальнаяПозицияВторогоСлова + СтрДлина(ВтороеСловоВСтроке);
		//	СтрокаМеждуПервымиСловами = Сред(ТекСтрокаПараметров, ПозицияПоискаВторогоСлова, НачальнаяПозицияВторогоСлова - ПозицияПоискаВторогоСлова);
		
		//КонецЕсли;
		//
		//ТретьеСловоВСтроке = "";
		//ПозТретьегоСлова = 0;
		//Если ДлинаТекСтроки > ПозПоискаТретьегоСлова Тогда 
		//	ТретьеСловоВСтроке = НайтиСледующееСлово(ТекСтрокаПараметров, ПозПоискаТретьегоСлова);
		//	ПозТретьегоСлова = СтрНайти(ТекСтрокаПараметров, ТретьеСловоВСтроке, ,ПозПоискаТретьегоСлова);
		//КонецЕсли;
		
		
		
		
		ЕстьТиреМеждуСлованми = Ложь;
		Если СтрНайти(СтрокаМеждуПервымиСловами, "-") <> 0 или СтрНайти(СтрокаМеждуПервымиСловами, Символ(8211)) <> 0 или  
			СтрНайти(СтрокаМеждуВторымИТретьим, "-") <> 0 или СтрНайти(СтрокаМеждуВторымИТретьим, Символ(8211)) Тогда
			ЕстьТиреМеждуСлованми = Истина;
		КонецЕсли;	
		
		ТекРазницаМеждуПредыдущими = НачальнаяПозСлова - ПредыдущвяПозСлова; 
		
		
		Если  ЭтоТипЗначения(ВтороеСловоВСтроке) и ЕстьТиреМеждуСлованми Тогда
			ТекСтрокаТаблицы.ИмяПараметра = СокрЛП(ПервоеСловоВСтроке);
			ТекСтрокаТаблицы.ТипСтр = СокрЛП(ВтороеСловоВСтроке);
			СтрокаОписаниеТек = Прав(ТекСтрокаПараметров, ДлинаТекСтроки - ПозТретьегоСлова +1); 
			ТекСтрокаТаблицы.ОписаниеВСтроке = СокрЛП(СтрокаОписаниеТек);
		//ИначеЕсли  ЭтоТипЗначения(ПервоеСловоВСтроке) Тогда
		//    ТекСтрокаТаблицы.ИмяПараметра = "";
		//	ТекСтрокаТаблицы.ТипСтр = СокрЛП(ПервоеСловоВСтроке);
		//	СтрокаОписаниеТек = Прав(ТекСтрокаПараметров, ДлинаТекСтроки - НачальнаяПозицияВторогоСлова +1); 
		//	ТекСтрокаТаблицы.ОписаниеВСтроке = СокрЛП(СтрокаОписаниеТек);	
		ИначеЕсли ЕстьТиреМеждуСлованми и ТекРазницаМеждуПредыдущими < 10 Тогда	
			ТекСтрокаТаблицы.ИмяПараметра = СокрЛП(ПервоеСловоВСтроке);
			ТекСтрокаТаблицы.ТипСтр = ""; 
			СтрокаОписаниеТек = Прав(ТекСтрокаПараметров, ДлинаТекСтроки - НачальнаяПозицияВторогоСлова + 1); 
			ТекСтрокаТаблицы.ОписаниеВСтроке = СокрЛП(СтрокаОписаниеТек);
		Иначе
			ТекСтрокаТаблицы.ИмяПараметра = "";
			ТекСтрокаТаблицы.ТипСтр = "";
			ТекСтрокаТаблицы.ОписаниеВСтроке = СокрЛП(ТекСтрокаПараметров);
		КонецЕсли;
		
		
			  
		ПредыдущвяПозСлова = НачальнаяПозСлова;
		СчетчикСтрокА = СчетчикСтрокА + 1;
		ЭтоПерваяСтрока = Ложь;
		
	КонецЦикла; 
	Если   ТекстПараметров = "" Тогда
		
	Иначе	
		//ТаблицаАнализаСтрокТекста.Удалить(0);
		Если ТаблицаАнализаСтрокТекста.Количество() > 0 Тогда
			//Если ТипПараметра = Перечисления.АМ_ВидыПараметровПроцедурФункций.Выходной Тогда
			//	ТаблицаАнализаСтрокТекста[0].ИмяПараметра = "ВыходнойПараметр";
			//КонецЕсли;	
			СвернутьТаблицуПоОписаниям (ТаблицаАнализаСтрокТекста);
			Если ТаблицаАнализаСтрокТекста.Количество() > 0 Тогда
				ПерваяСтрока = ТаблицаАнализаСтрокТекста[0];                                            
				ЗаполнитьСтруктуруПараметровД(ТаблицаАнализаСтрокТекста, 0, СтруктураПараметров);
			Иначе
				Т = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметров;
КонецФункции	

Функция ЭтоСловоПропустить(СловоПр)
	МассивСловПропусить = Новый Массив;
	МассивСловПропусить.Добавить(Врег("необязательный"));
	МассивСловПропусить.Добавить(Врег("Тип"));
	Если МассивСловПропусить.Найти(ВРЕГ(СловоПр)) <> Неопределено Тогда
		Рез = Истина;	
	Иначе	
		Рез = Ложь;	
	КонецЕсли;    
	Возврат Рез;
КонецФункции	

Функция	ВернутьТаблицусловИзСтроки(СтрокаВх, ОграничениеПоКоличеству = 6)
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Слово", Новый ОписаниеТипов("Строка"));
	ТаблицаСлов.Колонки.Добавить("ПозНачСлова", Новый ОписаниеТипов("Число"));
	ТаблицаСлов.Колонки.Добавить("ПозКонСлова", Новый ОписаниеТипов("Число"));
	ТаблицаСлов.Колонки.Добавить("ПередСловом", Новый ОписаниеТипов("Строка"));
	
	ДлинаСтрокиВх = СтрДлина(СтрокаВх); 
	НачПозиция = 1;
	СтрокаПоискаТек = СтрокаВх;
	

	ТекСчетчик = 0;
	Пока ДлинаСтрокиВх > НачПозиция и ТекСчетчик <= ОграничениеПоКоличеству Цикл
		
		//СтрокаПоискаТек = Прав(СтрокаВх, ДлинаСтрокиВх - (НачПозиция -1));
		
		СловоСледующее = НайтиСледующееСлово(СтрокаПоискаТек,НачПозиция); 	
		Если СловоСледующее <> "" Тогда
			ПозНачалаСлова = СтрНайти(СтрокаПоискаТек,СловоСледующее,,НачПозиция);
			ПозКонцаСлова = ПозНачалаСлова + Стрдлина(СловоСледующее)-1;
			СтрокаПеред = Сред(СтрокаПоискаТек,НачПозиция, ПозНачалаСлова - НачПозиция);
			НачПозиция = ПозКонцаСлова + 1;  
			СтрокаСлова = ТаблицаСлов.Добавить();
			СтрокаСлова.Слово = СловоСледующее;
			СтрокаСлова.ПозНачСлова = ПозНачалаСлова;
			СтрокаСлова.ПозКонСлова = ПозКонцаСлова;
			СтрокаСлова.ПередСловом = СтрокаПеред;
		Иначе     
			НачПозиция = ДлинаСтрокиВх;
		КонецЕсли;
		ТекСчетчик = ТекСчетчик + 1;
	КонецЦикла;	
	Возврат ТаблицаСлов;
КонецФункции	

Функция НайтиСледующееСлово(СтрокаДляПоиска, НачальнаяПозицияПоиска)
	СловоПоиска = "";
	//МассивСтрокСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаДляПоиска," ");
	//ПозНачалаПоиска = 1;
	//Для	Каждого ТекЧастьСтр Из МассивСтрокСлова Цикл
	//	ПозНачалаСлова = СтрНайти(СтрокаДляПоиска, ТекЧастьСтр, ,ПозНачалаПоиска); 
	//	Если НачальнаяПозицияПоиска <= ПозНачалаСлова Тогда
	//		Если ВСтрокеЕстьБуквы(ТекЧастьСтр) Тогда
	//			СловоПоиска = ТекЧастьСтр;
	//			Прервать;
	//		КонецЕсли;	
	//	КонецЕсли;
	//	ПозНачалаПоиска = ПозНачалаСлова + СтрДлина(ТекЧастьСтр);
	//КонецЦикла;	
	
	СтрокаДляПоискаСтарт = Сред(СтрокаДляПоиска,НачальнаяПозицияПоиска, СтрДлина(СтрокаДляПоиска) - НачальнаяПозицияПоиска +1);
	
	КолБуквСтарт = СтрДлина(СтрокаДляПоискаСтарт);
	
	ПозицияСтартаСлова = 0;
	ПозКонцаСлова = 0;
	СтрокаСлужСимволов = ПолучитьСтрокуСлужебныхСимволов();
	
	Для Н = 1 По КолБуквСтарт Цикл
		БукваПроверки = Сред(СтрокаДляПоискаСтарт,Н,1);
		Если ПозицияСтартаСлова = 0 и ВСтрокеЕстьБуквы(БукваПроверки) Тогда
			ПозицияСтартаСлова = Н;
		КонецЕсли;	
		Если ПозицияСтартаСлова <> 0 Тогда
			Если СтрНайти(СтрокаСлужСимволов, БукваПроверки) <> 0 Тогда
				ПозКонцаСлова = Н -1;
				Прервать;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Если ПозицияСтартаСлова <> 0 и ПозКонцаСлова = 0 Тогда     
		ПозКонцаСлова = КолБуквСтарт; 
	КонецЕсли;	
	Если ПозицияСтартаСлова <> 0  и ПозКонцаСлова <> 0 Тогда
		СловоПоиска = Сред(СтрокаДляПоискаСтарт,ПозицияСтартаСлова, ПозКонцаСлова - ПозицияСтартаСлова +1); 	
	КонецЕсли;
	Возврат СловоПоиска;
	
КонецФункции	

Функция ВСтрокеЕстьБуквы(СтрокаПросмотра)
	Рез = Ложь;
	ДлинаСтроиДляПоиска = СтрДлина(СтрокаПросмотра);
	Для Н = 1 По ДлинаСтроиДляПоиска Цикл
		СимволПроверки = Сред(СтрокаПросмотра,Н,1);	
		Если ТолькоБуквыВСтроке(СимволПроверки) Тогда
			Рез = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Рез;
КонецФункции	

                  
Процедура ЗаполнитьСтруктуруПараметровД(ТаблицаОписаний, ТекИндСтроки, СтруктураПараметров)
	 
	ПоследнийИндекс = ТаблицаОписаний.Количество() - 1;
	ДобавлятьПодчиненных = Ложь;               
	ВернутьНаверх = Ложь;
	Пока ТекИндСтроки <= ПоследнийИндекс и НЕ ВернутьНаверх Цикл
		ТекСтрокаОписания =  ТаблицаОписаний[ТекИндСтроки];
		ДобавлятьПодчиненных = Ложь;               
		ВернутьНаверх = Ложь;
		ИндексСледующейстроки = ТекИндСтроки + 1; 
		Если ИндексСледующейстроки <= ПоследнийИндекс Тогда
			СледующаяСтрокаОписнаия = ТаблицаОписаний[ИндексСледующейстроки];
			Если  ТекСтрокаОписания.ПробеловСначала < СледующаяСтрокаОписнаия.ПробеловСначала Тогда
				ДобавлятьПодчиненных = Истина;
			ИначеЕсли	ТекСтрокаОписания.ПробеловСначала > СледующаяСтрокаОписнаия.ПробеловСначала Тогда
				ВернутьНаверх = Истина;
			КонецЕсли;	
		КонецЕсли;	
		ТекИндСтроки = ТекИндСтроки + 1;
		
		СтруктураПараметра = ПолучитьСтруктуруПараметра();
		МассивТипов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтрокаОписания.ТипСтр, ",");
		МассивТиповСправочник = Новый Массив;
		Для Каждого ТекТипСтр Из МассивТипов Цикл
			СсылкаТипаТек =  ПолучитьТипЗначенияПоСтроке(СокрЛП(ТекТипСтр));
			МассивТиповСправочник.Добавить(СсылкаТипаТек);
		КонецЦикла;
		СтруктураПараметра.ТипыПараметра = МассивТиповСправочник;
		СтруктураПараметра.ТекстовоеОписание = ТекСтрокаОписания.ОписаниеВСтроке;  
		Если ДобавлятьПодчиненных Тогда
			СтруктураПодчиненный = Новый Структура;
			
		    ЗаполнитьСтруктуруПараметровД(ТаблицаОписаний, ТекИндСтроки, СтруктураПодчиненный);
			СтруктураПараметра.Вставить("ТипыСписок", СтруктураПодчиненный); 
			ВернутьНаверх = Ложь;
		КонецЕсли;
		
		
		Попытка
			СтруктураПараметров.Вставить(ТекСтрокаОписания.ИмяПараметра, СтруктураПараметра);
		Исключение                                                                           
			ТекСтрокаОписания.ИмяПараметра = "ИмяНеопределено"+Строка(ТекИндСтроки);
			СтруктураПараметров.Вставить(ТекСтрокаОписания.ИмяПараметра, СтруктураПараметра);
		КонецПопытки;	
		
		//ТекИндСтроки = ТекИндСтроки + 1; 
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПолучитьСтруктуруПараметра()
	СтруктураПараметра = Новый Структура;
	СтруктураПараметра.Вставить("ТипыПараметра", Неопределено);
	СтруктураПараметра.Вставить("ТекстовоеОписание","");
	СтруктураПараметра.Вставить("ТипыСписок", Неопределено); 
	Возврат СтруктураПараметра;
КонецФункции	

Процедура СвернутьТаблицуПоОписаниям (ТаблицаПараметров) 
	ТаблицаИтогов =  СвернутьПоГруппамТаблицу(ТаблицаПараметров);
	ТекСтрокаКДобавлению = Неопределено;                   
	МассивСтрокКУдалению = Новый Массив;
	
	ТаблицаДобавленияОписания = Новый ТаблицаЗначений();
	ТаблицаДобавленияОписания.Колонки.Добавить("ИндексСтрокиД", Новый ОписаниеТипов("Число"));
	ТаблицаДобавленияОписания.Колонки.Добавить("ОписаниеДобавить", Новый ОписаниеТипов("Строка"));
	
	ИндексСтрокиКДобавлению = 9999;
	Для	Каждого ТекСтрокаСОписанием Из ТаблицаПараметров Цикл
		//СтрокаГруппы =  ТаблицаИтогов.Найти(ТекСтрокаСОписанием.ПробеловСначала);
		Если ТекСтрокаСОписанием.ИмяПараметра <> "" Тогда
			УбратьСлужебныеСимволы(ТекСтрокаСОписанием.ИмяПараметра);
		КонецЕсли;	
		//ТекГруппаСТипом = Ложь;
		//Если СтрокаГруппы <> Неопределено Тогда
		//	ТекГруппаСТипом =  СтрокаГруппы.ВГруппеЕстьТип; 
		//КонецЕсли;       
		
		ОсновнаяСтрока = Ложь;
		
		Если ТекСтрокаСОписанием.ИмяПараметра <> "" или ТекСтрокаСОписанием.ТипСтр <> "" Тогда
			
			ОсновнаяСтрока = Истина;
			
		КонецЕсли;	
		
		Если ОсновнаяСтрока Тогда
			ИндексСтрокиКДобавлению = ТаблицаПараметров.Индекс(ТекСтрокаСОписанием);
		Иначе
			СтрокаОписаниеДобавить = ТаблицаДобавленияОписания.Добавить();
			СтрокаОписаниеДобавить.ИндексСтрокиД = ИндексСтрокиКДобавлению;
			СтрокаОписаниеДобавить.ОписаниеДобавить = ТекСтрокаСОписанием.ОписаниеВСтроке; 
			МассивСтрокКУдалению.Добавить(ТекСтрокаСОписанием);
		КонецЕсли;	
		
		
		//Если (Не ТекГруппаСТипом или (ТекГруппаСТипом и ТекСтрокаСОписанием.ИмяПараметра = "")) и ТекСтрокаКДобавлению <> Неопределено Тогда
		//	
		//	ТекСтрокаКДобавлению.ОписаниеВСтроке =  ТекСтрокаКДобавлению.ОписаниеВСтроке + " " +  ТекСтрокаСОписанием.ИмяПараметра + " " + ТекСтрокаСОписанием.ОписаниеВСтроке;
		//	Если  (ТекГруппаСТипом и ТекСтрокаСОписанием.ИмяПараметра = "" и ТекСтрокаСОписанием.ТипСтр <> "") Тогда
		//		ТекСтрокаКДобавлению.ТипСтр = ТекСтрокаКДобавлению.ТипСтр + ?(ТекСтрокаКДобавлению.ТипСтр = "", "", ", ") + ТекСтрокаСОписанием.ТипСтр;	
		//	КонецЕсли;	
		//	МассивСтрокКУдалению.
		//	
		//Иначе    
		//	ТекСтрокаКДобавлению = ТекСтрокаСОписанием; 
		//КонецЕсли;	
		
	КонецЦикла;  
	ТекстВПервую = "";
	Для	Каждого ТекСтрокаОписаниеДобавить Из ТаблицаДобавленияОписания Цикл
		Если ТекСтрокаОписаниеДобавить.ИндексСтрокиД <> 9999 Тогда 
			СтрокаТЧИсправить = ТаблицаПараметров[ТекСтрокаОписаниеДобавить.ИндексСтрокиД];
			ТекстДобавить = ТекстВПервую + ?(ТекстВПервую = "", "", " ") +  ТекСтрокаОписаниеДобавить.ОписаниеДобавить;
			ТекстВПервую = "";			
			СтрокаТЧИсправить.ОписаниеВСтроке = СтрокаТЧИсправить.ОписаниеВСтроке +  
											?(СокрЛП(СтрокаТЧИсправить.ОписаниеВСтроке) = "", "", " ") + ТекстДобавить;
			
		Иначе
			ТекстВПервую = ТекстВПервую + ?(ТекстВПервую = "", "", " ") + ТекСтрокаОписаниеДобавить.ОписаниеДобавить;
		КонецЕсли;	
		
											
	КонецЦикла;
	Для Каждого ТекСтрокаКУдалению Из  МассивСтрокКУдалению Цикл
		ТаблицаПараметров.Удалить(ТекСтрокаКУдалению);
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура УбратьСлужебноеСлово(ЗначениеНаименования)
	МассивСлужебныхСлов = Новый Массив;
	МассивСлужебныхСлов.Добавить("Знач ");
	
	Для Каждого ТекСлужСлово Из МассивСлужебныхСлов Цикл
		ЗначениеНаименования = СтрЗаменить(ЗначениеНаименования, ТекСлужСлово, "");
	КонецЦикла;	
	
Конецпроцедуры	

Процедура УбратьСлужебныеСимволы(ЗначениеНаименования, СимволыКроме = "") Экспорт
	
	
	СтрокаСлужебныхСимволов = ПолучитьСтрокуСлужебныхСимволов();
	СтрДлинаСимв = СтрДлина(СтрокаСлужебныхСимволов);
	Для Н = 1 По СтрДлинаСимв Цикл
		ТекСлужСимвол = Сред(СтрокаСлужебныхСимволов,Н,1); 
		Если   СтрНайти(СимволыКроме,ТекСлужСимвол) = 0 Тогда
			ЗначениеНаименования = СтрЗаменить(ЗначениеНаименования,ТекСлужСимвол,"");
		КонецЕсли;	
	КонецЦикла;
	
		
	
КонецПроцедуры	

Функция ПолучитьСтрокуСлужебныхСимволов()
	Возврат "!""№;:?*()-+=@#$%^&'|\/<>~` .,"+Символ(8211)+Символы.Таб;
КонецФункции	

Функция СвернутьПоГруппамТаблицу(ТаблицаПараметров)
	ТаблицаИтогов = ТаблицаПараметров.Скопировать();	
	ТаблицаИтогов.Свернуть("ПробеловСначала","ПолеСчетчик");
	ТаблицаИтогов.Сортировать("ПробеловСначала"); 
	
	ТаблицаИтогов.Колонки.Добавить("ВГруппеЕстьТип",Новый ОписаниеТипов("Булево"));	
	Для Каждого ТекСтрокаГруппы Из ТаблицаИтогов Цикл
		ТекСтрокаГруппы.ВГруппеЕстьТип = ЕстьТипыВТаблице(ТаблицаПараметров, ТекСтрокаГруппы.ПробеловСначала);
	КонецЦикла;	
	Возврат ТаблицаИтогов;
КонецФункции	

Функция ЕстьТипыВТаблице(ТаблицаПараметров, УровеньГруппы)
	СтрокаТаблицы = ТаблицаПараметров.Найти(УровеньГруппы, "ПробеловСначала");
	Рез = Ложь;
	Если СтрокаТаблицы <> Неопределено Тогда
		Рез = ЭтоТипЗначения(СтрокаТаблицы.ТипСтр);
	КонецЕсли;	
	Возврат Рез;
КонецФункции	

Функция ЭтоТипЗначения(ЗначениеПоиска)
	
	ТаблицаТипов =  АМ_РаботаСТекстомПроцедурИФункцийСерверПовторноеИспользование.ТаблицаОсновныхТипов();
	
	Результат = Ложь;
	Если ТаблицаТипов.Найти(ЗначениеПоиска) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьТипЗначенияПоСтроке(ЗначениеПоиска)
	Результат = Неопределено;
	ТаблицаТипов =  АМ_РаботаСТекстомПроцедурИФункцийСерверПовторноеИспользование.ТаблицаОсновныхТипов();
	СтрокаСоЗначеним = ТаблицаТипов.Найти(ЗначениеПоиска);
	Если СтрокаСоЗначеним <> Неопределено Тогда
		Результат = СтрокаСоЗначеним.Ссылка;
	КонецЕсли;	
	Возврат Результат;
КонецФункции	

Функция КоличествоПробеловСначала(СтрокаОбработки)
	КоличествоПробелов = 0;    
	КоличествоСимволовВСтроке = СтрДлина(СтрокаОбработки);
	КоличествоПобеловВТаб = 0;
	Для Н = 1 По КоличествоСимволовВСтроке Цикл                     
		ТекСимволПров = Сред(СтрокаОбработки,Н,1);
		Если ТекСимволПров = Символы.Таб Тогда
			КоличествоПобеловВТаб = КоличествоПобеловВТаб + 3;
		КонецЕсли;	
		Если ТолькоБуквыВСтроке(ТекСимволПров) Тогда
			 Прервать;
		КонецЕсли;	                              
		 
	КонецЦикла;	
	КоличествоПробелов = Н-1 + КоличествоПобеловВТаб;
	
	Возврат КоличествоПробелов;
КонецФункции	

Функция ТолькоБуквыВСтроке(СтрокаПроверки)
	
	Рез = Истина;
	
	СтрокаЛАТ = "ABCDEFGIHJKLMNOPQRSTUVWXYZ";
	СтрокаРУС = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	ДлинаСтрокиПров = СтрДлина(СтрокаПроверки);
	
	Для Н = 1 По ДлинаСтрокиПров Цикл
		ТекСимволПров = Сред(СтрокаПроверки, Н, 1);
		Если СтрНайти(СтрокаЛАТ, Врег(ТекСимволПров)) = 0 и
			СтрНайти(СтрокаРУС, Врег(ТекСимволПров)) = 0 Тогда
			Рез = Ложь;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат Рез;
КонецФункции	


Функция ПолучитьМетодОбъект(НаименованиеМетода, МодульСправочник)
	
	СсылкаМетод = Справочники.АМ_ПроцедурыИФункции.НайтиПоНаименованию(НаименованиеМетода,,,МодульСправочник);
	Если Не ЗначениеЗаполнено(СсылкаМетод) Тогда
		МетодОбъект = Справочники.АМ_ПроцедурыИФункции.СоздатьЭлемент();
	Иначе
		МетодОбъект = СсылкаМетод.ПолучитьОбъект();
	КонецЕсли;	
	Возврат МетодОбъект;
КонецФункции	

Процедура ЗаписатьМетодИзСтрукутуры(СтруктураМетода)
	МодульВладелец = 	СтруктураМетода.МодульВладелец;
	НименованиеМетода = СтруктураМетода.Наименование;
	
	МетодДляЗаполнения = ПолучитьМетодОбъект(НименованиеМетода, МодульВладелец);
	Если МетодДляЗаполнения.Этоновый() Тогда                                        
		ЗаполнитьЗначенияСвойств(МетодДляЗаполнения, СтруктураМетода);
		Если МодульВладелец.НеТиповой Тогда
			МетодДляЗаполнения.НеТиповая = Истина;	
		КонецЕсли;	
	Иначе
		ДопСтрокаПолейПропустить = "";
		Если МетодДляЗаполнения.КомментарийВручную Тогда
			ДопСтрокаПолейПропустить = ",ОбщееОписание,Важно,Пример";
		КонецЕсли;	
			
		ЗаполнитьЗначенияСвойств(МетодДляЗаполнения, СтруктураМетода,,"НеТиповая,КомментарийВручную,Автор"+ДопСтрокаПолейПропустить); 
	КонецЕсли;	
	МетодДляЗаполнения.Владелец = МодульВладелец;
	Попытка
		МетодДляЗаполнения.Записать(); 
		Если Не МетодДляЗаполнения.КомментарийВручную Тогда
			ЗаписатьПараметрыМетода(СтруктураМетода.МассивПараметров, МетодДляЗаполнения.Ссылка);
		КонецЕсли;	
	Исключение
	Конецпопытки;	
	
	
КонецПроцедуры	


Процедура ЗаписатьПараметрыМетода(МассивПараметров, МетодВладелец)
	
	УдалитьПараметрыНеВСписке(МассивПараметров, МетодВладелец);
	Для Каждого ТекЭлементПараметр Из МассивПараметров Цикл
		ЗаписатьПараметр(ТекЭлементПараметр, МетодВладелец);
	КонецЦикла;	
КонецПроцедуры	              


Процедура ЗаписатьПараметр(СтруктураПараметра, ВладелецПараметра, РодительПараметра = Неопределено)
	
	НаименованиеПараметра = СтруктураПараметра.Наименование;	
	
	ПараметрДляЗаписи = ПолучитьПараметр(НаименованиеПараметра, ВладелецПараметра, РодительПараметра); 
	ЗаполнитьЗначенияСвойств(ПараметрДляЗаписи, СтруктураПараметра);
	Если ЗначениеЗаполнено(СтруктураПараметра.ТипыПараметра) и ТипЗнч(СтруктураПараметра.ТипыПараметра) = Тип("Массив") Тогда
		ПервыйТипПараметра = Неопределено;                   
		ПараметрДляЗаписи.ТипыПараметров.Очистить();
		Для Каждого ТекЭлементТипПараметраСсылка Из СтруктураПараметра.ТипыПараметра Цикл
			СтрокаТЧТипПар = ПараметрДляЗаписи.ТипыПараметров.Добавить();
			СтрокаТЧТипПар.ТипПараметра = ТекЭлементТипПараметраСсылка;
			Если ПервыйТипПараметра = Неопределено Тогда
				ПервыйТипПараметра = ТекЭлементТипПараметраСсылка;
			КонецЕсли;	
		КонецЦикла;	
		Если ПервыйТипПараметра <> Неопределено Тогда
			ПараметрДляЗаписи.ОсновнойТипПараметра = ПервыйТипПараметра;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РодительПараметра) Тогда
		ПараметрДляЗаписи.Родитель = РодительПараметра;
	КонецЕсли;	 
	ПараметрДляЗаписи.Владелец = ВладелецПараметра;
	Попытка
		ПараметрДляЗаписи.Записать();
		Если ЗначениеЗаполнено(СтруктураПараметра.ТипыСписок) Тогда
			Для Каждого ТекПараметрСТипов Из СтруктураПараметра.ТипыСписок Цикл
				СтруктураПараметраСп = ТекПараметрСТипов.Значение;
				СтруктураПараметраСп.Вставить("Наименование",ТекПараметрСТипов.Ключ);
				СтруктураПараметраСп.Вставить("ВидПараметра",СтруктураПараметра.ВидПараметра);
				СтруктураПараметраСп.Вставить("ПорядокВВызове",0);
				СтруктураПараметраСп.Вставить("Обязательный",Ложь);
				СтруктураПараметраСп.Вставить("ЗначениеПоУмолчанию",Неопределено);
			    ЗаписатьПараметр(СтруктураПараметраСп, ВладелецПараметра, ПараметрДляЗаписи.Ссылка);
			КонецЦикла;	
		КонецЕсли;	
	Исключение
	КонецПопытки;	
	
КонецПроцедуры	

Процедура УдалитьПараметрыНеВСписке(МассивМараметров, МетодВладелец)
	
	МассивНаименований = Новый Массив;
	Для Каждого ТекСтруктураПараметра Из МассивМараметров Цикл
		МассивНаименований.Добавить(ТекСтруктураПараметра.Наименование);
	КонецЦикла;	
	МассивУдалить = Новый Массив;
	ВыборкаСтруктраПар = Справочники.АМ_Параметры.ВыбратьИерархически(,МетодВладелец);
	Пока ВыборкаСтруктраПар.Следующий() Цикл
		Если МассивНаименований.Найти(ВыборкаСтруктраПар.Наименование) = Неопределено Тогда
			МассивУдалить.Добавить(ВыборкаСтруктраПар.Ссылка);
		КонецЕсли;	
	КонецЦикла;	
	ПометитьНаУдалениеМассивСсылокПараметров(МассивУдалить);
	УдалитьПомеченныеНаУдалениеПараметрыМетода(МетодВладелец);	
КонецПроцедуры	

Процедура ПометитьНаУдалениеМассивСсылокПараметров(МассивСсылок)
	Для Каждого ТекСсылкаКПометке Из МассивСсылок Цикл
		ВыборкаГдеРодитель = Справочники.АМ_Параметры.Выбрать(ТекСсылкаКПометке);
		МассивГдеРодитель = Новый Массив;
		Пока ВыборкаГдеРодитель.Следующий() Цикл
			МассивГдеРодитель.Добавить(ВыборкаГдеРодитель.Ссылка);
		КонецЦикла;
		ПометитьНаУдалениеМассивСсылокПараметров(МассивГдеРодитель);
		ТекПараметрОбъект = ТекСсылкаКПометке.ПолучитьОбъект();
		ТекПараметрОбъект.ПометкаУдаления = Истина;
		Попытка
			ТекПараметрОбъект.Записать();
		Исключение
		КонецПопытки;	
	КонецЦикла;
КонецПроцедуры	

Процедура УдалитьПомеченныеНаУдалениеПараметрыМетода(МетодСсылка)
	ЗапросПоПараметрам = Новый Запрос;
	ЗапросПоПараметрам.Текст = "ВЫБРАТЬ
	                           |	АМ_Параметры.Ссылка КАК Ссылка
	                           |ИЗ
	                           |	Справочник.АМ_Параметры КАК АМ_Параметры
	                           |ГДЕ
	                           |	АМ_Параметры.Владелец = &Владелец
	                           |	И АМ_Параметры.ПометкаУдаления";
	ЗапросПоПараметрам.УстановитьПараметр("Владелец", МетодСсылка);
	ВыборкаПомеченныхПараметровВМетоде = ЗапросПоПараметрам.Выполнить().Выбрать();
	Пока ВыборкаПомеченныхПараметровВМетоде.Следующий() Цикл
		ТекОбъектПараметр = ВыборкаПомеченныхПараметровВМетоде.Ссылка.ПолучитьОбъект();
		Попытка
			ТекОбъектПараметр.Удалить(); 			 		
		Исключение
		КонецПопытки;	
	КонецЦикла;
КонецПроцедуры	

Функция ПолучитьПараметр(НаименованиеПараметра, ВладелецПараметра, РодительПараметра) 
	ПараметрОбъект = Неопределено;
	СсылкаНаПараметр = Справочники.АМ_Параметры.НайтиПоНаименованию(НаименованиеПараметра, Истина, РодительПараметра, ВладелецПараметра);
	Если ЗначениеЗаполнено(СсылкаНаПараметр) Тогда
		ПараметрОбъект = СсылкаНаПараметр.ПолучитьОбъект(); 
	Иначе
		ПараметрОбъект = Справочники.АМ_Параметры.СоздатьЭлемент(); 
	КонецЕсли;
	Возврат ПараметрОбъект;
КонецФункции	


Процедура ПерезаполнитьПараметрыИзТекстаКомментария(ТекстКомментария, МетодСсылка) Экспорт
	ВыборкаПараметров = Справочники.АМ_Параметры.Выбрать(Справочники.АМ_Параметры.ПустаяСсылка(),МетодСсылка);
	СтруктураПараметровПоКомментарию =   РазложитьСтруктуруКомментария(ТекстКомментария);
	МассивПараметровМетода = Новый Массив;
	Пока ВыборкаПараметров.Следующий() Цикл
		СтруктураЗначенийПараметра =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаПараметров.Ссылка, "Наименование,ВидПараметра,ПорядокВВызове,Обязательный,ЗначениеПоУмолчанию,ТекстовоеОписание");
		ДополнитьТекПараметрДаннымиИзКоммента(СтруктураЗначенийПараметра, СтруктураПараметровПоКомментарию);
		МассивПараметровМетода.Добавить(СтруктураЗначенийПараметра);
	КонецЦикла;	
	ЗаписатьПараметрыМетода(МассивПараметровМетода, МетодСсылка);
	
	
КонецПроцедуры	

#КонецОбласти

#Область ЗаполнениеКомментария

Функция ПолучитьСтруктуруНастроекКомментария()
	СтруктураНастроекКомментария = Новый Структура;
	СтруктураНастроекКомментария.Вставить("СмещениСтруктурныхТипов", 4);
	СтруктураНастроекКомментария.Вставить("СимволСтруктурныхТипов", "*");
	СтруктураНастроекКомментария.Вставить("ДлинаСтрокиКомментария", 110);
	Возврат СтруктураНастроекКомментария;
КонецФункции	


Процедура ЗаполнитьТекстКомментария(МетодСсылка, ТекстКомментария) Экспорт
	
	ОбщаяИнформация  = ?(МетодСсылка.Устарела,"Устарела. ", "") +  МетодСсылка.ОбщееОписание;
						
						
	ТекстСм = "";
	Для Каждого ТекСсылкаФункция Из МетодСсылка.СвязанныеПроцедурыИФункции Цикл
		ТекстСм = ТекстСм + ?(ТекстСм = "","",", ") + ТекСсылкаФункция.ПроцедураИлиФункция.Наименование;
	КонецЦикла;	
	
	Если ТекстСМ <> "" Тогда
		ОбщаяИнформация = ОбщаяИнформация +"  См. " + ТекстСм;
	КонецЕсли;	
	
	ОбщаяИнформация = ВернутьСтрокуТекстаДляКомментария(ОбщаяИнформация);
	
	ОбщаяИнформация = ОбщаяИнформация + ?(ЗначениеЗаполнено(МетодСсылка.Автор), ВернутьСимволПСЕслиНужно(ОбщаяИнформация) + "Автор: " + Строка(МетодСсылка.Автор),""); 
	
	ТекстВыходногоПараметра = ПолучитьТекстПараметров(МетодСсылка.Ссылка, Перечисления.АМ_ВидыПараметровПроцедурФункций.Выходной);
	Если  ТекстВыходногоПараметра <> "" Тогда
		ДобавитьКТекстуСимволыСтолбцом(ТекстВыходногоПараметра, " ");
	КонецЕсли;	
	
	ТекстВходногоПараметра = ПолучитьТекстПараметров(МетодСсылка.Ссылка, Перечисления.АМ_ВидыПараметровПроцедурФункций.Входной);
	Если  ТекстВходногоПараметра <> "" Тогда
		ДобавитьКТекстуСимволыСтолбцом(ТекстВходногоПараметра, " ");
	КонецЕсли;	
	
	ТекстВажно =  МетодСсылка.Важно;
	Если  ТекстВажно <> "" Тогда
		ДобавитьКТекстуСимволыСтолбцом(ТекстВажно, " ");
	КонецЕсли;
	
	ТекстПример = МетодСсылка.Пример;
	Если  ТекстПример <> "" Тогда
		ДобавитьКТекстуСимволыСтолбцом(ТекстПример, " ");
	КонецЕсли;
	
	ТекстКомментарияВР = ОбщаяИнформация +
					   ?(ТекстВходногоПараметра = "","", ВернутьСимволПСЕслиНужно(ОбщаяИнформация)+"Параметры:"+ Символы.ПС + ТекстВходногоПараметра);
	ТекстКомментарияВР = ТекстКомментарияВР +
					   ?(ТекстВыходногоПараметра = "","",ВернутьСимволПСЕслиНужно(ТекстКомментарияВР) + "Возвращаемое значение:"+Символы.ПС + ТекстВыходногоПараметра);
	ТекстКомментарияВР = ТекстКомментарияВР +
					   ?(ТекстВажно = "","",ВернутьСимволПСЕслиНужно(ТекстКомментарияВР) + "Важно:" + Символы.ПС + ТекстВажно);
	ТекстКомментарияВР = ТекстКомментарияВР +
					   ?(ТекстПример = "","",ВернутьСимволПСЕслиНужно(ТекстКомментарияВР) + "Пример:"+Символы.ПС + ТекстПример); 
					   
	
	ДобавитьКТекстуСимволыСтолбцом(ТекстКомментарияВР, "// ");				   
	
	ТекстКомментария = ТекстКомментарияВР;				   
КонецПроцедуры	

Процедура ДобавитьКТекстуСимволыСтолбцом(ТекстКИзм, ДобавитьСимволы)
	ТекстовыйДокументКоммент = Новый ТекстовыйДокумент;
	ТекстовыйДокументКоммент.УстановитьТекст(ТекстКИзм);
	
	Для Н = 1 По ТекстовыйДокументКоммент.КоличествоСтрок() Цикл
		СтрокаКоммВР = ТекстовыйДокументКоммент.ПолучитьСтроку(Н);
		СтрокаКоммВР = ДобавитьСимволы + СтрокаКоммВР;
		ТекстовыйДокументКоммент.ЗаменитьСтроку(Н,СтрокаКоммВР);
	КонецЦикла;	
	ТекстКИзм = ТекстовыйДокументКоммент.ПолучитьТекст();
КонецПроцедуры	

Функция ВернутьСимволПСЕслиНужно(ПредущийТекст)
	СимволПСН = "";
	ПоследнийСимволТекстаП = Прав(ПредущийТекст,1);	
	Если ПоследнийСимволТекстаП = Символы.ПС или ПоследнийСимволТекстаП = Символы.ВК Тогда
	Иначе          
		СимволПСН = Символы.ПС;
	КонецЕсли;	              
	Возврат СимволПСН;
КонецФункции	

Функция ПолучитьТекстПараметров(МетодССылка, ВидПараметров)
	
	ТекстПараметра = "";
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидПараметра", ВидПараметров);
	
	
	СписокПараметров = Справочники.АМ_Параметры.ВыбратьИерархически(,МетодССылка, СтруктураОтбора,"Код"); 
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("УровеньПараметра",Новый ОписаниеТипов("Число"));
	ТаблицаПараметров.Колонки.Добавить("ДлинаНаименования",Новый ОписаниеТипов("Число"));
	ТаблицаПараметров.Колонки.Добавить("ДлинаТипов",Новый ОписаниеТипов("Число"));
	ТаблицаПараметров.Колонки.Добавить("ТипПараметра",Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("ТекстовоеОписание",Новый ОписаниеТипов("Строка")); 
	ТаблицаПараметров.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка")); 
	ТаблицаПараметров.Колонки.Добавить("ПорядокВВызове",Новый ОписаниеТипов("Число")); 
	
	
	Пока СписокПараметров.Следующий() Цикл
		
		//Если  Не СписокПараметров.ПометкаУдаления Тогда
		//	ТекСтрокаПараметр = ТаблицаПараметров.Добавить();		
		//	
		//	ЗаполнитьЗначенияСвойств(ТекСтрокаПараметр, СписокПараметров);
		//			
		//	ТекСтрокаПараметр.УровеньПараметра = СписокПараметров.УровеньВВыборке();
		//	
		//	ТипыСтр = "";
		//	
		//	Для Каждого ТекТипПараметра Из СписокПараметров.ТипыПараметров Цикл
		//		ТипыСтр = ТипыСтр + ?(ТипыСтр = "","",", ") + ТекТипПараметра.ТипПараметра.Наименование;	
		//	КонецЦикла;
		//	
		//	ТекСтрокаПараметр.ТипПараметра = ТипыСтр;   
		//	ТекСтрокаПараметр.ДлинаНаименования = СтрДлина(СписокПараметров.Наименование);
		//	ТекСтрокаПараметр.ДлинаТипов = СтрДлина(ТипыСтр);
		//КонецЕсли;
		Если  Не СписокПараметров.ПометкаУдаления Тогда
			Для Каждого ТекТипПараметра Из СписокПараметров.ТипыПараметров Цикл
				ТекСтрокаПараметр = ТаблицаПараметров.Добавить();		
				ЗаполнитьЗначенияСвойств(ТекСтрокаПараметр, СписокПараметров);
				ТекСтрокаПараметр.УровеньПараметра = СписокПараметров.УровеньВВыборке();
				ТекСтрокаПараметр.ТипПараметра = ТекТипПараметра.ТипПараметра.Наименование;   
				ТекСтрокаПараметр.ТекстовоеОписание  = ТекСтрокаПараметр.ТекстовоеОписание + 
													?(СокрЛП(ТекСтрокаПараметр.ТекстовоеОписание) = "", "", " ") +
													ТекТипПараметра.ОписаниеПараметра;
				
				ТекСтрокаПараметр.ДлинаНаименования = СтрДлина(СписокПараметров.Наименование);
				ТекСтрокаПараметр.ДлинаТипов = СтрДлина(ТекСтрокаПараметр.ТекстовоеОписание);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	//ТаблицаПараметров.Сортировать("УровеньПараметра,ПорядокВВызове,Код");
	
	ЗапросПоМаксимумамГр = Новый Запрос;
	ЗапросПоМаксимумамГр.Текст = "ВЫБРАТЬ
	                             |	ТаблицаИменПараметров.УровеньПараметра КАК УровеньПараметра,
	                             |	ТаблицаИменПараметров.ДлинаНаименования КАК ДлинаНаименования,
	                             |	ТаблицаИменПараметров.ДлинаТипов КАК ДлинаТипов
	                             |ПОМЕСТИТЬ ТаблицаПараметровВр
	                             |ИЗ
	                             |	&ТаблицаИменПараметров КАК ТаблицаИменПараметров
	                             |;
	                             |
	                             |////////////////////////////////////////////////////////////////////////////////
	                             |ВЫБРАТЬ
	                             |	ТаблицаПараметровВр.УровеньПараметра КАК УровеньПараметра,
	                             |	МАКСИМУМ(ТаблицаПараметровВр.ДлинаНаименования) КАК ДлинаНаименования,
	                             |	МАКСИМУМ(ТаблицаПараметровВр.ДлинаТипов) КАК ДлинаТипов
	                             |ИЗ
	                             |	ТаблицаПараметровВр КАК ТаблицаПараметровВр
	                             |
	                             |СГРУППИРОВАТЬ ПО
	                             |	ТаблицаПараметровВр.УровеньПараметра";
	
	ЗапросПоМаксимумамГр.УстановитьПараметр("ТаблицаИменПараметров",ТаблицаПараметров);
	
	ТаблицаМаксимомГр = ЗапросПоМаксимумамГр.Выполнить().Выгрузить();
	
	
	СтруктураНастроекКомментария = ПолучитьСтруктуруНастроекКомментария();
	
	ПредНаименование = "";
	Для Каждого ТекСтрокаТабПараметра Из ТаблицаПараметров Цикл
		УбралиНаименвоание = Ложь;
		КоличествоПробеловПеред = (ТекСтрокаТабПараметра.УровеньПараметра+1)* СтруктураНастроекКомментария.СмещениСтруктурныхТипов;		
		ПробелыПеред = ПолучитьСтрокуПробелов(КоличествоПробеловПеред);
				
		СтрокаМаксГр = ТаблицаМаксимомГр.Найти(ТекСтрокаТабПараметра.УровеньПараметра, "УровеньПараметра");
		МаксимальнаяДлСтрНаимДляГруппы = 0;
		Если СтрокаМаксГр <> Неопределено Тогда
			МаксимальнаяДлСтрНаимДляГруппы = СтрокаМаксГр.ДлинаНаименования;
			МаксимальнаяДлСтТиповДляГруппы = СтрокаМаксГр.ДлинаТипов;
		КонецЕсли;	
		//КолПробеловПослеНаименвоания = ?(МаксимальнаяДлСтрНаимДляГруппы = 0, 0, МаксимальнаяДлСтрНаимДляГруппы - СтрДлина(ТекСтрокаТабПараметра.Наименование));
		//ПробеловПослеНаименвоания = ПолучитьСтрокуПробелов(КолПробеловПослеНаименвоания);
		//КолПробеловПослеТипа = ?(МаксимальнаяДлСтТиповДляГруппы = 0, 0, МаксимальнаяДлСтТиповДляГруппы - СтрДлина(ТекСтрокаТабПараметра.ТипПараметра));
		//ПробеловПослеТипа = ПолучитьСтрокуПробелов(КолПробеловПослеТипа);
		
		Если СокрЛП(ПредНаименование) <> ""  И ПредНаименование = ТекСтрокаТабПараметра.Наименование Тогда
			ДлинаТекНаименования = СтрДлина(ТекСтрокаТабПараметра.Наименование);
			УбралиНаименвоание = Истина;
		КонецЕсли;	
		ПредНаименование = ТекСтрокаТабПараметра.Наименование;
		
		
		СтрокаПараметраДобавить = ПробелыПеред + ?(ТекСтрокаТабПараметра.УровеньПараметра = 0 или УбралиНаименвоание, "", " "+ СтруктураНастроекКомментария.СимволСтруктурныхТипов + " ") 
									+  ?(ТекСтрокаТабПараметра.Наименование = "ВыходнойПараметр","",?(УбралиНаименвоание, ПолучитьСтрокуПробелов(ДлинаТекНаименования + 3),ТекСтрокаТабПараметра.Наименование) +  " "+Символ(8211)+" " )
									//+ ПробеловПослеНаименвоания 
									+ ТекСтрокаТабПараметра.ТипПараметра 
									+ " "+Символ(8211)+" ";
		ДлинаПромежуточная = СтрДлина(СтрокаПараметраДобавить);
		
		ДлинаПервойСтроки = СтруктураНастроекКомментария.ДлинаСтрокиКомментария - ДлинаПромежуточная - 1;
		//СмещениеСтрок = КоличествоПробеловПеред + МаксимальнаяДлСтрНаимДляГруппы + Окр(МаксимальнаяДлСтТиповДляГруппы/5*3) + 6 + ?(ТекСтрокаТабПараметра.УровеньПараметра = 0,0,3);
		СмещениеСтрок = 18;
		
		ОтфарматированнаяСтрокаПоясненияПараметра = ВернутьСтрокуТекстаДляКомментария (ТекСтрокаТабПараметра.ТекстовоеОписание, ДлинаПервойСтроки, СмещениеСтрок);
		СтрокаПараметраДобавить = СтрокаПараметраДобавить + " " + ОтфарматированнаяСтрокаПоясненияПараметра;							
									
		ТекстПараметра = ТекстПараметра + ?(ТекстПараметра = "", "", Символы.ПС) + СтрокаПараметраДобавить;							
		
	КонецЦикла;	
	
	Возврат ТекстПараметра;
КонецФункции	

Функция ПолучитьСтрокуПробелов(КоличествоПр) Экспорт
	ПробелыСтр = "";
	Для Н = 0 По КоличествоПр -1 Цикл
		ПробелыСтр =  ПробелыСтр + " ";
	КонецЦикла;	
	Возврат ПробелыСтр;
КонецФункции

Функция ВернутьСтрокуТекстаДляКомментария (СтрокаФорматироывания, ДлинаПервойСтроки = 0, СмещениеОстальныхСтрок = 0)
	Результат = "";
	
	ТекстовыйДокументВрем = Новый ТекстовыйДокумент;
	ТекстовыйДокументВрем.УстановитьТекст(СтрокаФорматироывания);
	КоличествоСтрокТекста = ТекстовыйДокументВрем.КоличествоСтрок();
	
	СтрокаБезРазделителей = "";
	ПромежуточныйРез  = "";
	Для Н = 1 По КоличествоСтрокТекста Цикл
	
		СтрокаБезРазделителей =   ТекстовыйДокументВрем.ПолучитьСтроку(Н);
		
		
		СтруктураНастроекКомментария = ПолучитьСтруктуруНастроекКомментария();
		КоличествоСимволовВСтроке = СтруктураНастроекКомментария.ДлинаСтрокиКомментария;
		
		ДлинаПервойСтроки = ?(ДлинаПервойСтроки = 0, КоличествоСимволовВСтроке, ДлинаПервойСтроки);
		
		МассивСловДляВывода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаБезРазделителей, " ");
		
		ВсегоСловВТексте = МассивСловДляВывода.Количество();
		
		ПерваяСтрока = "";
		
		ЭлементовВыведено = 0;
		ВременнаяСтрока = ""; 
		Если Н = 1 Тогда
			ПерваяСтрока = ПолучитьСтрокуПоДлине(МассивСловДляВывода, ЭлементовВыведено, ДлинаПервойСтроки);
		КонецЕсли;
		Если ЭлементовВыведено < ВсегоСловВТексте Тогда
			НормализоватьСтроку(ПерваяСтрока, ДлинаПервойСтроки);
			ПромежуточныйРез  =  ПерваяСтрока;
			СледующаяСтрока = "";
			Пока ЭлементовВыведено < ВсегоСловВТексте Цикл
				ДлинаСтрокиСоСловами = КоличествоСимволовВСтроке - СмещениеОстальныхСтрок;
				СледующаяСтрока = ПолучитьСтрокуПоДлине(МассивСловДляВывода, ЭлементовВыведено, ДлинаСтрокиСоСловами);
				НормализоватьСтроку(СледующаяСтрока, ДлинаСтрокиСоСловами);
				ПромежуточныйРез  = ПромежуточныйРез + Символы.ПС + ПолучитьСтрокуПробелов(СмещениеОстальныхСтрок) + СледующаяСтрока; 
			КонецЦикла;
			
		Иначе           
			НормализоватьСтроку(ПерваяСтрока, ДлинаПервойСтроки);
			ПромежуточныйРез = ПерваяСтрока;		
		КонецЕсли;	                 
		Результат = Результат + ПромежуточныйРез;
	
	КонецЦикла;
	Возврат Результат;
	
КонецФункции	


Функция ПолучитьСтрокуПоДлине(МассивСловДляВывода, ЭлементовВыведено, МаксДлинаСтроки)
	РезультатСтр = "";
	ВременнаяСтрока = "";
	НачальныйЭлементДляВывода = ЭлементовВыведено;
	СчетЧикЭлементов = 0;
	Для Каждого ТекСлово Из МассивСловДляВывода Цикл
		Если СчетЧикЭлементов >= НачальныйЭлементДляВывода Тогда
			ВременнаяСтрока = РезультатСтр + ?(РезультатСтр = "",""," ") + ТекСлово;
			Если СтрДлина(ВременнаяСтрока) > МаксДлинаСтроки и РезультатСтр <> "" Тогда
				Прервать;
			Иначе 
				РезультатСтр = ВременнаяСтрока;
				ЭлементовВыведено = ЭлементовВыведено + 1; 
			КонецЕсли; 
		КонецЕсли;	
		СчетЧикЭлементов = СчетЧикЭлементов + 1;
	КонецЦикла;
	Возврат РезультатСтр;
КонецФункции	


Процедура НормализоватьСтроку(СтрокаН, НужнаяДлинаСтроки)
	
	
	ЧислоПробеловВСтроке = СтрЧислоВхождений(СтрокаН, " ");    
	ДлинаСтрокиВх = СтрДлина(СтрокаН); 
	Если  ЧислоПробеловВСтроке <> 0 И  ДлинаСтрокиВх < НужнаяДлинаСтроки Тогда
		ПробеловДобавить = НужнаяДлинаСтроки - ДлинаСтрокиВх;
		МассивСловСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаН, " ");		
		КоличествоСлов = МассивСловСтроки.Количество();
		ТекСч = 1; 
		СчетчикПрцДобавл = 0;
		Пока  ПробеловДобавить > 0 и СчетчикПрцДобавл < 4 Цикл
			Для Каждого ТекСлово Из МассивСловСтроки Цикл
			
				Если ПробеловДобавить <> 0 и ТекСч < КоличествоСлов Тогда
					
					ТекСлово = ТекСлово + " ";
					ПробеловДобавить = ПробеловДобавить - 1;
				КонецЕсли;
				ТекСч = ТекСч + 1;
			КонецЦикла;      
			СчетчикПрцДобавл = СчетчикПрцДобавл + 1;
		КонецЦикла;	         
		
		СтрокаН = "";
		Для Каждого ТекСлово Из МассивСловСтроки Цикл
			СтрокаН = СтрокаН + ?(СтрокаН = "",""," ") + ТекСлово; 
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область ВспомогательныеФункции

Процедура ЗаполнитьЗначениемXDTO(ЗначениеТек, XDTOОбъект, ПутьКПодОбъекту)
	ЗначениеТек_ = Неопределено;
	Попытка
		ЗначениеТек_ = XDTOОбъект.Получить(ПутьКПодОбъекту);
	Исключение
	КонецПопытки;	                    
	
	СоответствиеЗначенийБулево = Новый Соответствие;
	СоответствиеЗначенийБулево.Вставить("true", Истина);
	СоответствиеЗначенийБулево.Вставить("false", Ложь);
	
	Если  ЗначениеТек_ <> Неопределено Тогда
		Если ТипЗнч(ЗначениеТек) = Тип("Строка") Тогда
			Если ТипЗнч(ЗначениеТек_) = Тип("Строка") Тогда
				ЗначениеТек = ЗначениеТек_;
			Иначе
				ЗначениеТек = Строка(ЗначениеТек_);
			КонецЕсли;
		ИначеЕсли	ТипЗнч(ЗначениеТек) = Тип("Число") Тогда
			Если ТипЗнч(ЗначениеТек_) = Тип("Число") Тогда
				ЗначениеТек = ЗначениеТек_;
			Иначе
				ЗначениеТек = ПолучитьЧисло_(ЗначениеТек_);
			КонецЕсли;
		ИначеЕсли	ТипЗнч(ЗначениеТек) = Тип("Дата") Тогда
			Если ТипЗнч(ЗначениеТек_) = Тип("Дата") Тогда
				ЗначениеТек = ЗначениеТек_;
			Иначе
				ЗначениеТек =	Дата( ЗначениеТек_);
			КонецЕсли;	
		ИначеЕсли	ТипЗнч(ЗначениеТек) = Тип("Булево") Тогда	
			Если ТипЗнч(ЗначениеТек_) = Тип("Булево") Тогда
				ЗначениеТек = ЗначениеТек_;
			Иначе  
				ПромежуточнЗнач = СоответствиеЗначенийБулево.Получить(ЗначениеТек_);
				Если ПромежуточнЗнач <> Неопределено Тогда
					ЗначениеТек = ПромежуточнЗнач;
				Иначе                                   
					ЗначениеТек = Ложь;
				КонецЕсли;
			КонецЕсли;	
		Иначе
			ЗначениеТек =  ЗначениеТек_;
		КонецЕсли;
	Иначе
		
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьЧисло_(Значение)
	ЧислоЗначение = 0;
	Попытка
		ЧислоЗначение = Число(Значение);
	Исключение
	
	КонецПопытки;
	Возврат ЧислоЗначение;
КонецФункции	


Процедура ЗаполнитьПолныйПутьСтрока(СсылкаЭлемент, Родитель = Неопределено, СтрокаПуть = "") Экспорт
	Если СтрокаПуть = "" Тогда
		СтрокаПуть = СсылкаЭлемент.Наименование;
	Иначе
		СтрокаПуть = СсылкаЭлемент.Наименование + " / " + СтрокаПуть;
	КонецЕсли;	
	Если ЗначениеЗаполнено(Родитель) Тогда
		ЗаполнитьПолныйПутьСтрока(Родитель, Родитель.Родитель, СтрокаПуть);
	КонецЕсли;	
	
КонецПроцедуры	
	
#КонецОбласти
